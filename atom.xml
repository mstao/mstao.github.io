<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>明山的博客</title>
  <subtitle>一念开明，反身而诚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-08T08:58:10.326Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mingshan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用SpringMVC实现RESTful API，并与Swagger集成生成API文档</title>
    <link href="http://yoursite.com/2017/10/08/%E5%88%A9%E7%94%A8SpringMVC%E5%AE%9E%E7%8E%B0RESTful%20API%EF%BC%8C%E5%B9%B6%E4%B8%8ESwagger%E9%9B%86%E6%88%90%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2017/10/08/利用SpringMVC实现RESTful API，并与Swagger集成生成API文档/</id>
    <published>2017-10-08T08:43:40.721Z</published>
    <updated>2017-10-08T08:58:10.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识RESTful-API"><a href="#认识RESTful-API" class="headerlink" title="认识RESTful API"></a>认识RESTful API</h2><p>RESTful API是目前比较成熟的API设计理论，它通过统一的API接口来对外提供服务，这样对其他调用者来说比较友好，更加容易实现前后端分离。那么如果要使用RESTful API来写我们的代码，那么就需要先知道RESTful API规范。</p>
<h2 id="参考RESTful-API规范"><a href="#参考RESTful-API规范" class="headerlink" title="参考RESTful API规范"></a>参考RESTful API规范</h2><p>下面是两篇文章讲解RESTful API的，推荐：</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></li>
<li><a href="http://www.csdn.net/article/2013-06-13/2815744-RESTful-API" target="_blank" rel="external">RESTful API 设计最佳实践</a></li>
</ol>
<h2 id="SpringMVC实现RESTful-API"><a href="#SpringMVC实现RESTful-API" class="headerlink" title="SpringMVC实现RESTful API"></a>SpringMVC实现RESTful API</h2><p>SpringMVC提供了一些注解来实现RESTful API, 例如<strong>@RestController</strong>，同时我们用Swagger来生成API文档，这样更加利于测试API。</p>
<h3 id="常见swagger注解一览与使用"><a href="#常见swagger注解一览与使用" class="headerlink" title="常见swagger注解一览与使用"></a>常见swagger注解一览与使用</h3><p><strong>最常用的5个注解</strong></p>
<p>@Api：修饰整个类，描述Controller的作用<br>@ApiOperation：描述一个类的一个方法，或者说一个接口<br>@ApiParam：单个参数描述<br>@ApiModel：用对象来接收参数<br>@ApiProperty：用对象接收参数时，描述对象的一个字段</p>
<p><strong>其它若干</strong></p>
<p>@ApiResponse：HTTP响应其中1个描述<br>@ApiResponses：HTTP响应整体描述<br>@ApiClass<br>@ApiError<br>@ApiErrors<br>@ApiParamImplicit<br>@ApiParamsImplicit</p>
<p><strong>其中@ApiOperation和@ApiParam参数说明</strong></p>
<p>@ApiOperation和@ApiParam为添加的API相关注解，参数说明如下：<br>@ApiOperation(value = “接口说明”, httpMethod = “接口请求方式”, response = “接口返回参数类型”, notes = “接口发布说明”；其他参数可参考源码；<br>@ApiParam(required = “是否必须参数”, name = “参数名称”, value = “参数具体描述”</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>首先在pom.xml文件中添加swagger依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- swagger --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mangofactory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-springmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Swagger-UI配置"><a href="#Swagger-UI配置" class="headerlink" title="Swagger-UI配置"></a>Swagger-UI配置</h3><p>首先从<a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="external">Swagger-UI下载地址</a>下载Swagger-UI文件，然后将其拷贝到webapp目录下，我这里新建了一个swagger文件夹，然后解压后的文件拷贝到这个文件夹里面了。</p>
<p>修改swagger/index.html文件，默认是从连接<a href="http://petstore.swagger.io/v2/swagger.json获取" target="_blank" rel="external">http://petstore.swagger.io/v2/swagger.json获取</a> API 的JSON，这里需要将url值修改为<a href="http://{ip}:{port}/{projectName}/api-docs的形式，{}中的值根据自身情况填写。比如我的url值为：http://localhost:8080/lightblog/api-docs" target="_blank" rel="external">http://{ip}:{port}/{projectName}/api-docs的形式，{}中的值根据自身情况填写。比如我的url值为：http://localhost:8080/lightblog/api-docs</a></p>
<h3 id="编写swagger配置文件"><a href="#编写swagger配置文件" class="headerlink" title="编写swagger配置文件"></a>编写swagger配置文件</h3><p>配置完Swagger-UI后，我们需要配置Swagger，并将其交给Spring进行管理。<br><a id="more"></a><br>SwaggerConfig类代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lightblog.swagger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.mangofactory.swagger.configuration.SpringSwaggerConfig;</div><div class="line"><span class="keyword">import</span> com.mangofactory.swagger.models.dto.ApiInfo;</div><div class="line"><span class="keyword">import</span> com.mangofactory.swagger.plugin.EnableSwagger;</div><div class="line"><span class="keyword">import</span> com.mangofactory.swagger.plugin.SwaggerSpringMvcPlugin;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Description</span>:</div><div class="line"> * <span class="doctag">@Author</span>: Minsghan</div><div class="line"> * <span class="doctag">@Date</span>: Created in 16:40 2017/10/3</div><div class="line"> * <span class="doctag">@Modified</span> By:</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span><span class="comment">//如果没加这个会报错</span></div><div class="line"><span class="meta">@EnableSwagger</span><span class="comment">//上面三个注释都是必要的</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.lightblog.controller"</span>)<span class="comment">//添加这个注释，会自动扫描该类中的每一个方法自动生成api文档</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SpringSwaggerConfig springSwaggerConfig;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Required to autowire SpringSwaggerConfig</div><div class="line">     */</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpringSwaggerConfig</span><span class="params">(SpringSwaggerConfig springSwaggerConfig)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.springSwaggerConfig = springSwaggerConfig;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Every SwaggerSpringMvcPlugin bean is picked up by the swagger-mvc</div><div class="line">     * framework - allowing for multiple swagger groups i.e. same code base</div><div class="line">     * multiple swagger resource listings.</div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SwaggerSpringMvcPlugin <span class="title">customImplementation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SwaggerSpringMvcPlugin(<span class="keyword">this</span>.springSwaggerConfig)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .includePatterns(<span class="string">".*?"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        ApiInfo apiInfo = <span class="keyword">new</span> ApiInfo(</div><div class="line">                <span class="string">"springmvc搭建swagger"</span>,</div><div class="line">                <span class="string">"spring-API swagger测试"</span>,</div><div class="line">                <span class="string">"My Apps API terms of service"</span>,</div><div class="line">                <span class="string">"499445428@qq.com"</span>,</div><div class="line">                <span class="string">"web app"</span>,</div><div class="line">                <span class="string">"My Apps API License URL"</span>);</div><div class="line">        <span class="keyword">return</span> apiInfo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将 springSwaggerConfig加载到spring容器，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 将 springSwaggerConfig加载到spring容器 --&gt;</div><div class="line">&lt;bean class=&quot;com.mangofactory.swagger.configuration.SpringSwaggerConfig&quot; /&gt;</div><div class="line">&lt;!-- 将自定义的swagger配置类加载到spring容器 --&gt;</div><div class="line">&lt;bean class=&quot;com.lightblog.swagger.SwaggerConfig&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="Controller实现REST-API以及与Swagger集成"><a href="#Controller实现REST-API以及与Swagger集成" class="headerlink" title="Controller实现REST API以及与Swagger集成"></a>Controller实现REST API以及与Swagger集成</h3><p>在Controller中，我们不需要返回页面了，而是要返回json格式的数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lightblog.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.lightblog.model.User;</div><div class="line"><span class="keyword">import</span> com.lightblog.service.UserService;</div><div class="line"><span class="keyword">import</span> com.wordnik.swagger.annotations.Api;</div><div class="line"><span class="keyword">import</span> com.wordnik.swagger.annotations.ApiOperation;</div><div class="line"><span class="keyword">import</span> com.wordnik.swagger.annotations.ApiParam;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponentsBuilder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Description</span>: The api of user.</div><div class="line"> * <span class="doctag">@Author</span>: Minsghan</div><div class="line"> * <span class="doctag">@Date</span>: Created in 15:27 2017/10/3</div><div class="line"> * <span class="doctag">@Modified</span> By:</div><div class="line"> */</div><div class="line"><span class="meta">@Api</span>(value=<span class="string">"user"</span>)</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Author</span>: Mingshan</div><div class="line">     * <span class="doctag">@Description</span>: Get list of user.</div><div class="line">     * <span class="doctag">@param</span>:  null</div><div class="line">     * <span class="doctag">@Date</span>: 15:16 2017/10/3 </div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">""</span>, method = RequestMethod.GET)</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取所有用户信息"</span>, httpMethod=<span class="string">"GET"</span>, notes=<span class="string">"Get users"</span>, response=ResponseEntity.class)</div><div class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; listAllUsers() &#123;</div><div class="line">        List&lt;User&gt; users = userService.findAll();</div><div class="line">        <span class="keyword">if</span>(users.isEmpty())&#123;</div><div class="line">            <span class="comment">// You many decide to return HttpStatus.NOT_FOUND</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(HttpStatus.NO_CONTENT);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(users, HttpStatus.OK);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Author</span>: Mingshan</div><div class="line">     * <span class="doctag">@Description</span>: Get information of user by id.</div><div class="line">     * <span class="doctag">@param</span>:  * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@Date</span>: 15:34 2017/10/3 </div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户信息"</span>, httpMethod=<span class="string">"GET"</span>, notes=<span class="string">"Get user by id"</span>, response=User.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">getUser</span><span class="params">(@ApiParam(required=<span class="keyword">true</span>,value=<span class="string">"用户ID"</span>,name=<span class="string">"id"</span>)</span>@<span class="title">PathVariable</span><span class="params">(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</div><div class="line">        logger.info(<span class="string">"Fetching User with id "</span> + id);</div><div class="line">        User user = userService.findById(id);</div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(user, HttpStatus.OK);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Author</span>: Mingshan</div><div class="line">     * <span class="doctag">@Description</span>: Create a user.</div><div class="line">     * <span class="doctag">@param</span>:  * <span class="doctag">@param</span> null</div><div class="line">     * <span class="doctag">@Date</span>: 15:34 2017/10/3 </div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">""</span>, method = RequestMethod.POST)</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"新增用户"</span>, httpMethod=<span class="string">"POST"</span>, notes=<span class="string">"Create user"</span>, response=ResponseEntity.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">createUser</span><span class="params">(@ApiParam(required=<span class="keyword">true</span>,value=<span class="string">"用户信息"</span>,name=<span class="string">"User"</span>)</span></span></div><div class="line">                                               @RequestBody User user, UriComponentsBuilder ucBuilder) &#123;</div><div class="line">        logger.info(<span class="string">"Creating User "</span> + user.getName());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (userService.isUserExist(user)) &#123;</div><div class="line">            System.out.println(<span class="string">"A User with name "</span> + user.getName() + <span class="string">" already exist"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.CONFLICT);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        userService.insert(user);</div><div class="line"></div><div class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">        headers.setLocation(ucBuilder.path(<span class="string">"/user/&#123;id&#125;"</span>).buildAndExpand(user.getId()).toUri());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(headers, HttpStatus.CREATED);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Author</span>: Mingshan</div><div class="line">     * <span class="doctag">@Description</span>: Update a user.</div><div class="line">     * <span class="doctag">@param</span>:  * <span class="doctag">@param</span> null</div><div class="line">     * <span class="doctag">@Date</span>: 15:33 2017/10/3 </div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.PUT)</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户信息"</span>, httpMethod=<span class="string">"PUT"</span>, notes=<span class="string">"Update user"</span>, response=User.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">updateUser</span><span class="params">(@ApiParam(required=<span class="keyword">true</span>,value=<span class="string">"用户ID"</span>,name=<span class="string">"id"</span>)</span>@<span class="title">PathVariable</span><span class="params">(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id,</span></div><div class="line">                                           @RequestBody User user) &#123;</div><div class="line">        logger.info(<span class="string">"Updating User "</span> + id);</div><div class="line"></div><div class="line">        User currentUser = userService.findById(id);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentUser == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        currentUser.setName(user.getName());</div><div class="line">        currentUser.setAge(user.getAge());</div><div class="line"></div><div class="line">        userService.update(currentUser);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(currentUser, HttpStatus.OK);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Author</span>: Mingshan</div><div class="line">     * <span class="doctag">@Description</span>: Delete a user by id.</div><div class="line">     * <span class="doctag">@param</span>:  * <span class="doctag">@param</span> null</div><div class="line">     * <span class="doctag">@Date</span>: 15:32 2017/10/3 </div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, httpMethod=<span class="string">"DELETE"</span>, notes=<span class="string">"Delete user by id"</span>, response=ResponseEntity.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteUser</span><span class="params">(@ApiParam(required=<span class="keyword">true</span>,value=<span class="string">"用户ID"</span>,name=<span class="string">"id"</span>)</span>@<span class="title">PathVariable</span><span class="params">(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</div><div class="line">        logger.info(<span class="string">"Fetching &amp; Deleting User with id "</span> + id);</div><div class="line"></div><div class="line">        User user = userService.findById(id);</div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"Unable to delete. User with id "</span> + id + <span class="string">" not found"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.NOT_FOUND);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        userService.delete(id);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.NO_CONTENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://ip.freep.cn/590836/snipaste20171008_163312.png" alt="image"><br><img src="https://ip.freep.cn/590836/snipaste20171008_163351.png" alt="image"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="http://blog.csdn.net/fansunion/article/details/51923720" target="_blank" rel="external">http://blog.csdn.net/fansunion/article/details/51923720</a></li>
<li><a href="http://blog.csdn.net/w605283073/article/details/51338765" target="_blank" rel="external">http://blog.csdn.net/w605283073/article/details/51338765</a></li>
</ol>
<p>官网：<a href="http://swagger.io/" target="_blank" rel="external">http://swagger.io/</a></p>
<p>GitHub：</p>
<p>swagger-springmvc:<a href="https://github.com/martypitt/swagger-springmvc" target="_blank" rel="external">https://github.com/martypitt/swagger-springmvc</a></p>
<p>swagger-ui:<a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="external">https://github.com/swagger-api/swagger-ui</a></p>
<p>swagger-core:<a href="https://github.com/swagger-api/swagger-core" target="_blank" rel="external">https://github.com/swagger-api/swagger-core</a></p>
<p>swagger-spec：<a href="https://github.com/swagger-api/swagger-spec" target="_blank" rel="external">https://github.com/swagger-api/swagger-spec</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;认识RESTful-API&quot;&gt;&lt;a href=&quot;#认识RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;认识RESTful API&quot;&gt;&lt;/a&gt;认识RESTful API&lt;/h2&gt;&lt;p&gt;RESTful API是目前比较成熟的API设计理论，它通过统一的API接口来对外提供服务，这样对其他调用者来说比较友好，更加容易实现前后端分离。那么如果要使用RESTful API来写我们的代码，那么就需要先知道RESTful API规范。&lt;/p&gt;
&lt;h2 id=&quot;参考RESTful-API规范&quot;&gt;&lt;a href=&quot;#参考RESTful-API规范&quot; class=&quot;headerlink&quot; title=&quot;参考RESTful API规范&quot;&gt;&lt;/a&gt;参考RESTful API规范&lt;/h2&gt;&lt;p&gt;下面是两篇文章讲解RESTful API的，推荐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RESTful API 设计指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.csdn.net/article/2013-06-13/2815744-RESTful-API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RESTful API 设计最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;SpringMVC实现RESTful-API&quot;&gt;&lt;a href=&quot;#SpringMVC实现RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC实现RESTful API&quot;&gt;&lt;/a&gt;SpringMVC实现RESTful API&lt;/h2&gt;&lt;p&gt;SpringMVC提供了一些注解来实现RESTful API, 例如&lt;strong&gt;@RestController&lt;/strong&gt;，同时我们用Swagger来生成API文档，这样更加利于测试API。&lt;/p&gt;
&lt;h3 id=&quot;常见swagger注解一览与使用&quot;&gt;&lt;a href=&quot;#常见swagger注解一览与使用&quot; class=&quot;headerlink&quot; title=&quot;常见swagger注解一览与使用&quot;&gt;&lt;/a&gt;常见swagger注解一览与使用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;最常用的5个注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@Api：修饰整个类，描述Controller的作用&lt;br&gt;@ApiOperation：描述一个类的一个方法，或者说一个接口&lt;br&gt;@ApiParam：单个参数描述&lt;br&gt;@ApiModel：用对象来接收参数&lt;br&gt;@ApiProperty：用对象接收参数时，描述对象的一个字段&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其它若干&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@ApiResponse：HTTP响应其中1个描述&lt;br&gt;@ApiResponses：HTTP响应整体描述&lt;br&gt;@ApiClass&lt;br&gt;@ApiError&lt;br&gt;@ApiErrors&lt;br&gt;@ApiParamImplicit&lt;br&gt;@ApiParamsImplicit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其中@ApiOperation和@ApiParam参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@ApiOperation和@ApiParam为添加的API相关注解，参数说明如下：&lt;br&gt;@ApiOperation(value = “接口说明”, httpMethod = “接口请求方式”, response = “接口返回参数类型”, notes = “接口发布说明”；其他参数可参考源码；&lt;br&gt;@ApiParam(required = “是否必须参数”, name = “参数名称”, value = “参数具体描述”&lt;/p&gt;
&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;p&gt;首先在pom.xml文件中添加swagger依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- swagger --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mangofactory&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;swagger-springmvc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0.2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jackson-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jackson-annotations&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Swagger-UI配置&quot;&gt;&lt;a href=&quot;#Swagger-UI配置&quot; class=&quot;headerlink&quot; title=&quot;Swagger-UI配置&quot;&gt;&lt;/a&gt;Swagger-UI配置&lt;/h3&gt;&lt;p&gt;首先从&lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swagger-UI下载地址&lt;/a&gt;下载Swagger-UI文件，然后将其拷贝到webapp目录下，我这里新建了一个swagger文件夹，然后解压后的文件拷贝到这个文件夹里面了。&lt;/p&gt;
&lt;p&gt;修改swagger/index.html文件，默认是从连接&lt;a href=&quot;http://petstore.swagger.io/v2/swagger.json获取&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://petstore.swagger.io/v2/swagger.json获取&lt;/a&gt; API 的JSON，这里需要将url值修改为&lt;a href=&quot;http://{ip}:{port}/{projectName}/api-docs的形式，{}中的值根据自身情况填写。比如我的url值为：http://localhost:8080/lightblog/api-docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://{ip}:{port}/{projectName}/api-docs的形式，{}中的值根据自身情况填写。比如我的url值为：http://localhost:8080/lightblog/api-docs&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编写swagger配置文件&quot;&gt;&lt;a href=&quot;#编写swagger配置文件&quot; class=&quot;headerlink&quot; title=&quot;编写swagger配置文件&quot;&gt;&lt;/a&gt;编写swagger配置文件&lt;/h3&gt;&lt;p&gt;配置完Swagger-UI后，我们需要配置Swagger，并将其交给Spring进行管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Swagger" scheme="http://yoursite.com/tags/Swagger/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="RESTful-API" scheme="http://yoursite.com/tags/RESTful-API/"/>
    
  </entry>
  
  <entry>
    <title>谈谈基于ZooKeeper的分布式锁</title>
    <link href="http://yoursite.com/2017/10/02/%E8%B0%88%E8%B0%88%E5%9F%BA%E4%BA%8EZooKeeper%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://yoursite.com/2017/10/02/谈谈基于ZooKeeper的分布式锁/</id>
    <published>2017-10-01T23:25:34.826Z</published>
    <updated>2017-10-25T12:57:51.959Z</updated>
    
    <content type="html"><![CDATA[<p>分布式锁可以基于以下几种方式实现：</p>
<ul>
<li>基于数据库的乐观锁，用于分布式锁</li>
<li>基于缓存(Redis, memcached)实现分布式锁</li>
<li>基于ZooKeeper实现分布式锁</li>
</ul>
<p>在这篇文章中，主要讲讲ZooKeeper以及分布式锁的实现，通过了解基于ZooKeeper分布式锁实现的原理，我们会对ZooKeeper有一个基本的了解。</p>
<h2 id="ZooKeeper介绍"><a href="#ZooKeeper介绍" class="headerlink" title="ZooKeeper介绍"></a>ZooKeeper介绍</h2><p>首先谈谈ZooKeeper，ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务，它提供了一项基本服务：分布式锁服务。由于ZooKeeper的开源特性，后来我们的开发者在分布式锁的基础上，摸索了出了其他的使用方法：配置维护、组服务、分布式消息队列、分布式通知/协调等。</p>
<p>在ZooKeeper中，有一个被称为ZNode的节点，在该节点可以存储同步相关的数据，并且多个ZNode节点可以形成类似下图的结构。</p>
<p><img src="http://image170-c.poco.cn/mypoco/myphoto/20171025/20/18803584920171025205248033_165.jpg?564x491_120" alt="image"></p>
<h3 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1. 查看节点</div><div class="line">    ls /</div><div class="line">2. 创建节点</div><div class="line">    create /zk myData</div><div class="line">3. 查看节点</div><div class="line">    get /zk</div><div class="line">4. 设置节点</div><div class="line">    set /zk myData2</div><div class="line">5. 删除节点</div><div class="line">    delete /zk</div><div class="line">6. 创建临时节点</div><div class="line">    create -e /han data</div><div class="line">7. 创建顺序节点</div><div class="line">    create -s /han/ data</div><div class="line">8. 创建顺序临时节点</div><div class="line">    create -s -e /han/ data</div></pre></td></tr></table></figure>
<h3 id="ZNode"><a href="#ZNode" class="headerlink" title="ZNode"></a>ZNode</h3><p>客户端可以在一个ZNode上设置一个监视器（Watch），如果该ZNode数据发生变更，ZooKeeper会通知客户端，从而触发监视器中实现的逻辑的执行。其中ZNode有以下几种类型：</p>
<ul>
<li>PERSISTENT</li>
<li>PERSISTENT_SEQUENTIAL</li>
<li>EPHEMERAL</li>
<li>EPHEMERAL_SEQUENTIAL</li>
</ul>
<p>下面分别解释一下：</p>
<ol>
<li>PERSISTENT为持久节点，持久节点是指在节点创建后，就一直存在，直到有删除操作来主动清除这个节点——不会因为创建该节点的客户端会话失效而消失。<br>ZooKeeper命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create /zk myData</div></pre></td></tr></table></figure>
<ol>
<li>PERSISTENT_SEQUENTIAL为持久顺序节点，基本特性与持久节点一致，但每个父节点会为他的第一级子节点维护一份时序，会记录每个子节点创建的先后顺序。命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create -s /han/ data</div></pre></td></tr></table></figure>
<p>用这条命令的话，需要先创建/han节点，节点类型为PERSISTENT。</p>
<ol>
<li>EPHEMERAL为临时节点，客户端会话失效或连接关闭后，该节点会被自动删除，且不能在临时节点下面创建子节点，命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create -e /han</div></pre></td></tr></table></figure>
<p>如果在临时节点下面还要创建子节点，那么zk就会提示：Ephemerals cannot have children</p>
<ol>
<li>EPHEMERAL_SEQUENTIAL为临时顺序节点，该节点的除了不是持久性节点，其他特性与持久顺序节点一致。命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create -s -e /han/ data</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="不利用EPHEMERAL-SEQUENTIA简单实现"><a href="#不利用EPHEMERAL-SEQUENTIA简单实现" class="headerlink" title="不利用EPHEMERAL_SEQUENTIA简单实现"></a>不利用EPHEMERAL_SEQUENTIA简单实现</h2><p>首先我们需要一个业务,这里模拟一下订单生成，利用时间加上序号来表示，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pers.mingshan.ZookeeperLock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 订单号生成器</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCodeGenerator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy-MM-dd HH:mm:ss - "</span>);</div><div class="line">        Date date = <span class="keyword">new</span> Date();</div><div class="line">        sdf.format(date);</div><div class="line">        <span class="keyword">return</span> sdf.format(date) + ++i;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是简单模拟一下，不考虑其他因素。<br>然后我们需要对外提供获取订单号的服务，这里我们用到了CountDownLatch, CountDownLatch是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。所以我们需要所有的线程都创建完毕后去同时生成订单编号，模拟一下并发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pers.mingshan.ZookeeperLock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OrderCodeGenerator generator = <span class="keyword">new</span> OrderCodeGenerator();</div><div class="line">    <span class="comment">// 同时并发的线程数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(getClass());</div><div class="line">    <span class="comment">// 根据线程数初始化倒计数器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(NUM);</div><div class="line">    <span class="comment">// lock锁</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ZookeeperDistributeLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrderCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        String orderCode = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            orderCode = generator.getOrderCode();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        logger.info((Thread.currentThread().getName() + <span class="string">": 成功获取锁 =====&gt; "</span> + orderCode));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 等待其他线程初始化</span></div><div class="line">            cdl.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createOrderCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        OrderServiceImpl service = <span class="keyword">new</span> OrderServiceImpl();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(service).start();</div><div class="line">            <span class="comment">// 每初始化一个线程， 计数器减一</span></div><div class="line">            cdl.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个类中，我们实例化了ZookeeperDistributeLock，然后我们对获取订单编号的方法进行加锁操作，在finally语句块中执行释放锁操作。</p>
<p>下面来看ZookeeperDistributeLock，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pers.mingshan.ZookeeperLock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</div><div class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</div><div class="line"><span class="keyword">import</span> org.I0Itec.zkclient.exception.ZkNodeExistsException;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 利用Zookeeper节点名称的唯一性进行加锁和释放锁操作。</div><div class="line"> * 利用znode名称唯一性进行加锁，所有客户端去竞争加锁，但只有一个会加锁</div><div class="line"> * 成功，其他客户端需要等待加锁成功的客户端去释放锁，释放锁操作则是删除该节点，</div><div class="line"> * 同时通知所有watch这个节点的客户端，其他的客户端再竞争加锁。</div><div class="line"> * 由于释放锁会通知所有watch该节点的客户端，所以会出现羊群效应，</div><div class="line"> * 造成资源浪费。</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperDistributeLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(ZookeeperDistributeLock.class);</div><div class="line">    <span class="comment">// Zookeeper IP和端口</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_IP_PORT = <span class="string">"localhost:2181"</span>;</div><div class="line">    <span class="comment">// Node 的名称</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_NODE = <span class="string">"/lockS"</span>;</div><div class="line">    <span class="comment">// 创建 Zookeeper 的客户端</span></div><div class="line">    <span class="keyword">private</span> ZkClient zkClient = <span class="keyword">new</span> ZkClient(ZK_IP_PORT);</div><div class="line"></div><div class="line">    <span class="comment">// 减数器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch cdl = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 阻塞式加锁</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 先尝试加锁，加锁成功后就直接返回</span></div><div class="line">        <span class="keyword">if</span> (tryLock()) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果不成功， 需要等待其他线程 释放锁</span></div><div class="line">        waitForLock();</div><div class="line">        <span class="comment">// 递归调用加锁</span></div><div class="line">        lock();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 等待其他线程释放锁</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitForLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 给节点加 监听器</span></div><div class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                logger.info(<span class="string">"----node delete event------"</span>);</div><div class="line">                <span class="keyword">if</span> (cdl != <span class="keyword">null</span>) &#123;</div><div class="line">                    cdl.countDown();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 执行订阅node节点的数据变化</span></div><div class="line">        zkClient.subscribeDataChanges(LOCK_NODE, listener);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (zkClient.exists(LOCK_NODE)) &#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">                cdl.await();</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 取消订阅node节点的数据变化</span></div><div class="line">        zkClient.unsubscribeDataChanges(LOCK_NODE, listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实现非阻塞式加锁</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            zkClient.createPersistent(LOCK_NODE);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (ZkNodeExistsException e) &#123;</div><div class="line">            logger.error(<span class="string">"加锁失败 -- reason -"</span> + e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解锁</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        zkClient.delete(LOCK_NODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 利用Zookeeper节点名称的唯一性进行加锁和释放锁操作。利用znode名称唯一性进行加锁，所有客户端去竞争加锁，但只有一个会加锁成功， 其他客户端需要等待加锁成功的客户端去释放锁，释放锁操作则是删除该节点，同时通知所有watch这个节点的客户端，其他的客户端再竞争加锁。由于释放锁会通知所有watch该节点的客户端，所以会出现羊群效应，造成资源浪费。</p>
<h2 id="利用EPHEMERAL-SEQUENTIA解决“羊群效应”"><a href="#利用EPHEMERAL-SEQUENTIA解决“羊群效应”" class="headerlink" title="利用EPHEMERAL_SEQUENTIA解决“羊群效应”"></a>利用EPHEMERAL_SEQUENTIA解决“羊群效应”</h2><p>实现逻辑：</p>
<p>首先创建一个持久节点</p>
<p>在trylock方法中先判断当前临时顺序节点是否存在，如果不存在，那么就创建一个临时顺序节点，临时顺序节点为持久节点的子节点</p>
<p>然后获取所有的临时顺序节点并进行排序，判断当前节点是否为最小节点</p>
<ul>
<li>如果当前结点为最小节点，说明当前可以加锁</li>
<li>如果当前临时节点并非最小，代表当前客户端没有获取锁，需要继续等待,此时获取比当前节点序号小的节点（比当前节点小的最大节点, 将此值赋给beforePath,例如： 当前节点是 /lock/000000003, 那么beforePath为 /lock/000000002，只有当beforePath获得锁并且释放锁后，当前客户端才能去获取锁,这样可以 避免羊群效应</li>
</ul>
<p>在lock方法中，首先会调用trylock进行尝试加锁，如果加锁失败，那么就要调用waitForLock方法，在该方法中，对当前临时顺序节点的前一个节点进行监听，此时只需给前面的节点的添加wathcher即可。</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pers.mingshan.ZookeeperLock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</div><div class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</div><div class="line"><span class="keyword">import</span> org.I0Itec.zkclient.serialize.SerializableSerializer;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperImproveDistributeLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ZookeeperImproveDistributeLock.class);</div><div class="line">    <span class="comment">// Zookeeper IP和端口</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_IP_PORT = <span class="string">"localhost:2181"</span>;</div><div class="line">    <span class="comment">// Node 的名称</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_ROOT_NODE = <span class="string">"/lock"</span>;</div><div class="line">    <span class="comment">// 创建 Zookee的客户端</span></div><div class="line">    <span class="keyword">private</span> ZkClient zkClient = <span class="keyword">new</span> ZkClient(ZK_IP_PORT, <span class="number">1000</span>, <span class="number">1000</span>, <span class="keyword">new</span> SerializableSelizer());</div><div class="line">    <span class="comment">// 当前创建的节点</span></div><div class="line">    <span class="keyword">private</span> String selfPath;</div><div class="line">    <span class="comment">// 当前节点的前一个节点</span></div><div class="line">    <span class="keyword">private</span> String beforePath;</div><div class="line">    <span class="comment">// 节点默认值</span></div><div class="line">    <span class="keyword">private</span> String data = <span class="string">"data"</span>;</div><div class="line">    <span class="comment">// 减数器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch cdl = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZookeeperImproveDistributeLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 先创建一个主节点，以便其他线程在此节点之下创建临时顺序节点</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.zkClient.exists(LOCK_ROOT_NODE)) &#123;</div><div class="line">            <span class="keyword">this</span>.zkClient.createPersistent(LOCK_ROOT_NODE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 先尝试加锁，加锁成功后就直接返回</span></div><div class="line">        <span class="keyword">if</span> (!tryLock()) &#123;</div><div class="line">            waitForLock();</div><div class="line">            lock();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            logger.info(Thread.currentThread().getName() + <span class="string">"---获取锁"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitForLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 给节点加 监听器</span></div><div class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                logger.info(<span class="string">"----before node delete event------"</span>);</div><div class="line">                <span class="keyword">if</span> (cdl != <span class="keyword">null</span>) &#123;</div><div class="line">                    cdl.countDown();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// 此时只需给前面的节点的添加wathcher即可</span></div><div class="line">        zkClient.subscribeDataChanges(<span class="keyword">this</span>.beforePath, listener);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (zkClient.exists(<span class="keyword">this</span>.beforePath)) &#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">                cdl.await();</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 取消订阅前面的节点的变化</span></div><div class="line">        zkClient.unsubscribeDataChanges(<span class="keyword">this</span>.beforePath, listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断当前节点是否存在</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.selfPath == <span class="keyword">null</span> || <span class="keyword">this</span>.selfPath.length() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 在当前节点下创建临时顺序节点，例如0000000034,</span></div><div class="line">            <span class="comment">// 生成的节点应为 /lock/0000000034</span></div><div class="line">            <span class="keyword">this</span>.selfPath = <span class="keyword">this</span>.zkClient.createEphemeralSequential(LOCK_ROOT_NODE + <span class="string">"/"</span>, data);</div><div class="line">            logger.info(<span class="string">"当前节点为 ————&gt; "</span> + <span class="keyword">this</span>.selfPath);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 获取所有的临时顺序节点，并进行排序</span></div><div class="line">        List&lt;String&gt; allESNodes = zkClient.getChildren(LOCK_ROOT_NODE);</div><div class="line">        Collections.sort(allESNodes);</div><div class="line">        logger.info(<span class="string">"0  ————&gt; "</span>+ allESNodes.get(<span class="number">0</span>));</div><div class="line">        <span class="comment">// 判断当前节点是否为最小节点</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.selfPath.equals(LOCK_ROOT_NODE + <span class="string">"/"</span> + allESNodes.get(<span class="number">0</span>))) &#123;</div><div class="line">            <span class="comment">// 如果当前结点为最小节点，说明当前可以加锁</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果当前临时节点并非最小，代表当前客户端没有获取锁，需要继续等待,</span></div><div class="line">            <span class="comment">// 此时获取比当前节点序号小的节点（比当前节点小的最大节点, 将此值赋给beforePath</span></div><div class="line">            <span class="comment">// 例如： 当前节点是 /lock/000000003, 那么beforePath为 /lock/000000002，</span></div><div class="line">            <span class="comment">// 只有当beforePath获得锁并且释放锁后，当前客户端才能去获取锁</span></div><div class="line">            <span class="comment">// 这样可以 避免羊群效应</span></div><div class="line">            <span class="keyword">int</span> wz = Collections.binarySearch(allESNodes, <span class="keyword">this</span>.selfPath.substring(<span class="number">6</span>));</div><div class="line">            <span class="keyword">this</span>.beforePath = LOCK_ROOT_NODE + <span class="string">"/"</span> + allESNodes.get(wz - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 删除当前节点，释放锁</span></div><div class="line">        zkClient.delete(<span class="keyword">this</span>.selfPath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码还有其他实现方式，代码如下（网上的）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pers.mingshan.ZookeeperLock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperOptimizedDistributedLock</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threadId;</div><div class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> String selfPath;</div><div class="line">    <span class="keyword">private</span> String waitPath;</div><div class="line">    <span class="keyword">private</span> String LOG_PREFIX_OF_THREAD;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">10000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_PATH = <span class="string">"/disLocks"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB_PATH = <span class="string">"/disLocks/sub"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECTION_STRING = <span class="string">"localhost:2181"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_NUM = <span class="number">10</span>;</div><div class="line">    <span class="comment">//确保连接zk成功</span></div><div class="line">    <span class="keyword">private</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">    <span class="comment">//确保所有线程运行结束</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch threadSemaphore = <span class="keyword">new</span> CountDownLatch(THREAD_NUM);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ZookeeperOptimizedDistributedLock.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZookeeperOptimizedDistributedLock</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.threadId = id;</div><div class="line">        LOG_PREFIX_OF_THREAD = <span class="string">"【第"</span>+threadId+<span class="string">"个线程】"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUM; i++) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadId = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">new</span> Thread() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ZookeeperOptimizedDistributedLock dc = <span class="keyword">new</span> ZookeeperOptimizedDistributedLock(threadId);</div><div class="line">                        dc.createConnection(CONNECTION_STRING, SESSION_TIMEOUT);</div><div class="line">                        <span class="comment">//GROUP_PATH不存在的话，由一个线程创建即可；</span></div><div class="line">                        <span class="keyword">synchronized</span> (threadSemaphore)&#123;</div><div class="line">                            dc.createPath(GROUP_PATH, <span class="string">"该节点由线程"</span> + threadId + <span class="string">"创建"</span>, <span class="keyword">true</span>);</div><div class="line">                        &#125;</div><div class="line">                        dc.getLock();</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        LOG.error(<span class="string">"【第"</span>+threadId+<span class="string">"个线程】 抛出的异常："</span>);</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            threadSemaphore.await();</div><div class="line">            LOG.info(<span class="string">"所有线程运行结束!"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取锁</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class="line">        selfPath = zk.create(SUB_PATH, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class="line">        LOG.info(LOG_PREFIX_OF_THREAD+<span class="string">"创建锁路径:"</span>+selfPath);</div><div class="line">        <span class="keyword">if</span>(checkMinPath())&#123;</div><div class="line">            getLockSuccess();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建节点</div><div class="line">     * <span class="doctag">@param</span> path 节点path</div><div class="line">     * <span class="doctag">@param</span> data 初始数据内容</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createPath</span><span class="params">( String path, String data, <span class="keyword">boolean</span> needWatch)</span></span></div><div class="line">                <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</div><div class="line">        <span class="keyword">if</span>(zk.exists(path, needWatch)==<span class="keyword">null</span>)&#123;</div><div class="line">            LOG.info( LOG_PREFIX_OF_THREAD + <span class="string">"节点创建成功, Path: "</span></div><div class="line">                    + <span class="keyword">this</span>.zk.create( path,</div><div class="line">                    data.getBytes(),</div><div class="line">                    ZooDefs.Ids.OPEN_ACL_UNSAFE,</div><div class="line">                    CreateMode.PERSISTENT )</div><div class="line">                    + <span class="string">", content: "</span> + data );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建ZK连接</div><div class="line">     * <span class="doctag">@param</span> connectString  ZK服务器地址列表</div><div class="line">     * <span class="doctag">@param</span> sessionTimeout Session超时时间</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createConnection</span><span class="params">( String connectString, <span class="keyword">int</span> sessionTimeout )</span></span></div><div class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">            zk = <span class="keyword">new</span> ZooKeeper( connectString, sessionTimeout, <span class="keyword">this</span>);</div><div class="line">            connectedSemaphore.await();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取锁成功</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLockSuccess</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (zk.exists(<span class="keyword">this</span>.selfPath,<span class="keyword">false</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">            LOG.error(LOG_PREFIX_OF_THREAD+<span class="string">"本节点已不在了..."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LOG.info(LOG_PREFIX_OF_THREAD + <span class="string">"获取锁成功，赶紧干活！"</span>);</div><div class="line">        Thread.sleep(<span class="number">2000</span>);</div><div class="line">        LOG.info(LOG_PREFIX_OF_THREAD + <span class="string">"删除本节点："</span>+selfPath);</div><div class="line">        zk.delete(<span class="keyword">this</span>.selfPath, -<span class="number">1</span>);</div><div class="line">        releaseConnection();</div><div class="line">        threadSemaphore.countDown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 关闭ZK连接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">this</span>.zk !=<span class="keyword">null</span> ) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.zk.close();</div><div class="line">            &#125; <span class="keyword">catch</span> ( InterruptedException e ) &#123;&#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LOG.info(LOG_PREFIX_OF_THREAD + <span class="string">"释放连接"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查自己是不是最小的节点</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkMinPath</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class="line">         List&lt;String&gt; subNodes = zk.getChildren(GROUP_PATH, <span class="keyword">false</span>);</div><div class="line">         Collections.sort(subNodes);</div><div class="line">         <span class="keyword">int</span> index = subNodes.indexOf( selfPath.substring(GROUP_PATH.length() + <span class="number">1</span>));</div><div class="line">         <span class="keyword">switch</span> (index)&#123;</div><div class="line">             <span class="keyword">case</span> -<span class="number">1</span>:&#123;</div><div class="line">                 LOG.error(LOG_PREFIX_OF_THREAD+<span class="string">"本节点已不在了..."</span>+selfPath);</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">case</span> <span class="number">0</span>:&#123;</div><div class="line">                 LOG.info(LOG_PREFIX_OF_THREAD+<span class="string">"子节点中，我果然是老大"</span>+selfPath);</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">default</span>:&#123;</div><div class="line">                 <span class="keyword">this</span>.waitPath = GROUP_PATH +<span class="string">"/"</span>+ subNodes.get(index - <span class="number">1</span>);</div><div class="line">                 LOG.info(LOG_PREFIX_OF_THREAD+<span class="string">"获取子节点中，排在我前面的"</span>+waitPath);</div><div class="line">                 <span class="keyword">try</span>&#123;</div><div class="line">                     zk.getData(waitPath, <span class="keyword">true</span>, <span class="keyword">new</span> Stat());</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                 &#125;<span class="keyword">catch</span>(KeeperException e)&#123;</div><div class="line">                     <span class="keyword">if</span>(zk.exists(waitPath,<span class="keyword">false</span>) == <span class="keyword">null</span>)&#123;</div><div class="line">                         LOG.info(LOG_PREFIX_OF_THREAD+<span class="string">"子节点中，排在我前面的"</span>+waitPath+<span class="string">"已失踪，幸福来得太突然?"</span>);</div><div class="line">                         <span class="keyword">return</span> checkMinPath();</div><div class="line">                     &#125;<span class="keyword">else</span>&#123;</div><div class="line">                         <span class="keyword">throw</span> e;</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Event.KeeperState keeperState = event.getState();</div><div class="line">        Event.EventType eventType = event.getType();</div><div class="line">        <span class="keyword">if</span> ( Event.KeeperState.SyncConnected == keeperState) &#123;</div><div class="line">            <span class="keyword">if</span> ( Event.EventType.None == eventType ) &#123;</div><div class="line">                LOG.info( LOG_PREFIX_OF_THREAD + <span class="string">"成功连接上ZK服务器"</span> );</div><div class="line">                connectedSemaphore.countDown();</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == Event.EventType.NodeDeleted &amp;&amp; event.getPath().equals(waitPath)) &#123;</div><div class="line">                LOG.info(LOG_PREFIX_OF_THREAD + <span class="string">"收到情报，排我前面的家伙已挂，我是不是可以出山了？"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span>(checkMinPath())&#123;</div><div class="line">                        getLockSuccess();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( Event.KeeperState.Disconnected == keeperState ) &#123;</div><div class="line">            LOG.info( LOG_PREFIX_OF_THREAD + <span class="string">"与ZK服务器断开连接"</span> );</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( Event.KeeperState.AuthFailed == keeperState ) &#123;</div><div class="line">            LOG.info( LOG_PREFIX_OF_THREAD + <span class="string">"权限检查失败"</span> );</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( Event.KeeperState.Expired == keeperState ) &#123;</div><div class="line">            LOG.info( LOG_PREFIX_OF_THREAD + <span class="string">"会话失效"</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/desilting/article/details/41280869" target="_blank" rel="external">http://blog.csdn.net/desilting/article/details/41280869</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式锁可以基于以下几种方式实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于数据库的乐观锁，用于分布式锁&lt;/li&gt;
&lt;li&gt;基于缓存(Redis, memcached)实现分布式锁&lt;/li&gt;
&lt;li&gt;基于ZooKeeper实现分布式锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这篇文章中，主要讲讲ZooKeeper以及分布式锁的实现，通过了解基于ZooKeeper分布式锁实现的原理，我们会对ZooKeeper有一个基本的了解。&lt;/p&gt;
&lt;h2 id=&quot;ZooKeeper介绍&quot;&gt;&lt;a href=&quot;#ZooKeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;ZooKeeper介绍&quot;&gt;&lt;/a&gt;ZooKeeper介绍&lt;/h2&gt;&lt;p&gt;首先谈谈ZooKeeper，ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务，它提供了一项基本服务：分布式锁服务。由于ZooKeeper的开源特性，后来我们的开发者在分布式锁的基础上，摸索了出了其他的使用方法：配置维护、组服务、分布式消息队列、分布式通知/协调等。&lt;/p&gt;
&lt;p&gt;在ZooKeeper中，有一个被称为ZNode的节点，在该节点可以存储同步相关的数据，并且多个ZNode节点可以形成类似下图的结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image170-c.poco.cn/mypoco/myphoto/20171025/20/18803584920171025205248033_165.jpg?564x491_120&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本命令：&quot;&gt;&lt;a href=&quot;#基本命令：&quot; class=&quot;headerlink&quot; title=&quot;基本命令：&quot;&gt;&lt;/a&gt;基本命令：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1. 查看节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ls /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. 创建节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    create /zk myData&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3. 查看节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    get /zk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4. 设置节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    set /zk myData2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5. 删除节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    delete /zk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6. 创建临时节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    create -e /han data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7. 创建顺序节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    create -s /han/ data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8. 创建顺序临时节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    create -s -e /han/ data&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ZNode&quot;&gt;&lt;a href=&quot;#ZNode&quot; class=&quot;headerlink&quot; title=&quot;ZNode&quot;&gt;&lt;/a&gt;ZNode&lt;/h3&gt;&lt;p&gt;客户端可以在一个ZNode上设置一个监视器（Watch），如果该ZNode数据发生变更，ZooKeeper会通知客户端，从而触发监视器中实现的逻辑的执行。其中ZNode有以下几种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PERSISTENT&lt;/li&gt;
&lt;li&gt;PERSISTENT_SEQUENTIAL&lt;/li&gt;
&lt;li&gt;EPHEMERAL&lt;/li&gt;
&lt;li&gt;EPHEMERAL_SEQUENTIAL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面分别解释一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PERSISTENT为持久节点，持久节点是指在节点创建后，就一直存在，直到有删除操作来主动清除这个节点——不会因为创建该节点的客户端会话失效而消失。&lt;br&gt;ZooKeeper命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;create /zk myData&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;PERSISTENT_SEQUENTIAL为持久顺序节点，基本特性与持久节点一致，但每个父节点会为他的第一级子节点维护一份时序，会记录每个子节点创建的先后顺序。命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;create -s /han/ data&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用这条命令的话，需要先创建/han节点，节点类型为PERSISTENT。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;EPHEMERAL为临时节点，客户端会话失效或连接关闭后，该节点会被自动删除，且不能在临时节点下面创建子节点，命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;create -e /han&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在临时节点下面还要创建子节点，那么zk就会提示：Ephemerals cannot have children&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;EPHEMERAL_SEQUENTIAL为临时顺序节点，该节点的除了不是持久性节点，其他特性与持久顺序节点一致。命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;create -s -e /han/ data&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
      <category term="分布式锁" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock源码笔记 - 释放锁（JDK 1.8）</title>
    <link href="http://yoursite.com/2017/09/25/ReentrantLock%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%20-%20%E9%87%8A%E6%94%BE%E9%94%81/"/>
    <id>http://yoursite.com/2017/09/25/ReentrantLock源码笔记 - 释放锁/</id>
    <published>2017-09-25T12:51:43.892Z</published>
    <updated>2017-09-25T13:05:35.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReentrantLock源码学习-释放锁（unlock）"><a href="#ReentrantLock源码学习-释放锁（unlock）" class="headerlink" title="ReentrantLock源码学习 - 释放锁（unlock）"></a>ReentrantLock源码学习 - 释放锁（unlock）</h2><hr>
<p>上次谈到了利用ReentrantLock的非公平和公平加锁方式，那么接下来看看释放锁的流程</p>
<p>首先调用ReentrantLock的unlock方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.release(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后会调用AbstractQueuedSynchronizer（AQS）的release方法，在这个方法中首先会调用ReentrantLock的Sync的tryRelease方法，来进行尝试释放锁，如果返回true，那么获取CLH队列的头结点，判断头结点不为空并且头结点的状态不为0（None），那么就调用AQS的unparkSuccessor方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">        Node h = head;</div><div class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">            unparkSuccessor(h);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在tryRelease方法里，首先让当前的state与传入的值（这里为1）进行相减，然后得到c，判断当前线程是不是获取独占锁的线程，如果不是，直接抛出异常；如果是，那么需要判断c是否为0，因为只有c为0时，才符合释放独占锁的条件，这是设置独占锁线程为null，最后设置下state的值（注意这里c为0不为0都会设置）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c = getState() - releases;</div><div class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        free = <span class="keyword">true</span>;</div><div class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    setState(c);</div><div class="line">    <span class="keyword">return</span> free;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来来看方法unparkSuccessor，该方法的作用就是为了释放node节点的后继结点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If status is negative (i.e., possibly needing signal) try</div><div class="line">     * to clear in anticipation of signalling.  It is OK if this</div><div class="line">     * fails or if status is changed by waiting thread.</div><div class="line">     */</div><div class="line">     <span class="comment">// 获取节点的状态</span></div><div class="line">    <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>); <span class="comment">// 利用CAS 将状态设置为0</span></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Thread to unpark is held in successor, which is normally</div><div class="line">     * just the next node.  But if cancelled or apparently null,</div><div class="line">     * traverse backwards from tail to find the actual</div><div class="line">     * non-cancelled successor.</div><div class="line">     */</div><div class="line">    <span class="comment">// 获取节点的后继节点</span></div><div class="line">    Node s = node.next;</div><div class="line">    <span class="comment">// 判断后继节点是否为空 或者 后者后继节点的状态为CANCELLED</span></div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">        s = <span class="keyword">null</span>; <span class="comment">// 将后继节点置为null</span></div><div class="line">        <span class="comment">// 从尾节点从后向前开始遍历知道节点为空或者当前节点为止</span></div><div class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>) <span class="comment">// 如果此时节点的状态小于等于0</span></div><div class="line">                s = t; <span class="comment">// 将此节点赋给传入节点的后继节点</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)  <span class="comment">// 节点不为空，释放</span></div><div class="line">        LockSupport.unpark(s.thread);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://blog.csdn.net/luonanqin/article/details/41871909" target="_blank" rel="external">http://blog.csdn.net/luonanqin/article/details/41871909</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ReentrantLock源码学习-释放锁（unlock）&quot;&gt;&lt;a href=&quot;#ReentrantLock源码学习-释放锁（unlock）&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock源码学习 - 释放锁（unlock）&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Lock" scheme="http://yoursite.com/tags/Lock/"/>
    
      <category term="JUC" scheme="http://yoursite.com/tags/JUC/"/>
    
      <category term="ReentrantLock" scheme="http://yoursite.com/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock源码笔记 - 获取锁（JDK 1.8）</title>
    <link href="http://yoursite.com/2017/09/20/ReentrantLock%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%20-%20%E8%8E%B7%E5%8F%96%E9%94%81/"/>
    <id>http://yoursite.com/2017/09/20/ReentrantLock源码笔记 - 获取锁/</id>
    <published>2017-09-20T14:56:57.951Z</published>
    <updated>2017-09-25T13:13:51.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReentrantLock-学习-获取锁（JDK-1-8）"><a href="#ReentrantLock-学习-获取锁（JDK-1-8）" class="headerlink" title="ReentrantLock 学习 - 获取锁（JDK 1.8）"></a>ReentrantLock 学习 - 获取锁（JDK 1.8）</h2><hr>
<p>ReentrantLock 提供非公平锁与公平锁两种加锁方式, 默认加锁方式为非公平锁。</p>
<h3 id="ReentrantLock类的结构为："><a href="#ReentrantLock类的结构为：" class="headerlink" title="ReentrantLock类的结构为："></a>ReentrantLock类的结构为：<br></h3><p><img src="https://syy.freep.cn/590836/ReentrantLock.png" alt="image"></p>
<p>从图中可以看出，ReentrantLock类包含三个静态内部类：</p>
<ul>
<li>Sync</li>
<li>NonfairSync</li>
<li>FairSync</li>
</ul>
<p>其中Sync类继承AbstractQueuedSynchronize（AQS), NonfairSync和FairSync继承Sync。</p>
<h3 id="ReentrantLock的基本用法："><a href="#ReentrantLock的基本用法：" class="headerlink" title="ReentrantLock的基本用法："></a>ReentrantLock的基本用法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</div><div class="line">      lock.lock();  <span class="comment">// block until condition holds</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// ... method body</span></div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="ReentrantLock的创建"><a href="#ReentrantLock的创建" class="headerlink" title="ReentrantLock的创建"></a>ReentrantLock的创建</h3><ul>
<li>非公平锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</div></pre></td></tr></table></figure>
<ul>
<li>公平锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>由于默认创建的为非公平锁，所以想创建公平锁，就需要向其构造方法传入true。</p>
<ol>
<li>创建非公平锁的构造方法为：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125;.</div><div class="line"> * This is equivalent to using &#123;<span class="doctag">@code</span> ReentrantLock(false)&#125;.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync = <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>创建公平锁的构造方法为：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据传入的布尔值来判断创建哪种锁</div><div class="line"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</div><div class="line"> * given fairness policy.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h3><h4 id="非公平锁的用法"><a href="#非公平锁的用法" class="headerlink" title="非公平锁的用法"></a>非公平锁的用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lock.lock();</div></pre></td></tr></table></figure>
<p>在ReetrantLock类的内部提供了一个加锁的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.lock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法里又调用了==sync==的==lock==方法，又因为Sync这个类为一个抽象类，在ReentrantLock类实例化的时候，根据参数来判断调用哪个具体的类。</p>
<p>这里先谈谈非公平锁的加锁实现。</p>
<h4 id="非公平锁实现简单步骤："><a href="#非公平锁实现简单步骤：" class="headerlink" title="非公平锁实现简单步骤："></a><strong>非公平锁实现简单步骤</strong>：</h4><p> 基予CAS(Compare And Swap)将state由0设置为1。<br></p>
<ul>
<li>如果设置成功，那么直接获得锁，并设置独占锁的线程为当前线程。<br></li>
<li>如果设置失败，原先内存state的值不是0，已经有其他线程获得锁，那么就会再获取一次state。<br><ol>
<li>如果state为0， 那么就会再次利用CAS将state的值由0设置为1，如果成功，设置独占锁的线程为当前线。<br></li>
<li>如果state不为0，那么需要判断当前线程是否是独占锁的线程，如果是，那么就将state加1， 并且判断当前state的值不能小于0；如果不是，那么就将该线程封装在一个Node(AQS里面)里,并加入到等待列队里，等其他线程唤醒。</li>
</ol>
</li>
</ul>
<h4 id="具体流程如下："><a href="#具体流程如下：" class="headerlink" title="具体流程如下："></a>具体流程如下：</h4><p>首先通过ReentrantLock的lock方法调用到其内部类NonFairLock的lock方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">        setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">    <span class="keyword">else</span></div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在lock方法中，先调用compareAndSetState方法来将state由0设置为1，如果设置成功，设置当前线程为独占锁线程，如果失败，则调用AbstractQueuedSynchronizer类的acquire(1)方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">        selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>向aquire方法传入参数1，此方法是线程获取临界资源的顶层入口， 如果获得到资源则直接返回，如果失败，则将当前先后才能放入到等待列队，直到获取到资源才返回。此过程忽略中断影响，模式为独占模式。</p>
<p>因为这个方法涉及到线程的入队操作，下面来看看AbstractQueuedSynchronizer类内部封装的Node.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 同步等待队列（双向链表）节点</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</div><div class="line">    <span class="comment">// 一个标记：用于表明该节点在独占模式下进行等待</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 线程被取消了</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</div><div class="line">    <span class="comment">// 节点等待触发</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</div><div class="line">    <span class="comment">// 节点等待条件</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</div><div class="line">    <span class="comment">// 节点状态需要向后传播</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</div><div class="line"></div><div class="line">    <span class="comment">// 前驱节点</span></div><div class="line">    <span class="keyword">volatile</span> Node prev;</div><div class="line"></div><div class="line">    <span class="comment">// 后继节点</span></div><div class="line">    <span class="keyword">volatile</span> Node next;</div><div class="line"></div><div class="line">    <span class="comment">// 线程</span></div><div class="line">    <span class="keyword">volatile</span> Thread thread;</div><div class="line"></div><div class="line"></div><div class="line">    Node nextWaiter;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</div><div class="line">        Node p = prev;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></div><div class="line">        <span class="keyword">this</span>.nextWaiter = mode;</div><div class="line">        <span class="keyword">this</span>.thread = thread;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></div><div class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</div><div class="line">        <span class="keyword">this</span>.thread = thread;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>tryAcquire方法会调用ReentrantLock中NonfairSync内部类中的tryAcquire方法<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后调用nonfairTryAcquire方法进行再一次尝试获取锁</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="comment">// 当前线程</span></div><div class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">    <span class="comment">// 再一次获取state</span></div><div class="line">    <span class="keyword">int</span> c = getState();</div><div class="line">    <span class="comment">// 如果state为0，说明其他线程已经释放了锁，可以尝试获取锁</span></div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 利用CAS来设置当前state的值</span></div><div class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">            <span class="comment">// 如果成功则设置当前线程为独占锁线程，然后直接返回</span></div><div class="line">            setExclusiveOwnerThread(current);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="comment">// 如果当前state不是0，则判断当前线程是否为独占锁线程</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">        <span class="comment">// 将state进行+1操作，判断state值后返回</span></div><div class="line">        <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 获取锁失败，考虑将线程加入等待队列</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在nonfairTryAcquire方法为再一次尝试获取锁，这个过程可能获取锁的线程已经释放了锁，所以再一次判断state的值，如果state的值为0，那么利用CAS将state由0设值为1，如果成功，获取锁成功，设值当前线程为独占锁线程，直接返回；如果state不为0，则判断当前线程是否为独占锁线程（可重入锁来源，state每加一次1，那么就需要释放锁的次数也要+1，这样才能保证state最终在线程释放锁的情况下值为0），如果是，将state加1，然后返回；其他情况返回false，获取锁失败。</p>
<p>如果当前线程获取锁失败，就需要将该线程加入等待队列的末尾。<br>该等待列队是CLH队列，队列的示意图如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">     +------+  prev +-----+       +-----+</div><div class="line">head |      | &lt;---- |     | &lt;---- |     |  tail</div><div class="line">     +------+       +-----+       +-----+</div></pre></td></tr></table></figure>
<p>接下来就会调用AQS的addWaiter(Node.EXCLUSIVE)方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">    <span class="comment">// 根据当前线程创建一个Node节点，并设置为独占模式</span></div><div class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">    <span class="comment">// 试图进行快速入队操作，仅尝试一次</span></div><div class="line">    <span class="comment">// 将队列的尾节点tail赋给pred</span></div><div class="line">    Node pred = tail;</div><div class="line">    <span class="comment">// 判断尾节点是否为空</span></div><div class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 将尾节点作为创造出来的节点的前驱节点，即将创造出来的节点</span></div><div class="line">        <span class="comment">// 链接到为尾节点后</span></div><div class="line">        node.prev = pred;</div><div class="line">        <span class="comment">// 利用CAS将尾节点tail由pred设置为node</span></div><div class="line">        <span class="comment">// 此时队列 node1 &lt;-&gt; node</span></div><div class="line">        <span class="comment">// 再加上 node1 &lt;-&gt; prev</span></div><div class="line">        <span class="comment">// 所以此时队列应为  node1 &lt;-&gt; prev &lt;-&gt; node</span></div><div class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">            <span class="comment">// 如果成功，则将pred的后继节点为node</span></div><div class="line">            pred.next = node;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    enq(node); <span class="comment">// 正常入队</span></div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的实现流程已在代码中注释，如果不是快速入队，那么就进行正常入队，即调用AQS的enq(node)方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">// 等待，直到插入到队列位置</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="comment">// 将尾节点tail赋给t</span></div><div class="line">        Node t = tail;</div><div class="line">        <span class="comment">// 判断尾节点是否为空，如果尾节点为空，说明队列为空</span></div><div class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></div><div class="line">            <span class="comment">// 生成一个新节点，将head由null设置为新节点的值</span></div><div class="line">            <span class="comment">// 如果设置失败，说明在这个过程中已经有其他线程设置过head了</span></div><div class="line">            <span class="comment">// 当成功的将这个dummy节点设置到head节点上去时，我们又将这个head节点// 设置给了tail节点，即head与tail都是当前这个dummy节点，</span></div><div class="line">            <span class="comment">// 之后有新节点入队的话，就插入到该dummy之后</span></div><div class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">                tail = head;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果尾节点不为空，则按照快速入队操作进行操作</span></div><div class="line">            node.prev = t;</div><div class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123; <span class="comment">// 尝试将尾节点设置为node</span></div><div class="line">                t.next = node; <span class="comment">// 将node节点设置为尾节点,即将尾节点的后继节点设置为node节点</span></div><div class="line">                <span class="keyword">return</span> t;  <span class="comment">// 返回原先的尾节点</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>入队成功之后需要调用AQS的acquireQueued(addWaiter(Node.EXCLUSIVE), arg))方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 队列中的结点在独占且忽略中断的模式下获取锁</div><div class="line">  * 如果获取成功则返回false</div><div class="line">  * 如果获取失败</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>; <span class="comment">// 失败标志</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>; <span class="comment">//中断标志</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123; <span class="comment">// 无限等待</span></div><div class="line">            <span class="keyword">final</span> Node p = node.predecessor(); <span class="comment">// 获取插入节点的前一个节点p</span></div><div class="line">            <span class="comment">// 仅当当前的节点的前驱节点并且</span></div><div class="line">            <span class="comment">// 尝试获取锁成功，跳出循环</span></div><div class="line">            <span class="comment">// 当第一次循环就获取成功了，interrupted为false，不需要中断</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                setHead(node); <span class="comment">// 设置头结点</span></div><div class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                failed = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> interrupted;</div><div class="line">            &#125; <span class="comment">// 当获取(锁)失败后，检查并且更新结点状态, 挂起当前节点并检查中断</span></div><div class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                parkAndCheckInterrupt())</div><div class="line">                interrupted = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (failed)</div><div class="line">            cancelAcquire(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果acquireQueued方法没有跳出循环（获取锁失败），那么就要判断当前节点是否可以安全的挂起（park），下面就会调用AQS的shouldParkAfterFailedAcquire(Node pred, Node node) 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 当获取(资源)失败后，检查并且更新结点状态</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ws = pred.waitStatus; <span class="comment">// 获取前驱节点的状态</span></div><div class="line">     <span class="comment">// 当且仅当状态为SIGNAL时，表示当前节点在以后可以被唤醒，那么就可以进行挂起// （park）操作了</span></div><div class="line">     <span class="comment">// 此时 ws的值为-1</span></div><div class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * This node has already set status asking a release</div><div class="line">         * to signal it, so it can safely park.</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="comment">// ws大于零说明前驱节点的状态为CANCEL, 即为1</span></div><div class="line">    <span class="comment">// 即前驱节点的线程被取消了，需要将其从队列中除去，最终返回false</span></div><div class="line">    <span class="comment">// 不能被安全的挂起</span></div><div class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Predecessor was cancelled. Skip over predecessors and</div><div class="line">         * indicate retry.</div><div class="line">         */</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="comment">// 这句话node.prev = pred = pred.prev;</span></div><div class="line">            <span class="comment">// 相当于</span></div><div class="line">            <span class="comment">// pred = pred.prev;</span></div><div class="line">            <span class="comment">// node.prev = pred;</span></div><div class="line">            node.prev = pred = pred.prev;</div><div class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>); <span class="comment">// 找到pred结点前面最近的一个状态不为CANCELLED的结点</span></div><div class="line">        pred.next = node; <span class="comment">// 将该节点的后继节点设置为当前节点</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// waitStatus 为PROPAGATE -3 或者是0 表示无状态,(为CONDITION -2时，表示此节点在condition queue中)</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</div><div class="line">         * need a signal, but don't park yet.  Caller will need to</div><div class="line">         * retry to make sure it cannot acquire before parking.</div><div class="line">         */</div><div class="line">        <span class="comment">// 利用CAS来将当前节点的前驱节点的状态设置为SIGNAL</span></div><div class="line">        <span class="comment">// 如果设置成功的话，下次再来访问 状态就为SIGNAL了</span></div><div class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 如果ws不为SIGNAL, 其他情况全部返回false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该方法中需要判断当前节点的前驱节点的状态，如果状态为SIGNAL时，表示当前节点在以后可以被唤醒，那么就可以进行挂起了<br><br><strong>如果不是</strong></p>
<ul>
<li>那么就需要判断该前驱节点（线程）是否被取消了，如果被取消，那么这个前驱节点应该从队列中除去，再经过while循环找到pred结点前面最近的一个状态不为CANCELLED的结点，并将当前节点的前驱节点设置为该节点；</li>
<li>如果该前驱节点的waitStatus不为CANCELLED,那么利用CAS将当前节点的前驱节点的状态设置为SIGNAL</li>
</ul>
<p>接下来就会执行AQS 中的parkAndCheckInterrupt()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 进行挂起（park）操作并且返回该线程是否被中断</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">    LockSupport.park(<span class="keyword">this</span>); <span class="comment">//挂起当前线程</span></div><div class="line">    <span class="keyword">return</span> Thread.interrupted(); <span class="comment">// 如果当前线程已经被中断了，返回true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>parkAndCheckInterrupt方法首先执行挂起（park）操作，然后返回该线程是否已经被中断。</p>
<p>此时回到acquireQueued(final Node node, int arg)方法，看finally语句块中的cancelAcquire(node)方法，该方法在挂起失败后执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 取消继续获取锁</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">// Ignore if node doesn't exist</span></div><div class="line">    <span class="comment">// node为空，返回</span></div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// node节点内的线程置为空</span></div><div class="line">    node.thread = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Skip cancelled predecessors</span></div><div class="line">    <span class="comment">// 该节点的前驱节点</span></div><div class="line">    Node pred = node.prev;</div><div class="line">    <span class="comment">// 找到pred结点前面最近的一个状态不为CANCELLED的结点</span></div><div class="line">    <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)</div><div class="line">        node.prev = pred = pred.prev;</div><div class="line"></div><div class="line">    <span class="comment">// node结点为尾结点，则利用CAS设置尾结点为pred结点</span></div><div class="line">    <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</div><div class="line">        compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// node结点不为尾结点，或者CAS设置不成功</span></div><div class="line">        <span class="comment">// If successor needs signal, try to set pred's next-link</span></div><div class="line">        <span class="comment">// so it will get one. Otherwise wake it up to propagate.</span></div><div class="line">        <span class="keyword">int</span> ws;</div><div class="line">        <span class="comment">// （pred结点不为头结点，并且pred结点的状态为SIGNAL）或者</span></div><div class="line">        <span class="comment">//  ws小于0，并且比较并设置等待状态为SIGNAL成功，并且pred结点内的线程不为空</span></div><div class="line">        <span class="keyword">if</span> (pred != head &amp;&amp;</div><div class="line">            ((ws = pred.waitStatus) == Node.SIGNAL ||</div><div class="line">             (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</div><div class="line">            pred.thread != <span class="keyword">null</span>) &#123;</div><div class="line">            Node next = node.next; <span class="comment">// 获取节点的后继节点</span></div><div class="line">            <span class="comment">// 如果后继节点不为空 并且后继节点的等待状态小于等于0</span></div><div class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                compareAndSetNext(pred, predNext, next); <span class="comment">// 比较并设置pred.next = next;</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            unparkSuccessor(node); <span class="comment">// 释放节点的后继节点</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        node.next = node; <span class="comment">// help GC</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该方法中取消继续获取锁。</p>
<p>在该方法中会调用一个方法unparkSuccessor，该方法的作用就是为了释放node节点的后继结点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If status is negative (i.e., possibly needing signal) try</div><div class="line">     * to clear in anticipation of signalling.  It is OK if this</div><div class="line">     * fails or if status is changed by waiting thread.</div><div class="line">     */</div><div class="line">     <span class="comment">// 获取节点的状态</span></div><div class="line">    <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>); <span class="comment">// 利用CAS 将状态设置为0</span></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Thread to unpark is held in successor, which is normally</div><div class="line">     * just the next node.  But if cancelled or apparently null,</div><div class="line">     * traverse backwards from tail to find the actual</div><div class="line">     * non-cancelled successor.</div><div class="line">     */</div><div class="line">    <span class="comment">// 获取节点的后继节点</span></div><div class="line">    Node s = node.next;</div><div class="line">    <span class="comment">// 判断后继节点是否为空 或者 后者后继节点的状态为CANCELLED</span></div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">        s = <span class="keyword">null</span>; <span class="comment">// 将后继节点置为null</span></div><div class="line">        <span class="comment">// 从尾节点从后向前开始遍历知道节点为空或者当前节点为止</span></div><div class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>) <span class="comment">// 如果此时节点的状态小于等于0</span></div><div class="line">                s = t; <span class="comment">// 将此节点赋给传入节点的后继节点</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)  <span class="comment">// 节点不为空，释放</span></div><div class="line">        LockSupport.unpark(s.thread);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，ReentrantLock获取非公平锁的步骤就结束了。</p>
<h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>如果需要使用公平锁，那么在创建ReentrantLock实例的时候需要向其构造函数传入布尔值true，然后在构造方法里利用三元运算创建公平锁的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="公平锁的用法"><a href="#公平锁的用法" class="headerlink" title="公平锁的用法"></a>公平锁的用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lock.lock();</div></pre></td></tr></table></figure>
<h4 id="公平锁加锁的简单步骤："><a href="#公平锁加锁的简单步骤：" class="headerlink" title="公平锁加锁的简单步骤："></a>公平锁加锁的简单步骤：</h4><p>获取一次state的值</p>
<ul>
<li>如果state为0，查看CLH队列中是否还有其他线程在等待获取锁，如果有，则获取锁失败；如果没有，则利用CAS将state的值由0设置为1，如果成功，设置独占锁的线程为当前线。</li>
<li>如果state不为0或者CLH队列中还有其他线程在等待获取锁，查看当前线程是不是已经是独占锁的线程了，如果是，则将当前的锁数量+1；如果不是，则将该线程封装在一个Node内，并加入到等待队列中去。等待被其前一个线程节点唤醒。</li>
</ul>
<p>此过程严格遵守“先到先得”策略。</p>
<h4 id="公平锁与非公平锁的重要区别是："><a href="#公平锁与非公平锁的重要区别是：" class="headerlink" title="公平锁与非公平锁的重要区别是："></a>公平锁与非公平锁的重要区别是：</h4><p>非公平锁在要获取锁的时候，首先会尝试直接获取锁，而公平锁则需要判断CLH队列中是否还有其他线程在等待获取锁。</p>
<h4 id="公平锁具体获取流程："><a href="#公平锁具体获取流程：" class="headerlink" title="公平锁具体获取流程："></a>公平锁具体获取流程：</h4><p>首先调用FairSync静态内部类的lock方法，在这个方法中直接调用AQS的acquire方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>AQS的acquire方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">        selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后会调用FairSync的tryAcquire方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 和非公平锁的区别：即使当前锁是空闲的，也要查看CLH队列中是否还有其他线程在等</div><div class="line">  * 待获取锁，如果有则获取失败，严格遵守“先到先得”的策略  </div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="comment">// 当前线程</span></div><div class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">    <span class="comment">// 获取state</span></div><div class="line">    <span class="keyword">int</span> c = getState();</div><div class="line">    <span class="comment">// 判断state的值是否为0</span></div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 这一步是判断CLH队列中是否还有其他等待获取锁的线程，如果有返回true，没有则返回false</span></div><div class="line">        <span class="comment">// 同时还需要利用CAS将state由0设置为1</span></div><div class="line">        <span class="comment">// 如果上述两步都返回true，那么设置独占锁线程为当前线程</span></div><div class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">            setExclusiveOwnerThread(current);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;  <span class="comment">// 如果当前state不是0，则判断当前线程是否为独占锁线程</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">        <span class="comment">// 将state进行+1操作，判断state值后返回</span></div><div class="line">        <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 获取锁失败，考虑将线程加入等待队列</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法中，首先获取state的值，判断当前是否可以获取锁</p>
<ul>
<li>如果state为0，说明锁没有被其他线程获取，但由于是公平锁，那么需要判断CLH队列中是否还有其他线程在等待获取锁，如果有，那么就获取锁失败了；如果没有，则需要利用CAS将state由0设置为1，这两步都返回true，那么设置独占锁线程为当前线程</li>
<li>如果当前state不是0，则判断当前线程是否为独占锁线程，如果是，将state加1，然后返回</li>
<li>其他情况返回false，获取锁失败。</li>
</ul>
<p>判断CLH队列中是否还有其他等待获取锁的线程需要调用CAS的hasQueuedPredecessors方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断CLH队列中是否还有其他等待获取锁的线程</div><div class="line"> * 如果当前线程之前有一个排队的线程，返回true</div><div class="line"> * 如果当前线程在队列的头部或队列为空，返回false</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// The correctness of this depends on head being initialized</span></div><div class="line">    <span class="comment">// before tail and on head.next being accurate if the current</span></div><div class="line">    <span class="comment">// thread is first in queue.</span></div><div class="line">    Node t = tail; <span class="comment">// Read fields in reverse initialization order</span></div><div class="line">    Node h = head;</div><div class="line">    Node s;</div><div class="line">    <span class="keyword">return</span> h != t &amp;&amp;</div><div class="line">        ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来的流程和非公平一样。</p>
<h3 id="总结：非公平锁与公平锁获取锁对比："><a href="#总结：非公平锁与公平锁获取锁对比：" class="headerlink" title="总结：非公平锁与公平锁获取锁对比："></a>总结：非公平锁与公平锁获取锁对比：</h3><ul>
<li>NonfairSync： 非公平锁在要获取锁的时候，首先会尝试直接获取锁</li>
<li>FairSync 而公平锁则需要判断CLH队列中是否还有其他线程在等待获取锁</li>
</ul>
<p>ReentrantLock是基于AbstractQueuedSynchronizer（AQS）实现的，AQS可以实现独占锁也可以实现共享锁，ReentrantLock只是使用了其中的独占锁模式。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.cnblogs.com/java-zhao/p/5131544.html" target="_blank" rel="external">http://www.cnblogs.com/java-zhao/p/5131544.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ReentrantLock-学习-获取锁（JDK-1-8）&quot;&gt;&lt;a href=&quot;#ReentrantLock-学习-获取锁（JDK-1-8）&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock 学习 - 获取锁（JDK 1.8）&quot;&gt;&lt;/a&gt;ReentrantLock 学习 - 获取锁（JDK 1.8）&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;ReentrantLock 提供非公平锁与公平锁两种加锁方式, 默认加锁方式为非公平锁。&lt;/p&gt;
&lt;h3 id=&quot;ReentrantLock类的结构为：&quot;&gt;&lt;a href=&quot;#ReentrantLock类的结构为：&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock类的结构为：&quot;&gt;&lt;/a&gt;ReentrantLock类的结构为：&lt;br&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://syy.freep.cn/590836/ReentrantLock.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出，ReentrantLock类包含三个静态内部类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sync&lt;/li&gt;
&lt;li&gt;NonfairSync&lt;/li&gt;
&lt;li&gt;FairSync&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中Sync类继承AbstractQueuedSynchronize（AQS), NonfairSync和FairSync继承Sync。&lt;/p&gt;
&lt;h3 id=&quot;ReentrantLock的基本用法：&quot;&gt;&lt;a href=&quot;#ReentrantLock的基本用法：&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock的基本用法：&quot;&gt;&lt;/a&gt;ReentrantLock的基本用法：&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;X&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ReentrantLock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      lock.lock();  &lt;span class=&quot;comment&quot;&gt;// block until condition holds&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ... method body&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.unlock()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ReentrantLock的创建&quot;&gt;&lt;a href=&quot;#ReentrantLock的创建&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock的创建&quot;&gt;&lt;/a&gt;ReentrantLock的创建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非公平锁&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Lock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;公平锁&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Lock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于默认创建的为非公平锁，所以想创建公平锁，就需要向其构造方法传入true。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建非公平锁的构造方法为：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Creates an instance of &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; ReentrantLock&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * This is equivalent to using &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; ReentrantLock(false)&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sync = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NonfairSync();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;创建公平锁的构造方法为：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 根据传入的布尔值来判断创建哪种锁&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Creates an instance of &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; ReentrantLock&amp;#125; with the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * given fairness policy.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; fair &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; true&amp;#125; if this lock should use a fair ordering policy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; fair)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sync = fair ? &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FairSync() : &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NonfairSync();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;非公平锁&quot;&gt;&lt;a href=&quot;#非公平锁&quot; class=&quot;headerlink&quot; title=&quot;非公平锁&quot;&gt;&lt;/a&gt;非公平锁&lt;/h3&gt;&lt;h4 id=&quot;非公平锁的用法&quot;&gt;&lt;a href=&quot;#非公平锁的用法&quot; class=&quot;headerlink&quot; title=&quot;非公平锁的用法&quot;&gt;&lt;/a&gt;非公平锁的用法&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;lock.lock();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ReetrantLock类的内部提供了一个加锁的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sync.lock();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个方法里又调用了==sync==的==lock==方法，又因为Sync这个类为一个抽象类，在ReentrantLock类实例化的时候，根据参数来判断调用哪个具体的类。&lt;/p&gt;
&lt;p&gt;这里先谈谈非公平锁的加锁实现。&lt;/p&gt;
&lt;h4 id=&quot;非公平锁实现简单步骤：&quot;&gt;&lt;a href=&quot;#非公平锁实现简单步骤：&quot; class=&quot;headerlink&quot; title=&quot;非公平锁实现简单步骤：&quot;&gt;&lt;/a&gt;&lt;strong&gt;非公平锁实现简单步骤&lt;/strong&gt;：&lt;/h4&gt;&lt;p&gt; 基予CAS(Compare And Swap)将state由0设置为1。&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果设置成功，那么直接获得锁，并设置独占锁的线程为当前线程。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;如果设置失败，原先内存state的值不是0，已经有其他线程获得锁，那么就会再获取一次state。&lt;br&gt;&lt;ol&gt;
&lt;li&gt;如果state为0， 那么就会再次利用CAS将state的值由0设置为1，如果成功，设置独占锁的线程为当前线。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;如果state不为0，那么需要判断当前线程是否是独占锁的线程，如果是，那么就将state加1， 并且判断当前state的值不能小于0；如果不是，那么就将该线程封装在一个Node(AQS里面)里,并加入到等待列队里，等其他线程唤醒。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;具体流程如下：&quot;&gt;&lt;a href=&quot;#具体流程如下：&quot; class=&quot;headerlink&quot; title=&quot;具体流程如下：&quot;&gt;&lt;/a&gt;具体流程如下：&lt;/h4&gt;&lt;p&gt;首先通过ReentrantLock的lock方法调用到其内部类NonFairLock的lock方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (compareAndSetState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setExclusiveOwnerThread(Thread.currentThread());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        acquire(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在lock方法中，先调用compareAndSetState方法来将state由0设置为1，如果设置成功，设置当前线程为独占锁线程，如果失败，则调用AbstractQueuedSynchronizer类的acquire(1)方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!tryAcquire(arg) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        selfInterrupt();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;向aquire方法传入参数1，此方法是线程获取临界资源的顶层入口， 如果获得到资源则直接返回，如果失败，则将当前先后才能放入到等待列队，直到获取到资源才返回。此过程忽略中断影响，模式为独占模式。&lt;/p&gt;
&lt;p&gt;因为这个方法涉及到线程的入队操作，下面来看看AbstractQueuedSynchronizer类内部封装的Node.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 同步等待队列（双向链表）节点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node SHARED = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 一个标记：用于表明该节点在独占模式下进行等待&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node EXCLUSIVE = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 线程被取消了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; CANCELLED =  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点等待触发&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SIGNAL    = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点等待条件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; CONDITION = -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点状态需要向后传播&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PROPAGATE = -&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; waitStatus;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 前驱节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Node prev;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 后继节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Node next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 线程&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Thread thread;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node nextWaiter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isShared&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nextWaiter == SHARED;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Node &lt;span class=&quot;title&quot;&gt;predecessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NullPointerException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Node p = prev;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NullPointerException();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node() &amp;#123;    &lt;span class=&quot;comment&quot;&gt;// Used to establish initial head or SHARED marker&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node(Thread thread, Node mode) &amp;#123;     &lt;span class=&quot;comment&quot;&gt;// Used by addWaiter&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nextWaiter = mode;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.thread = thread;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node(Thread thread, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; waitStatus) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// Used by Condition&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.waitStatus = waitStatus;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.thread = thread;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tryAcquire方法会调用ReentrantLock中NonfairSync内部类中的tryAcquire方法&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Lock" scheme="http://yoursite.com/tags/Lock/"/>
    
      <category term="JUC" scheme="http://yoursite.com/tags/JUC/"/>
    
      <category term="ReentrantLock" scheme="http://yoursite.com/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>在Service层进行事务控制</title>
    <link href="http://yoursite.com/2017/09/16/%E5%9C%A8Service%E5%B1%82%E8%BF%9B%E8%A1%8C%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2017/09/16/在Service层进行事务控制/</id>
    <published>2017-09-16T13:23:17.993Z</published>
    <updated>2017-09-16T13:33:06.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用接口回调实现JDBCTemplate"><a href="#利用接口回调实现JDBCTemplate" class="headerlink" title="利用接口回调实现JDBCTemplate"></a>利用接口回调实现JDBCTemplate</h2><ol>
<li><p>设计一个回调接口JDBCCallback<t>, 用来设置参数和获取结果集, 代码如下：<br></t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JDBCCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function">T <span class="title">rsToObject</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setParams</span><span class="params">(PreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>设计一个抽象类JDBCAbstractCallBack<t>，该类实现JDBCCallback<t>接口，重写接口中的两个方法，<br> 不需要具体实现，只需要重写一下就可以了，这样在DAO层用的时候不用这两个方法全部都要实现，代码如下：</t></t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * JDBC abstract callback class, implements &#123;<span class="doctag">@link</span> JDBCCallback&#125; interface.</div><div class="line"> * <span class="doctag">@author</span> Mingshan</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCAbstractCallBack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">JDBCCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">rsToObject</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(PreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">// NOOP</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>设计一个JDBCTemplate类，该类实现增删改查的基本方法，把公共的代码抽取出来，以便DAO层去调用JDBCTemplate来实现具体的业务，部分代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * JDBC Template, applys for delete, query, update, save functions.</div><div class="line"> * <span class="doctag">@author</span> Mingshan</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTemplate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Querys data by sql.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">query</span><span class="params">(String sql, JDBCCallback&lt;T&gt; jdbcCallback)</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line">        List&lt;T&gt; data = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">        <span class="keyword">boolean</span> needMyClose = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Gets connection of JDBC.</span></div><div class="line">            ConnectionHolder connectionHolder = (ConnectionHolder) AppContext.getAppContext()</div><div class="line">                    .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);</div><div class="line">            <span class="keyword">if</span> (connectionHolder != <span class="keyword">null</span>) &#123;</div><div class="line">                conn = connectionHolder.getConn();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</div><div class="line">                conn = DB.getConn();</div><div class="line">                needMyClose = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            pstmt = DB.getPrepareStatement(conn, sql);</div><div class="line">            <span class="comment">// Sets parameters for PreparedStatement.</span></div><div class="line">            jdbcCallback.setParams(pstmt);</div><div class="line">            rs = pstmt.executeQuery();</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">                <span class="comment">// Gets data from database.</span></div><div class="line">                T object = jdbcCallback.rsToObject(rs);</div><div class="line">                data.add(object);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            DB.close(rs);</div><div class="line">            DB.close(pstmt);</div><div class="line">            <span class="keyword">if</span> (needMyClose) &#123;</div><div class="line">                DB.close(conn);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql, JDBCCallback&lt;T&gt; jdbcCallback)</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> needMyClose = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ConnectionHolder connectionHolder = (ConnectionHolder) AppContext.getAppContext()</div><div class="line">                    .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);</div><div class="line">            <span class="keyword">if</span> (connectionHolder != <span class="keyword">null</span>) &#123;</div><div class="line">                conn = connectionHolder.getConn();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</div><div class="line">                conn = DB.getConn();</div><div class="line">                needMyClose = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            pstmt = DB.getPrepareStatement(conn, sql);</div><div class="line">            jdbcCallback.setParams(pstmt);</div><div class="line">            pstmt.execute();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            DB.close(pstmt);</div><div class="line">            <span class="keyword">if</span> (needMyClose) &#123;</div><div class="line">                DB.close(conn);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其他的增删改查可以按照上面的模式进行扩展，就不写了。</p>
<ol>
<li>在DAO层使用JDBCTemplate，部分代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JDBCTemplate&lt;User&gt; jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JDBCTemplate&lt;User&gt; jdbcTemplate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByUserName</span><span class="params">(<span class="keyword">final</span> String userName)</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">null</span>;</div><div class="line">        String sql = <span class="string">"SELECT * FROM user WHERE user_name = ?"</span>;</div><div class="line">        user = jdbcTemplate.queryOne(sql, <span class="keyword">new</span> JDBCAbstractCallBack&lt;User&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">rsToObject</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                User user = <span class="keyword">new</span> User();</div><div class="line">                user.setPassword(rs.getString(Constants.USER_PASSWORD));</div><div class="line">                user.setUserName(rs.getString(Constants.USER_USER_NAME));</div><div class="line">                user.setId(rs.getInt(Constants.USER_ID));</div><div class="line">                <span class="keyword">return</span> user;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(PreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                pstmt.setString(<span class="number">1</span>, userName);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>—————————————————————————OVER————————————————————————————</p>
<hr>
<h2 id="如何在Service层进行事务控制？"><a href="#如何在Service层进行事务控制？" class="headerlink" title="如何在Service层进行事务控制？"></a>如何在Service层进行事务控制？</h2><a id="more"></a>
<ol>
<li><p>设计一个ConnectionHolder类，用来存放Connection。<br> 该类有两个成员变量 Connection conn, boolean isOpenTransaction, 并且提供getter和setter方法。<br> Connection conn 用来存放Connection, boolean isOpenTransaction 用来判断需不需要开启事务</p>
</li>
<li><p>编写ConnectionProxy类，并实现InvocationHandler接口，该类用来真正实现事务控制，具体解析如下：</p>
<ol>
<li><p>首先需要获取配置的事务传播，用来判断哪些方法需要进行事务控制，哪些不需要，可以参考Spring配置事务的代码，这里先模拟一下，XML配置信息如下，然后需要对XML配置信息进行解析，然后以map形式返回，这时我们就可以按照我们的需求来判断当前要调用Service层的方法到底是属于哪一种，进而判断是否要进行事务控制。如果需要关闭数据库连接，那么数据库连接应在代理类中关闭。</p>
</li>
<li><p>判读connectionHolder对象是否已被创建，如果已被创建，直接使用，然后进行事务控制判断；如果不存在，那么在这里创建，需要拿到数据库连接，然后进行事务控制判断。这里用到了Connection共用，即一个request只有一个Connection。</p>
</li>
<li><p>利用反射调用方法， 此时方法会出现异常， 需要进行捕获。如果事务开启，并且调用方法出现异常了，那么就需要事     务回滚，最后关闭连接。</p>
</li>
<li><p>DAO层的写法请参考JDBCTemplate, 为了防止数据库连接中断，需要DAO层再进行一次连接判断，此时数据库的连接就     需要在DAO层关闭了。</p>
</li>
</ol>
</li>
</ol>
<p>事务配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- TransactionInterceptor --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"TransactionInterceptor"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>代理类代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * JDBC ConnectionProxy.</div><div class="line"> * <span class="doctag">@author</span> Mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line">    <span class="keyword">private</span> TransactionConfig transactionConfig = AppContext.getAppContext().getTransactionConfig();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// If current thread close connection. </span></div><div class="line">        <span class="keyword">boolean</span> needMyClose = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> isCommitOrRollBackTran = <span class="keyword">false</span>;</div><div class="line">        Map&lt;String, String&gt; tranAttributeMap = transactionConfig.getTranAttributeMap();</div><div class="line">        String[] allowed = getTransactionAttribute(transactionConfig);</div><div class="line">        String originKey = method.getName() + <span class="string">"*"</span>;</div><div class="line">        <span class="comment">// Before advice.</span></div><div class="line">        ConnectionHolder connectionHolder = (ConnectionHolder) AppContext.getAppContext()</div><div class="line">                .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (connectionHolder == <span class="keyword">null</span>) &#123;</div><div class="line">            Connection conn = DB.getConn();</div><div class="line">            connectionHolder = <span class="keyword">new</span> ConnectionHolder();</div><div class="line">            connectionHolder.setConn(conn);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (StringUtil.matchStr(method.getName(), allowed) &amp;&amp; (tranAttributeMap.get(originKey).equals(<span class="string">"REQUIRED"</span>))) &#123;</div><div class="line">                connectionHolder.setOpenTran(<span class="keyword">true</span>);</div><div class="line">                DB.setAutoCommit(conn, <span class="keyword">false</span>);</div><div class="line">                isCommitOrRollBackTran = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            AppContext.getAppContext().addObject(Constants.APP_REQUEST_THREAD_CONNECTION, connectionHolder);</div><div class="line">            isCommitOrRollBackTran = <span class="keyword">true</span>;</div><div class="line">            needMyClose = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (StringUtil.matchStr(method.getName(), allowed) &amp;&amp; (tranAttributeMap.get(originKey).equals(<span class="string">"REQUIRED"</span>))) &#123;</div><div class="line">                <span class="keyword">if</span> (!connectionHolder.isOpenTran()) &#123;</div><div class="line">                    connectionHolder.setOpenTran(<span class="keyword">true</span>);</div><div class="line">                    DB.setAutoCommit(connectionHolder.getConn(), <span class="keyword">false</span>);</div><div class="line">                    isCommitOrRollBackTran = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = method.invoke(target, args);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (isCommitOrRollBackTran) &#123;</div><div class="line">                DB.commit(connectionHolder.getConn());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">            <span class="keyword">if</span> (isCommitOrRollBackTran) &#123;</div><div class="line">                DB.rollback(connectionHolder.getConn());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// After advice.</span></div><div class="line">            <span class="keyword">if</span> (needMyClose) &#123;</div><div class="line">                connectionHolder = (ConnectionHolder) AppContext.getAppContext()</div><div class="line">                        .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);</div><div class="line">                DB.close(connectionHolder.getConn());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Stores key in map as an array.</div><div class="line">     * <span class="doctag">@param</span> transactionConfig</div><div class="line">     * <span class="doctag">@return</span> String[]</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String[] getTransactionAttribute(TransactionConfig transactionConfig) &#123;</div><div class="line">        Map&lt;String, String&gt; tranAttributeMap = transactionConfig.getTranAttributeMap();</div><div class="line">        Set&lt;String&gt; keySet = tranAttributeMap.keySet();</div><div class="line">        String[] methodPrefixs =<span class="keyword">new</span> String[keySet.size()];</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</div><div class="line">            <span class="keyword">int</span> index = key.indexOf(<span class="string">"*"</span>);</div><div class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">                key = key.substring(<span class="number">0</span>, key.length() - <span class="number">1</span>);</div><div class="line">                methodPrefixs[i] = key;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                methodPrefixs[i] = key;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> methodPrefixs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="附：ApplicationContextFilter"><a href="#附：ApplicationContextFilter" class="headerlink" title="附：ApplicationContextFilter"></a>附：ApplicationContextFilter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Application Context Filter, include &#123;<span class="doctag">@link</span> HttpServletRequest&#125; request, </div><div class="line"> * &#123;<span class="doctag">@link</span> HttpServletResponse&#125; response, &#123;<span class="doctag">@link</span> Connection&#125; JDBC Connection.</div><div class="line"> * <span class="doctag">@author</span> Mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContextFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TransactionConfig transactionConfig = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppContextFilter</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        ServletContext servletContext = fConfig.getServletContext();</div><div class="line">        transactionConfig = (TransactionConfig) servletContext.getAttribute(<span class="string">"transactionConfig"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</div><div class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</div><div class="line"></div><div class="line">        AppContext appContext = AppContext.getAppContext();</div><div class="line">        appContext.addObject(Constants.APP_CONTEXT_REQUEST, request);</div><div class="line">        appContext.addObject(Constants.APP_CONTEXT_RESPONSE, response);</div><div class="line">        appContext.setTransactionConfig(transactionConfig);</div><div class="line">        ConnectionHolder connectionHolder = (ConnectionHolder) AppContext.getAppContext()</div><div class="line">                .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);</div><div class="line">        <span class="keyword">boolean</span> needMyClose = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(connectionHolder == <span class="keyword">null</span>) &#123;</div><div class="line">            connectionHolder = <span class="keyword">new</span> ConnectionHolder();</div><div class="line">            Connection conn = DB.getConn();</div><div class="line">            connectionHolder.setConn(conn);</div><div class="line">            AppContext.getAppContext().addObject(Constants.APP_REQUEST_THREAD_CONNECTION, connectionHolder);</div><div class="line">            needMyClose = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            chain.doFilter(request, response);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</div><div class="line">            <span class="keyword">throw</span> ioException;</div><div class="line">        &#125; <span class="keyword">catch</span> (ServletException servletException) &#123;</div><div class="line">            <span class="keyword">throw</span> servletException;</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException runntimeException) &#123;</div><div class="line">            <span class="keyword">throw</span> runntimeException;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (needMyClose) &#123;</div><div class="line">                connectionHolder = (ConnectionHolder) AppContext.getAppContext()</div><div class="line">                        .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);</div><div class="line">                DB.close(connectionHolder.getConn());</div><div class="line">            &#125;</div><div class="line">            appContext.clear();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// NOOP</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>—————————————————————————OVER————————————————————————————</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用接口回调实现JDBCTemplate&quot;&gt;&lt;a href=&quot;#利用接口回调实现JDBCTemplate&quot; class=&quot;headerlink&quot; title=&quot;利用接口回调实现JDBCTemplate&quot;&gt;&lt;/a&gt;利用接口回调实现JDBCTemplate&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设计一个回调接口JDBCCallback&lt;t&gt;, 用来设置参数和获取结果集, 代码如下：&lt;br&gt;&lt;/t&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JDBCCallback&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;rsToObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ResultSet rs)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PreparedStatement pstmt)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计一个抽象类JDBCAbstractCallBack&lt;t&gt;，该类实现JDBCCallback&lt;t&gt;接口，重写接口中的两个方法，&lt;br&gt; 不需要具体实现，只需要重写一下就可以了，这样在DAO层用的时候不用这两个方法全部都要实现，代码如下：&lt;/t&gt;&lt;/t&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * JDBC abstract callback class, implements &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; JDBCCallback&amp;#125; interface.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Mingshan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JDBCAbstractCallBack&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JDBCCallback&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;rsToObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ResultSet rs)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PreparedStatement pstmt)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// NOOP&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设计一个JDBCTemplate类，该类实现增删改查的基本方法，把公共的代码抽取出来，以便DAO层去调用JDBCTemplate来实现具体的业务，部分代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * JDBC Template, applys for delete, query, update, save functions.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Mingshan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JDBCTemplate&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    * Querys data by sql.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String sql, JDBCCallback&amp;lt;T&amp;gt; jdbcCallback)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Connection conn = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        PreparedStatement pstmt = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ResultSet rs = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;T&amp;gt; data = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;T&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; needMyClose = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Gets connection of JDBC.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ConnectionHolder connectionHolder = (ConnectionHolder) AppContext.getAppContext()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (connectionHolder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                conn = connectionHolder.getConn();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (conn == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                conn = DB.getConn();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                needMyClose = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pstmt = DB.getPrepareStatement(conn, sql);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Sets parameters for PreparedStatement.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            jdbcCallback.setParams(pstmt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            rs = pstmt.executeQuery();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (rs.next()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// Gets data from database.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                T object = jdbcCallback.rsToObject(rs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                data.add(object);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DBException();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            DB.close(rs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            DB.close(pstmt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (needMyClose) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                DB.close(conn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String sql, JDBCCallback&amp;lt;T&amp;gt; jdbcCallback)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Connection conn = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        PreparedStatement pstmt = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; needMyClose = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ConnectionHolder connectionHolder = (ConnectionHolder) AppContext.getAppContext()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    .getObject(Constants.APP_REQUEST_THREAD_CONNECTION);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (connectionHolder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                conn = connectionHolder.getConn();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (conn == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                conn = DB.getConn();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                needMyClose = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pstmt = DB.getPrepareStatement(conn, sql);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            jdbcCallback.setParams(pstmt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pstmt.execute();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DBException();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            DB.close(pstmt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (needMyClose) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                DB.close(conn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他的增删改查可以按照上面的模式进行扩展，就不写了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在DAO层使用JDBCTemplate，部分代码如下：&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserDaoImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserDao&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; JDBCTemplate&amp;lt;User&amp;gt; jdbcTemplate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setJdbcTemplate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JDBCTemplate&amp;lt;User&amp;gt; jdbcTemplate)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.jdbcTemplate = jdbcTemplate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;findUserByUserName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String userName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        User user = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String sql = &lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM user WHERE user_name = ?&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        user = jdbcTemplate.queryOne(sql, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JDBCAbstractCallBack&amp;lt;User&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;rsToObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ResultSet rs)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                User user = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                user.setPassword(rs.getString(Constants.USER_PASSWORD));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                user.setUserName(rs.getString(Constants.USER_USER_NAME));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                user.setId(rs.getInt(Constants.USER_ID));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PreparedStatement pstmt)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                pstmt.setString(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, userName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;—————————————————————————OVER————————————————————————————&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何在Service层进行事务控制？&quot;&gt;&lt;a href=&quot;#如何在Service层进行事务控制？&quot; class=&quot;headerlink&quot; title=&quot;如何在Service层进行事务控制？&quot;&gt;&lt;/a&gt;如何在Service层进行事务控制？&lt;/h2&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java枚举探究</title>
    <link href="http://yoursite.com/2017/07/06/java%E6%9E%9A%E4%B8%BE%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2017/07/06/java枚举探究/</id>
    <published>2017-07-06T02:11:07.000Z</published>
    <updated>2017-09-24T04:53:05.543Z</updated>
    
    <content type="html"><![CDATA[<p>在jdk1.5中引入枚举这个小功能，这个功能虽然用的不多，但是却给我们的开发带来很多便利，我们<br>今天来看看java的枚举是个什么样子。</p>
<h2 id="枚举的主要操作方法"><a href="#枚举的主要操作方法" class="headerlink" title="枚举的主要操作方法"></a>枚举的主要操作方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name,<span class="keyword">int</span> ordinal)</span>  <span class="comment">//接受枚举的名称和枚举的常量创建枚举对象  </span></span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span><span class="keyword">throws</span> CloneNotSupportedException  <span class="comment">//克隆枚举对象  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> <span class="comment">//比较枚举与指定对象的顺序</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span>  <span class="comment">//比较两个枚举对象  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>  <span class="comment">//返回枚举常量的哈希码  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span>  <span class="comment">//返回枚举类的名称  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span>  <span class="comment">//返回枚举常量的序号  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; <span class="keyword">enum</span> Type,String name)</span>  <span class="comment">//返回带指定名称的指定枚举类型的枚举常量</span></div></pre></td></tr></table></figure>
<h2 id="先定义一个枚举，用enum关键字"><a href="#先定义一个枚举，用enum关键字" class="headerlink" title="先定义一个枚举，用enum关键字"></a>先定义一个枚举，用enum关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义枚举</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumTest &#123;</div><div class="line">	 MON, TUE, WED, THU, FRI, SAT, SUN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里将星期定义为枚举类型，但没有赋值，既然已经定义好了，那么就先测试一下吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 枚举测试</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//遍历枚举</span></div><div class="line">		<span class="keyword">for</span>(EnumTest e : EnumTest.values()) &#123;</div><div class="line">			System.out.println(e.toString());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"我是分割线------"</span>);</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//switch 操作</span></div><div class="line">		EnumTest fri = EnumTest.FRI;</div><div class="line"></div><div class="line">		<span class="keyword">switch</span>(fri)&#123;</div><div class="line">			<span class="keyword">case</span> MON :</div><div class="line">				System.out.println(<span class="string">"今天是星期一"</span>); <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> FRI :</div><div class="line">				System.out.println(<span class="string">"今天是星期五"</span>); <span class="keyword">break</span>;</div><div class="line">		    <span class="keyword">default</span> :</div><div class="line">		    	System.out.println(<span class="string">"-----"</span>); <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//返回</span></div><div class="line">		System.out.println(fri.getDeclaringClass());</div><div class="line"></div><div class="line">		<span class="comment">//利用compareTo进行比较</span></div><div class="line">		<span class="keyword">switch</span> (fri.compareTo(EnumTest.SAT)) &#123;</div><div class="line">		<span class="keyword">case</span> -<span class="number">1</span>:</div><div class="line">			System.out.println(<span class="string">"之前"</span>);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">			System.out.println(<span class="string">"之后"</span>);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以遍历枚举，用java的foreach进行遍历，调用枚举的values方法获取定义的枚举列表，但当<br>我们编写自定义enum时，却不包含values这个方法，这个方法是当我门编译文件时，编译器自动帮我<br>们加上的。枚举还可以进行switch操作，可以对获取的枚举进行判断。利用compareTo函数进行比较两个<br>枚举的顺序</p>
<a id="more"></a>
<h2 id="给-enum-对象加一下-value-的属性和-getValue-的方法"><a href="#给-enum-对象加一下-value-的属性和-getValue-的方法" class="headerlink" title="给 enum 对象加一下 value 的属性和 getValue() 的方法"></a>给 enum 对象加一下 value 的属性和 getValue() 的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 赋初值</div><div class="line"> * 给 enum 对象加一下 value 的属性和 getValue() 的方法</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumTest2 &#123;</div><div class="line">    MON(<span class="number">1</span>), TUE(<span class="number">2</span>), WED(<span class="number">3</span>), THU(<span class="number">4</span>), FRI(<span class="number">5</span>), SAT(<span class="number">6</span>) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	    	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	    &#125;</div><div class="line">    &#125;,</div><div class="line">    SUN(<span class="number">0</span>) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	    	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	    &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">EnumTest2</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>获取属性值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取属性值</div><div class="line"> */</div><div class="line">System.out.println(EnumTest2.FRI.getValue());</div></pre></td></tr></table></figure>
<blockquote>
<p>EnumSet的使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//EnumSet的使用</span></div><div class="line">EnumSet&lt;EnumTest2&gt; allOf = EnumSet.allOf(EnumTest2.class);</div><div class="line"></div><div class="line"><span class="comment">//遍历枚举</span></div><div class="line"><span class="keyword">for</span> (EnumTest2 enumTest2 : allOf) &#123;</div><div class="line">	System.out.println(enumTest2.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>EnumMap的使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">EnumMap&lt;EnumTest2, Object&gt; enumMap = <span class="keyword">new</span> EnumMap&lt;&gt;(EnumTest2.class);</div><div class="line"></div><div class="line">enumMap.put(EnumTest2.FRI, <span class="string">"星期五"</span>);</div><div class="line">enumMap.put(EnumTest2.SUN, <span class="string">"星期天"</span>);</div><div class="line"></div><div class="line"><span class="comment">//遍历map</span></div><div class="line"><span class="keyword">for</span> (Entry&lt;EnumTest2, Object&gt; enumTest2 : enumMap.entrySet()) &#123;</div><div class="line">	System.out.println(enumTest2.getKey()+<span class="string">"---"</span>+enumTest2.getValue());</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在jdk1.5中引入枚举这个小功能，这个功能虽然用的不多，但是却给我们的开发带来很多便利，我们&lt;br&gt;今天来看看java的枚举是个什么样子。&lt;/p&gt;
&lt;h2 id=&quot;枚举的主要操作方法&quot;&gt;&lt;a href=&quot;#枚举的主要操作方法&quot; class=&quot;headerlink&quot; title=&quot;枚举的主要操作方法&quot;&gt;&lt;/a&gt;枚举的主要操作方法&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ordinal)&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//接受枚举的名称和枚举的常量创建枚举对象  &lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; CloneNotSupportedException  &lt;span class=&quot;comment&quot;&gt;//克隆枚举对象  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(E o)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//比较枚举与指定对象的顺序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object other)&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//比较两个枚举对象  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//返回枚举常量的哈希码  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//返回枚举类的名称  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//返回枚举常量的序号  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T extends Enum&amp;lt;T&amp;gt;&amp;gt; T &lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;T&amp;gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Type,String name)&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//返回带指定名称的指定枚举类型的枚举常量&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;先定义一个枚举，用enum关键字&quot;&gt;&lt;a href=&quot;#先定义一个枚举，用enum关键字&quot; class=&quot;headerlink&quot; title=&quot;先定义一个枚举，用enum关键字&quot;&gt;&lt;/a&gt;先定义一个枚举，用enum关键字&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 定义枚举&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; mingshan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; EnumTest &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 MON, TUE, WED, THU, FRI, SAT, SUN;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里将星期定义为枚举类型，但没有赋值，既然已经定义好了，那么就先测试一下吧。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 枚举测试&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; mingshan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//遍历枚举&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(EnumTest e : EnumTest.values()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(e.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;我是分割线------&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//switch 操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		EnumTest fri = EnumTest.FRI;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(fri)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MON :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;今天是星期一&quot;&lt;/span&gt;); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; FRI :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;今天是星期五&quot;&lt;/span&gt;); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;-----&quot;&lt;/span&gt;); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//返回&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(fri.getDeclaringClass());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//利用compareTo进行比较&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (fri.compareTo(EnumTest.SAT)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;之前&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;之后&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以遍历枚举，用java的foreach进行遍历，调用枚举的values方法获取定义的枚举列表，但当&lt;br&gt;我们编写自定义enum时，却不包含values这个方法，这个方法是当我门编译文件时，编译器自动帮我&lt;br&gt;们加上的。枚举还可以进行switch操作，可以对获取的枚举进行判断。利用compareTo函数进行比较两个&lt;br&gt;枚举的顺序&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基于java中的泛型与反射构建通用DAO层</title>
    <link href="http://yoursite.com/2017/06/23/%E5%9F%BA%E4%BA%8Ejava%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E4%B8%8E%E5%8F%8D%E5%B0%84%E6%9E%84%E5%BB%BA%E9%80%9A%E7%94%A8DAO%E5%B1%82/"/>
    <id>http://yoursite.com/2017/06/23/基于java中的泛型与反射构建通用DAO层/</id>
    <published>2017-06-23T12:53:52.425Z</published>
    <updated>2017-09-24T04:51:28.086Z</updated>
    
    <content type="html"><![CDATA[<p>在利用hibernate写通用DAO层时需要获取泛型的类型，比如我在写hql的update语句时需要获取泛型的实体类，由于泛型有擦除机制，所以与需要在运行过程中获取泛型的类型产生了矛盾。此时需要利用反射机制来实现此功能，下面来看一个小例子。</p>
<blockquote>
<p>首先建一个实体类Dog<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8108340856807454651L</span>;</div><div class="line">	  <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	  <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="keyword">return</span> age;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">  		<span class="keyword">this</span>.age = age;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="keyword">return</span> name;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">  		<span class="keyword">this</span>.name = name;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p> 然后写一个基类，在此类中可以获取泛型的类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.han.one;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过反射获取泛型实例</div><div class="line"> */</div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Genericity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">    <span class="keyword">protected</span> Class clazz;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 把泛型的参数提取出来的过程放入到构造函数中写，因为</div><div class="line">    * 当子类创建对象的时候，直接调用父类的构造函数</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Genericity</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">// 通过反射机制获取子类传递过来的实体类的类型信息</span></div><div class="line">        ParameterizedType type = (ParameterizedType) <span class="keyword">this</span>.getClass().getGenericSuperclass();</div><div class="line">        <span class="comment">//得到t的实际类型</span></div><div class="line">        clazz = (Class&lt;T&gt;) type.getActualTypeArguments()[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定实例的所有属性名及对应值的Map实例</div><div class="line">     * <span class="doctag">@param</span> entity 实例</div><div class="line">     * <span class="doctag">@return</span> 字段名及对应值的Map实例</div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getFieldValueMap</span><span class="params">(T entity)</span> </span>&#123;</div><div class="line">        <span class="comment">// key是属性名，value是对应值</span></div><div class="line">        Map&lt;String, Object&gt; fieldValueMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// 获取当前加载的实体类中所有属性</span></div><div class="line">        Field[] fields = <span class="keyword">this</span>.clazz.getDeclaredFields();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</div><div class="line">            Field f = fields[i];</div><div class="line">            <span class="comment">// 属性名</span></div><div class="line">            String key = f.getName();</div><div class="line">            <span class="comment">//属性值</span></div><div class="line">            Object value = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">// 忽略序列化版本ID号</span></div><div class="line">            <span class="keyword">if</span> (! <span class="string">"serialVersionUID"</span>.equals(key)) &#123;</div><div class="line">            	<span class="comment">// 取消Java语言访问检查</span></div><div class="line">            	f.setAccessible(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    value =f.get(entity);</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                fieldValueMap.put(key, value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fieldValueMap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在此类的构造方法中利用反射获取子类传递过来的实体类的类型信息，getFieldValueMap方法用于获取该实体类的属性信息</p>
<blockquote>
<p>最后写一个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.han.one;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试：通过反射获取运行过程中泛型实例</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericityTest</span> <span class="keyword">extends</span> <span class="title">Genericity</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        GenericityTest gt = <span class="keyword">new</span> GenericityTest();</div><div class="line"></div><div class="line">        <span class="comment">//赋值</span></div><div class="line">        Dog  dd = <span class="keyword">new</span> Dog();</div><div class="line">        dd.setAge(<span class="number">1</span>);</div><div class="line">        dd.setName(<span class="string">"旺财"</span>);</div><div class="line"></div><div class="line">        Map&lt;String,Object&gt; map = gt.getFieldValueMap(dd);</div><div class="line">        <span class="comment">//遍历</span></div><div class="line">        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = map.entrySet();</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</div><div class="line">            String key = entry.getKey();</div><div class="line">            Object value = entry.getValue();</div><div class="line">            System.out.println(key + <span class="string">"---"</span> + value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在这个测试类中，此类继承基类，并向其传递实体类，这样在父类中就可以通过反射获取泛型的类型了。</p>
<p>以此为基础，就可以构建通用的DAO了，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">T</span>&gt;  <span class="keyword">implements</span> <span class="title">IBaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SessionFactory  sessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class clazz;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDaoImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 通过反射机制获取子类传递过来的实体类的类型信息</span></div><div class="line">        ParameterizedType type = (ParameterizedType) <span class="keyword">this</span>.getClass().getGenericSuperclass();</div><div class="line">        clazz = (Class&lt;T&gt;) type.getActualTypeArguments()[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        stringBuffer.append(<span class="string">"update "</span> + <span class="keyword">this</span>.clazz.getSimpleName());</div><div class="line">        stringBuffer.append(<span class="string">" u set u.itemTitle=:itemTitle ,u.itemContent=:itemContent,u.addTime=:addTime,u.isImage=:isImage,u.isPublish=:isPublish,u.author=:author  where u.id=:id"</span>);</div><div class="line">        System.out.println(stringBuffer.toString());</div><div class="line">        Query query  = sessionFactory.getCurrentSession().createQuery(stringBuffer.toString());</div><div class="line">        query.setProperties(t);</div><div class="line">        <span class="keyword">return</span> (query.executeUpdate()&gt;<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只是在update方法中利用反射获取实体类，通过拼装hql语句来达到重用目的，当然参数也可以动态获取，这里只是个小例子。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>java中泛型与反射的应用很广泛，想要完全掌握不是那么容易，多写多练是比较好的方式^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在利用hibernate写通用DAO层时需要获取泛型的类型，比如我在写hql的update语句时需要获取泛型的实体类，由于泛型有擦除机制，所以与需要在运行过程中获取泛型的类型产生了矛盾。此时需要利用反射机制来实现此功能，下面来看一个小例子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先建一个实体类Dog&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.Serializable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;number&quot;&gt;8108340856807454651L&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>利用hibernate进行多表查询问题</title>
    <link href="http://yoursite.com/2017/06/23/%E5%88%A9%E7%94%A8hibernate%E8%BF%9B%E8%A1%8C%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/利用hibernate进行多表查询问题/</id>
    <published>2017-06-23T12:52:13.387Z</published>
    <updated>2017-09-24T04:51:34.453Z</updated>
    
    <content type="html"><![CDATA[<p>在Hibernate框架中，一个实体类映射为一个数据库表，在进行多表查询时,如何将不同表中的数据整合起来，并且映射为一个实体类是利用Hibernate进行多表查询的关键，根据我的理解，先将代码整理一下：</p>
<blockquote>
<p>实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"ps_trends"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trends</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2228382525594394975L</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"item_title"</span>)</div><div class="line">    <span class="keyword">private</span> String itemTitle;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"item_content"</span>)</div><div class="line">    <span class="keyword">private</span> String itemContent;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"type_id"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>  typeId;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"add_time"</span>)</div><div class="line">    <span class="keyword">private</span> String addTime;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"view_count"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> viewCount;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"is_image"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> isImage;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"is_publish"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> isPublish;</div><div class="line"></div><div class="line">    <span class="comment">//临时属性</span></div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> String itemTypeFlag;</div><div class="line"></div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> String itemTypeName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trends</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trends</span><span class="params">(<span class="keyword">int</span> id, String itemTitle, String itemContent, String addTime, <span class="keyword">int</span> viewCount,</span></span></div><div class="line">    	  String itemTypeName,String itemTypeFlag) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.itemTitle = itemTitle;</div><div class="line">        <span class="keyword">this</span>.itemContent = itemContent;</div><div class="line">        <span class="keyword">this</span>.addTime = addTime;</div><div class="line">        <span class="keyword">this</span>.viewCount = viewCount;</div><div class="line">        <span class="keyword">this</span>.itemTypeName = itemTypeName;</div><div class="line">        <span class="keyword">this</span>.itemTypeFlag = itemTypeFlag;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    setter ，getter方法</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
 <a id="more"></a>
<p>这里有两个属性注解为Transient，因为它们不是主表的映射字段。同时写一个有参构造方法，构造方法的参数列表即为要查询的映射字段。</p>
<blockquote>
<p>DaoImpl方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Trends <span class="title">findTrendsInfoById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">    String hql=<span class="string">"select new com.primaryschool.home.entity.Trends(t.id,t.itemTitle,t.itemContent,t.addTime,t.viewCount,tt.itemTypeName,tt.itemTypeFlag)from Trends t,TrendsType tt  where tt.id=t.typeId and t.id=? and t.isPublish=1"</span>;</div><div class="line">    Query query=sessionFactory.getCurrentSession().createQuery(hql);</div><div class="line">    query.setInteger(<span class="number">0</span>, id);</div><div class="line">    <span class="keyword">return</span> (Trends) query.uniqueResult();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在findTrendsInfoById(int id)方法中，hql语句有些特别，它是将两个表的需要字段传入到Trends实体类的构造方法中，这样就可以直接利用getter方法进行取值了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Hibernate框架中，一个实体类映射为一个数据库表，在进行多表查询时,如何将不同表中的数据整合起来，并且映射为一个实体类是利用Hibernate进行多表查询的关键，根据我的理解，先将代码整理一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实体类&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Entity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Table&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;ps_trends&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trends&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = -&lt;span class=&quot;number&quot;&gt;2228382525594394975L&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Id&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.IDENTITY)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;item_title&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String itemTitle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;item_content&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String itemContent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;type_id&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;  typeId;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;add_time&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String addTime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;view_count&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; viewCount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;is_image&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; isImage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;is_publish&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; isPublish;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//临时属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Transient&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String itemTypeFlag;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Transient&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String itemTypeName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trends&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trends&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id, String itemTitle, String itemContent, String addTime, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; viewCount,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	  String itemTypeName,String itemTypeFlag) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.itemTitle = itemTitle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.itemContent = itemContent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addTime = addTime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.viewCount = viewCount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.itemTypeName = itemTypeName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.itemTypeFlag = itemTypeFlag;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setter ，getter方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>利用uploadify插件上传文件时java后台获取不到当前session问题</title>
    <link href="http://yoursite.com/2017/06/23/%E5%88%A9%E7%94%A8uploadify%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6java%E5%90%8E%E5%8F%B0%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%BD%93%E5%89%8Dsession%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/利用uploadify插件上传文件时java后台获取不到当前session问题/</id>
    <published>2017-06-23T12:51:23.675Z</published>
    <updated>2017-06-23T13:04:31.970Z</updated>
    
    <content type="html"><![CDATA[<p>我在利用uploadify插件上传文件时发现java后台获取不到当前用户的session值，即当前的用户的session保存的信息失效，导致拦截器将上传请求拦截，这里的拦截器主要对登录的信息进行拦截验证，正因为此原因，导致上传文件失败，后来在利用firebug查找请求的时候，发现uploadify插件会自动生成一个新的session，导致原来的session失效，解决方法是将jsessionid通过url传到后台，这样后台就能识别当前session，问题也就解决了。代码如下：</p>
<pre><code>$(&quot;#uploadify&quot;).uploadify({
        debug            : false,
        swf             :  CTPPATH+&apos;/admin/static/uploadify/js/uploadify.swf&apos;,    //swf文件路径
        method            : &apos;get&apos;,    // 提交方式
        uploader        :  CTPPATH+&apos;/processUpload.ado;jsessionid=${pageContext.session.id}&apos;, // 服务器端处理该上传请求的程序(servlet, struts2-Action)   )};
</code></pre><p>  代码中有许多属性这里没有贴出来，这里主要看uploader属性，uploader属性为CTPPATH+’/processUpload.ado;jsessionid=${pageContext.session.id}’，即在请求url中附上<br>;jsessionid=${pageContext.session.id}，这样上传就没问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在利用uploadify插件上传文件时发现java后台获取不到当前用户的session值，即当前的用户的session保存的信息失效，导致拦截器将上传请求拦截，这里的拦截器主要对登录的信息进行拦截验证，正因为此原因，导致上传文件失败，后来在利用firebug查找请求的时候
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>javaweb下载文件时IE浏览器下报错问题</title>
    <link href="http://yoursite.com/2017/06/23/javaweb%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%97%B6IE%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/javaweb下载文件时IE浏览器下报错问题/</id>
    <published>2017-06-23T12:50:10.804Z</published>
    <updated>2017-06-23T13:04:03.725Z</updated>
    
    <content type="html"><![CDATA[<p>最近做的网站的一个下载功能出现了问题，在firefox浏览器以及360浏览器下下载均正常，也能将中文正常转换，但在IE浏览器下却出现了问题，当点击下载链接的时候，后台直接报错：<br><img src="http://www.mingzhiwen.cn/usr/uploads/2017/03/1999726111.png" alt="2017-03-17_113722.png"><br>后台我怎么兼容也不能解决问题，我下载的部分java代码：</p>
<p><img src="http://www.mingzhiwen.cn/usr/uploads/2017/03/95431087.png" alt="QQ图片20170317113901.png"></p>
<p>进过我仔细查找，发现我前台通过get方式提交的文件名包含一下字符，导致浏览器解析url不一致，所以需要将url通过javascript进行转码，即用encodeURIComponent函数进行编码，代码如下</p>
<pre><code>&lt;a href=&quot;javascript:location.href=&apos;${pageContext.request.contextPath}/download.do?realname=&apos;+encodeURIComponent(&apos;${file_list.real_name}&apos;)+&apos;&amp;filename=&apos;+encodeURIComponent(&apos;${file_list.file_name}&apos;);&quot; class=&quot;file-name&quot;&gt;${file_list.file_name}&lt;/a&gt;
</code></pre><p>通过将文件名编码之后就能解决问题了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做的网站的一个下载功能出现了问题，在firefox浏览器以及360浏览器下下载均正常，也能将中文正常转换，但在IE浏览器下却出现了问题，当点击下载链接的时候，后台直接报错：&lt;br&gt;&lt;img src=&quot;http://www.mingzhiwen.cn/usr/upload
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>网站消息推送之long polling（长轮询）初探</title>
    <link href="http://yoursite.com/2017/06/23/%E7%BD%91%E7%AB%99%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E4%B9%8Blong%20polling%EF%BC%88%E9%95%BF%E8%BD%AE%E8%AF%A2%EF%BC%89%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/06/23/网站消息推送之long polling（长轮询）初探/</id>
    <published>2017-06-23T12:47:58.300Z</published>
    <updated>2017-09-24T04:55:17.389Z</updated>
    
    <content type="html"><![CDATA[<p>网站的消息推送功能应用很广泛，比如论坛，问答网站等等都需要推送消息，那么采用什么样的推送方式更加便捷，更加节省服务器资源呢，这个需要根据网站的流量和规模来决定，因为long polling是我最先接触到的，我就来谈谈它吧。</p>
<p>长轮询初看像是轮流查询的意思，其实不是，它是客户端通过ajax发出请求，然后客户端挂起，等待服务器端响应，服务器端会检测有无新消息，如果有消息，服务器端会将新消息推送给客户端，结束本次请求，如果在有效请求期内没有新消息出现，那么会一直检测有无新消息出现。连接会保持一段时间周期直到数据或状态改变或者时间过期，通过这种机制来减少无效的客户端和服务器间的交互。</p>
<p>虽然长轮循比传统的轮询性能会有些提高，但在服务器端数据变化非常频繁的情况下，两者的性能并不能差多少，因为都是客户端先请求，服务器再响应，只是两者服务器端响应的机制不同。<br>下面来说说代码，服务器端我用的是php，客户端用的是jQuery</p>
<p>服务器端代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@desc</span> ajax长轮询 来获取通知消息信息</div><div class="line"> * <span class="doctag">@return</span> 通知信息数量&gt;o</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">longPolling</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!$_GET[<span class="string">'timed'</span>]) <span class="keyword">exit</span>();</div><div class="line">    date_default_timezone_set(<span class="string">"PRC"</span>);</div><div class="line">    session_write_close(); <span class="comment">//防止session访问互斥问题</span></div><div class="line">    set_time_limit(<span class="number">0</span>);<span class="comment">//无限请求超时时间</span></div><div class="line">    $timed = $_GET[<span class="string">'timed'</span>];</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        sleep(<span class="number">3</span>); <span class="comment">// 休眠3秒</span></div><div class="line">        <span class="comment">//判断有无新通知出现</span></div><div class="line">         $no_count=D(<span class="string">'Notifications'</span>)-&gt;getNotificationsCount(<span class="keyword">$this</span>-&gt;uid);</div><div class="line">         <span class="keyword">if</span> ($no_count&gt;<span class="number">0</span>) &#123;</div><div class="line">            $responseTime = time();</div><div class="line">            <span class="comment">// 返回数据信息，请求时间、返回数据时间、耗时</span></div><div class="line">            $content=<span class="keyword">array</span>(</div><div class="line">                <span class="string">'result'</span>         =&gt;$no_count,</div><div class="line">                <span class="string">'reponse_time'</span>   =&gt;$responseTime,</div><div class="line">                <span class="string">'request_time'</span>   =&gt;$timed,</div><div class="line">                <span class="string">'use_time'</span>       =&gt;($responseTime - $timed)</div><div class="line">            );</div><div class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;ajaxReturn($content);</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 模拟没有数据变化，将休眠 hold住连接</span></div><div class="line">            sleep(<span class="number">13</span>);</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>从服务器段代码可以看出，里面有个while(true){}死循环，只有有新信息或者连接失效时会退出循环。</p>
<p>客户端代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 消息的处理 递归调用</div><div class="line">	 */</div><div class="line">	 (<span class="function"><span class="keyword">function</span> <span class="title">longPolling</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">         $.ajax(&#123;  </div><div class="line">             <span class="attr">url</span>: MODULE+<span class="string">"/Notifications/longPoll"</span>,  </div><div class="line">             <span class="attr">data</span>: &#123;<span class="string">"timed"</span>: <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>())/<span class="number">1000</span>&#125;,  </div><div class="line">             <span class="attr">dataType</span>: <span class="string">"json"</span>,  </div><div class="line">             <span class="attr">timeout</span>: <span class="number">70000</span>,<span class="comment">//单位毫秒</span></div><div class="line">             error: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;  </div><div class="line"></div><div class="line">            	 <span class="keyword">if</span> (textStatus == <span class="string">"timeout"</span>) &#123; <span class="comment">// 请求超时  </span></div><div class="line">                     longPolling(); <span class="comment">// 递归调用  </span></div><div class="line">                 &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他错误，如网络错误等  </span></div><div class="line">                     longPolling();  </div><div class="line">                 &#125;  </div><div class="line">             &#125;,  </div><div class="line">             <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, textStatus</span>) </span>&#123;  </div><div class="line">                 <span class="comment">//此时已有消息过来了，将消息数量显示</span></div><div class="line">                 $(<span class="string">'.nav-counter'</span>).text(data.result);</div><div class="line">                 <span class="keyword">if</span> (textStatus == <span class="string">"success"</span>) &#123;</div><div class="line">                         <span class="comment">// 请求成功，继续请求</span></div><div class="line">                    longPolling();</div><div class="line">                 &#125;  </div><div class="line">             &#125;  </div><div class="line">         &#125;);  </div><div class="line"></div><div class="line">     &#125;)();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>客户端代码调用ajax进行处理，逻辑已经很清楚了。</p>
<p>以上就是我对long polling的理解，虽然长轮询较轮询有了不错的改进，但还是会消耗很多的服务器资源，并不是十分理想的网站消息推送方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站的消息推送功能应用很广泛，比如论坛，问答网站等等都需要推送消息，那么采用什么样的推送方式更加便捷，更加节省服务器资源呢，这个需要根据网站的流量和规模来决定，因为long polling是我最先接触到的，我就来谈谈它吧。&lt;/p&gt;
&lt;p&gt;长轮询初看像是轮流查询的意思，其实不是，它是客户端通过ajax发出请求，然后客户端挂起，等待服务器端响应，服务器端会检测有无新消息，如果有消息，服务器端会将新消息推送给客户端，结束本次请求，如果在有效请求期内没有新消息出现，那么会一直检测有无新消息出现。连接会保持一段时间周期直到数据或状态改变或者时间过期，通过这种机制来减少无效的客户端和服务器间的交互。&lt;/p&gt;
&lt;p&gt;虽然长轮循比传统的轮询性能会有些提高，但在服务器端数据变化非常频繁的情况下，两者的性能并不能差多少，因为都是客户端先请求，服务器再响应，只是两者服务器端响应的机制不同。&lt;br&gt;下面来说说代码，服务器端我用的是php，客户端用的是jQuery&lt;/p&gt;
&lt;p&gt;服务器端代码：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@desc&lt;/span&gt; ajax长轮询 来获取通知消息信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; 通知信息数量&amp;gt;o&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longPolling&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!$_GET[&lt;span class=&quot;string&quot;&gt;&#39;timed&#39;&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    date_default_timezone_set(&lt;span class=&quot;string&quot;&gt;&quot;PRC&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    session_write_close(); &lt;span class=&quot;comment&quot;&gt;//防止session访问互斥问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    set_time_limit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//无限请求超时时间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $timed = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;timed&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 休眠3秒&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//判断有无新通知出现&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         $no_count=D(&lt;span class=&quot;string&quot;&gt;&#39;Notifications&#39;&lt;/span&gt;)-&amp;gt;getNotificationsCount(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;uid);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($no_count&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $responseTime = time();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 返回数据信息，请求时间、返回数据时间、耗时&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $content=&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;         =&amp;gt;$no_count,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;reponse_time&#39;&lt;/span&gt;   =&amp;gt;$responseTime,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;request_time&#39;&lt;/span&gt;   =&amp;gt;$timed,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;use_time&#39;&lt;/span&gt;       =&amp;gt;($responseTime - $timed)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;ajaxReturn($content);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 模拟没有数据变化，将休眠 hold住连接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sleep(&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java多态学习</title>
    <link href="http://yoursite.com/2017/06/23/java%E5%A4%9A%E6%80%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/06/23/java多态学习/</id>
    <published>2017-06-23T12:46:18.001Z</published>
    <updated>2017-06-23T13:05:55.244Z</updated>
    
    <content type="html"><![CDATA[<p>在java多态中，引用与对象可以是不同的类型，如:</p>
<pre><code>A b=new B();
</code></pre><p>运用多态时，引用类型可以是实际对象类型的父类，即实际对象类型已经是一个比较具体的类，而引用类型则是一个比较抽象的类，任何extends过声明引用类型的对象都可以赋值给这个引用变量，这样就可以做出类似动态数组的东西，如下:</p>
<pre><code>Animal[] a=new Animal[2];
a[0]=new Dog();
a[1]=new Cat();
for(int i=0;i&lt;a.length;i++){
    a[i].eat();
}
</code></pre><p>a数组里面可以放任何Animal的子类对象，调用的时候可以把子类都当作Animal来操作，实际上调用的是子类的方法，是不是很好玩呢→_→</p>
<p>当然，多态的应用很广泛呢，参数和返回类型也可以多态，如下:</p>
<pre><code>class Vet{
   public void giveShot(Anmial a){

      a.makeNoise();
   }
}

class Pet{
   public void a(){
      Vet v=new Vet();
      Dog dog=new Dog();
      Cat cat=new Cat();
      v.giveShot(dog);
      v.giveShot(cat);
   }

}
</code></pre><p>giveShot会接受任何Animal的子类的对象实例，根据传入的参数不同，会调用不同对象的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在java多态中，引用与对象可以是不同的类型，如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A b=new B();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运用多态时，引用类型可以是实际对象类型的父类，即实际对象类型已经是一个比较具体的类，而引用类型则是一个比较抽象的类，任何extends
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>javaee 配置数据源后数据库连接未及时关闭出现的问题</title>
    <link href="http://yoursite.com/2017/06/23/javaee%20%20%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%9C%AA%E5%8F%8A%E6%97%B6%E5%85%B3%E9%97%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/javaee  配置数据源后数据库连接未及时关闭出现的问题/</id>
    <published>2017-06-23T12:43:01.662Z</published>
    <updated>2017-06-23T13:11:12.868Z</updated>
    
    <content type="html"><![CDATA[<p>我在配置要数据源后没有仔细检查我的代码，有些数据库连接没有及时关闭，报以下异常:</p>
<blockquote>
<p>org.apache.tomcat.dbcp.dbcp.SQLNestedException: Cannot get a connection, pool error Timeout waiting for idle objec</p>
</blockquote>
<p>这个异常产生的原因是在使用完数据库连接后没有及时关闭，导致数据库连接池的连接没有可供使用的连接，进而报异常。<br>解决的方法是检查代码，将数据库连接及时关闭，并且在context.xml文件中加上</p>
<blockquote>
<p>removeAbandoned=”true” removeAbandonedTimeout=”60”<br>logAbandoned=”true”</p>
</blockquote>
<p>这样就解决问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在配置要数据源后没有仔细检查我的代码，有些数据库连接没有及时关闭，报以下异常:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;org.apache.tomcat.dbcp.dbcp.SQLNestedException: Cannot get a connection, poo
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>javaee 配置Tomcat数据源问题</title>
    <link href="http://yoursite.com/2017/06/23/javaee%20%E9%85%8D%E7%BD%AETomcat%E6%95%B0%E6%8D%AE%E6%BA%90%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/javaee 配置Tomcat数据源问题/</id>
    <published>2017-06-23T12:42:10.365Z</published>
    <updated>2017-06-23T13:44:22.704Z</updated>
    
    <content type="html"><![CDATA[<p>最近用javaee写网站配置数据源时遇到了这个错误:</p>
<blockquote>
<p>java.lang.ClassCastException: org.apache.tomcat.dbcp.dbcp.PoolingDataSource$PoolGuardConnectionWrapper cannot be cast to com.mysql.jdbc.Connection</p>
</blockquote>
<p>经过我查看代码发现有些类中包导错了，涉及到数据库的包应该导入java.sql.*这个相关的，而我用ide自动导入为jdbc那个了，发生了类型不匹配问题，改掉就不会报这个错了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用javaee写网站配置数据源时遇到了这个错误:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.lang.ClassCastException: org.apache.tomcat.dbcp.dbcp.PoolingDataSource$PoolGuardConne
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>php json_encode函数使用遇到的问题</title>
    <link href="http://yoursite.com/2017/06/23/php%20%20json_encode%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/php  json_encode函数使用遇到的问题/</id>
    <published>2017-06-23T12:35:53.852Z</published>
    <updated>2017-09-24T04:56:02.204Z</updated>
    
    <content type="html"><![CDATA[<p>在php中有一个函数可以将数组转化为json数据存储格式，这个函数就是json_encode<br>但在使用这个函数时转化的格式不一致，比如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//关联二位数组</span></div><div class="line">$a2=<span class="keyword">array</span>(    </div><div class="line">  <span class="string">'1'</span>=&gt;<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'john'</span>,<span class="string">'age'</span>=&gt;<span class="string">'32'</span>),</div><div class="line">  <span class="string">'2'</span>=&gt;<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'tom'</span>,<span class="string">'age'</span>=&gt;<span class="string">'22'</span>)</div><div class="line">);</div><div class="line">$json2=json_encode($a2);</div><div class="line"><span class="keyword">echo</span> $json2.<span class="string">"&lt;br&gt;"</span>; <span class="comment">//&#123;"1":&#123;"name":"john","age":"32"&#125;,"2":&#123;"name":"tom","age":"22"&#125;&#125;</span></div><div class="line"><span class="comment">//索引二维数组</span></div><div class="line">$a3=<span class="keyword">array</span>(</div><div class="line">   <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'zz'</span>,<span class="string">'age'</span>=&gt;<span class="string">'31'</span>),</div><div class="line">   <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'we'</span>,<span class="string">'AGE'</span>=&gt;<span class="string">'12'</span>)</div><div class="line">  );</div><div class="line"> $json3=json_encode($a3);</div><div class="line"> <span class="keyword">echo</span> $json3.<span class="string">"&lt;br&gt;"</span>;<span class="comment">//[&#123;"name":"zz","age":"31"&#125;,&#123;"name":"we","AGE":"12"&#125;]</span></div></pre></td></tr></table></figure></p>
<p>关联二维数组和索引二维数组转化为json数据格式不同，这时在前台用js解析json的时候就有差别</p>
<ul>
<li>对于关联数组生成的json数据格式 ，在前台直接用js的eval()将其转化为json对象，然后根据{key:value}取值</li>
<li>对于索引数组生成的json数据格式，用js的eval()转为json对象后，由于[]代表数组格式，所以遇到[]还是按照数组取值，遇到{key:value}这种形式的按照对象取值就行了</li>
</ul>
<p>当数组维数多的时候需要根据转换后的json数据格式用js进行相应的解析，避免出错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在php中有一个函数可以将数组转化为json数据存储格式，这个函数就是json_encode&lt;br&gt;但在使用这个函数时转化的格式不一致，比如：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>关于首页feed流如何展示和数据库如何设计问题</title>
    <link href="http://yoursite.com/2017/06/23/%E5%85%B3%E4%BA%8E%E9%A6%96%E9%A1%B5feed%E6%B5%81%E5%A6%82%E4%BD%95%E5%B1%95%E7%A4%BA%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/23/关于首页feed流如何展示和数据库如何设计问题/</id>
    <published>2017-06-23T12:34:14.034Z</published>
    <updated>2017-06-23T13:10:23.028Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个简单的问答网站，首页的内容需要根据用户关注的话题和关注的问题等来展示最新的动态信息，刚开始的时候我想数据库表的设计是关键。</p>
<p>这里涉及到两个概念 <strong>推模式（push）</strong>和<strong>拉模式（pull）</strong>，这里有两篇大神分享的知识<a href="http://blog.sina.com.cn/s/blog_53b95aec0100ujim.html" target="_blank" rel="external"> 新浪微博架构和FEED架构分析–人人架构<em>paper0023</em>新浪博客</a>和<a href="http://www.cnblogs.com/sunli/archive/2010/08/24/twitter_feeds_push_pull.html" target="_blank" rel="external">微博feed系统的推(push)模式和拉(pull)模式和时间分区拉模式架构探讨</a>，讲解的比较清楚</p>
<blockquote>
<p>简单来说，什么是推，什么是拉呢？</p>
</blockquote>
<ol>
<li><strong>推模式</strong>是一个用户发表了一条动态，那么后台就遍历关注该用户的所有用户，向他们的feed中推送一条动态</li>
<li><strong>拉模式</strong>与推模式相反，当用户刷新首页时，后台会遍历该用户关注的用户的动态信息，并将动态信息压入到该用户的feed中</li>
</ol>
<p>简单介绍完推拉模式后，下面就要考虑数据库表该怎么设计了，我采用的是最简单的推模式，毕竟新手嘛，先掌握实现流程。</p>
<hr>
<p>首先设计feed表，这里我设计一个feed表来存储推送的信息，该表主要有以下几个字段</p>
<ul>
<li>id  自增id</li>
<li>suid  推送者uid</li>
<li>ruid  接收者uid</li>
<li>item_id  推送的信息id</li>
<li>type   推送信息类型</li>
<li>add_time  推送时间</li>
</ul>
<p>这是我感觉很简单的feed表，毕竟我那个问答站推送类型不是太多，当然还需要为这个表设计索引哦。<br>设计完数据库表后，下面该考虑后台推送逻辑和代码如何实现以及前台首页如何渲染feed流信息。</p>
<hr>
<p>后台我用的是PHP的ThinkPHP框架，新手表示该框架很好用，用该框架可以快速实现的我的想法，我感觉这一点还是很好的。首先在推送类型的选择中我选择了以下几种推送类型</p>
<ul>
<li>当一个话题下有新话题发起时，推送给关注该话题的用户</li>
<li>当一个问题有回答时，推送给关注该问题的用户</li>
<li>当一个话题的问题有新回答时，推送给关注该话题的用户</li>
</ul>
<p>上面推送过程中会产生大量的重复信息，所以需要在推送时对推送信息进行过滤，以避免重复的推送信息出现。代码就是当上面的推送类型产生时，将信息写入到feed表中，这里并没有对推送用户进行筛选（对推送用户的筛选可以降低数据库的压力）。</p>
<p>前台渲染的话需要对信息进行排序整合，并对每一条动态信息进行标记，以便在模板渲染时匹配对应的模板。<br>我写的简单部分整合代码，需要对信息进行遍历整合（这里没写）</p>
<pre><code> //如果推送类型 为a  则代表推送信息类型为  用户关注的话题有关的问题或关注的问题产生的回答
 $aid=$val[&apos;item_id&apos;];
 /**根据回答id获取获取与此回答有关的信息**/
 //获取推送人的uid
 $suid=$val[&apos;suid&apos;];
 //获取当前用户对回答的赞同状态
 $upvote_status=$this-&gt;getUpvoteStatusByAid($aid, $uid);
//获取feed流 回答信息
 $a_info_all=$this-&gt;getFeedAnswerInfo($aid);
 $question_id=$a_info_all[0][&apos;question_id&apos;];
 //根据问题id获取与此问题相关的话题信息
 $tinfo_a=D(&apos;Topic&apos;)-&gt;getFeedTopicByQuestion($question_id);
 //将话题信息追加到回答信息数组中
 $a_info_all[0][&apos;topic&apos;]= $tinfo_a;
 //将当前用户对回答的赞同状态最佳到信息数组中
 $a_info_all[0][&apos;upvote_status&apos;]=$upvote_status;
 //将整理后的信息添加到feed数组中，并做一个标记 a,以便在模板中判断解析
 $arr_fd[&apos;answer&apos;]=$a_info_all;
 $arr_fd[&apos;feed_flag&apos;]=&apos;a&apos;;
 $feed_return_arr[]=  $arr_fd;
</code></pre><p>这里 $feed_return_arr[]是一个三维数组，在模板渲染的时候要注意一下。<br><a id="more"></a><br>上面是我对feed流简单的思考，如果是真实网络环境下这种简单的实现有许多大问题，比如feed表数据量过大，是否设定一个时间阀对表中超过该时间阀的推送信息进行删除以减少feed表的记录量等等。所以这种方式并不适合真实的网络环境，需要将推拉模式结合进行使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个简单的问答网站，首页的内容需要根据用户关注的话题和关注的问题等来展示最新的动态信息，刚开始的时候我想数据库表的设计是关键。&lt;/p&gt;
&lt;p&gt;这里涉及到两个概念 &lt;strong&gt;推模式（push）&lt;/strong&gt;和&lt;strong&gt;拉模式（pull）&lt;/strong&gt;，这里有两篇大神分享的知识&lt;a href=&quot;http://blog.sina.com.cn/s/blog_53b95aec0100ujim.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; 新浪微博架构和FEED架构分析–人人架构&lt;em&gt;paper0023&lt;/em&gt;新浪博客&lt;/a&gt;和&lt;a href=&quot;http://www.cnblogs.com/sunli/archive/2010/08/24/twitter_feeds_push_pull.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博feed系统的推(push)模式和拉(pull)模式和时间分区拉模式架构探讨&lt;/a&gt;，讲解的比较清楚&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说，什么是推，什么是拉呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;推模式&lt;/strong&gt;是一个用户发表了一条动态，那么后台就遍历关注该用户的所有用户，向他们的feed中推送一条动态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拉模式&lt;/strong&gt;与推模式相反，当用户刷新首页时，后台会遍历该用户关注的用户的动态信息，并将动态信息压入到该用户的feed中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单介绍完推拉模式后，下面就要考虑数据库表该怎么设计了，我采用的是最简单的推模式，毕竟新手嘛，先掌握实现流程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先设计feed表，这里我设计一个feed表来存储推送的信息，该表主要有以下几个字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id  自增id&lt;/li&gt;
&lt;li&gt;suid  推送者uid&lt;/li&gt;
&lt;li&gt;ruid  接收者uid&lt;/li&gt;
&lt;li&gt;item_id  推送的信息id&lt;/li&gt;
&lt;li&gt;type   推送信息类型&lt;/li&gt;
&lt;li&gt;add_time  推送时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是我感觉很简单的feed表，毕竟我那个问答站推送类型不是太多，当然还需要为这个表设计索引哦。&lt;br&gt;设计完数据库表后，下面该考虑后台推送逻辑和代码如何实现以及前台首页如何渲染feed流信息。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;后台我用的是PHP的ThinkPHP框架，新手表示该框架很好用，用该框架可以快速实现的我的想法，我感觉这一点还是很好的。首先在推送类型的选择中我选择了以下几种推送类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个话题下有新话题发起时，推送给关注该话题的用户&lt;/li&gt;
&lt;li&gt;当一个问题有回答时，推送给关注该问题的用户&lt;/li&gt;
&lt;li&gt;当一个话题的问题有新回答时，推送给关注该话题的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面推送过程中会产生大量的重复信息，所以需要在推送时对推送信息进行过滤，以避免重复的推送信息出现。代码就是当上面的推送类型产生时，将信息写入到feed表中，这里并没有对推送用户进行筛选（对推送用户的筛选可以降低数据库的压力）。&lt;/p&gt;
&lt;p&gt;前台渲染的话需要对信息进行排序整合，并对每一条动态信息进行标记，以便在模板渲染时匹配对应的模板。&lt;br&gt;我写的简单部分整合代码，需要对信息进行遍历整合（这里没写）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; //如果推送类型 为a  则代表推送信息类型为  用户关注的话题有关的问题或关注的问题产生的回答
 $aid=$val[&amp;apos;item_id&amp;apos;];
 /**根据回答id获取获取与此回答有关的信息**/
 //获取推送人的uid
 $suid=$val[&amp;apos;suid&amp;apos;];
 //获取当前用户对回答的赞同状态
 $upvote_status=$this-&amp;gt;getUpvoteStatusByAid($aid, $uid);
//获取feed流 回答信息
 $a_info_all=$this-&amp;gt;getFeedAnswerInfo($aid);
 $question_id=$a_info_all[0][&amp;apos;question_id&amp;apos;];
 //根据问题id获取与此问题相关的话题信息
 $tinfo_a=D(&amp;apos;Topic&amp;apos;)-&amp;gt;getFeedTopicByQuestion($question_id);
 //将话题信息追加到回答信息数组中
 $a_info_all[0][&amp;apos;topic&amp;apos;]= $tinfo_a;
 //将当前用户对回答的赞同状态最佳到信息数组中
 $a_info_all[0][&amp;apos;upvote_status&amp;apos;]=$upvote_status;
 //将整理后的信息添加到feed数组中，并做一个标记 a,以便在模板中判断解析
 $arr_fd[&amp;apos;answer&amp;apos;]=$a_info_all;
 $arr_fd[&amp;apos;feed_flag&amp;apos;]=&amp;apos;a&amp;apos;;
 $feed_return_arr[]=  $arr_fd;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里 $feed_return_arr[]是一个三维数组，在模板渲染的时候要注意一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/06/23/hello-world/"/>
    <id>http://yoursite.com/2017/06/23/hello-world/</id>
    <published>2017-06-23T10:10:30.045Z</published>
    <updated>2017-06-23T10:10:30.045Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdown-01</title>
    <link href="http://yoursite.com/2017/06/22/markdown-01/"/>
    <id>http://yoursite.com/2017/06/22/markdown-01/</id>
    <published>2017-06-22T07:44:07.000Z</published>
    <updated>2017-06-22T08:46:20.940Z</updated>
    
    <content type="html"><![CDATA[<p><em>试试一下markdowm</em></p>
<h2 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h2><ol>
<li>这是第一行列表项</li>
<li>这是第二行列表项</li>
</ol>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre>
*   Red
*   Green
*   Blue
</pre>
等同于：
<pre>
+   Red
+   Green
+   Blue
</pre>
也等同于：
<pre>
-   Red
-   Green
-   Blue
</pre>
有序列表则使用数字接着一个英文句点：
<pre>
1.  Bird
2.  McHale
3.  Parish
</pre>

<h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>markdown使用<pre></pre><code></code> 来将代码包裹起来</p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr>
<hr>
<hr>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;helllo world&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[This link](http://example.net/) has no title attribute.</div></pre></td></tr></table></figure>
<p><a href="http://example.net/" target="_blank" rel="external">This link</a> has no title attribute.</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 <em> 包围的字词会被转成用 <em> 标签包围，用两个 * 或 </em> 包起来的话，则会被转成 <strong>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*single asterisks*</div><div class="line"></div><div class="line">_single underscores_</div><div class="line"></div><div class="line">**double asterisks**</div><div class="line"></div><div class="line">__double underscores__</div></pre></td></tr></table></figure></strong></em></p>
<p>会转成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;em&gt;single asterisks&lt;/em&gt;</div><div class="line"></div><div class="line">&lt;em&gt;single underscores&lt;/em&gt;</div><div class="line"></div><div class="line">&lt;strong&gt;double asterisks&lt;/strong&gt;</div><div class="line"></div><div class="line">&lt;strong&gt;double underscores&lt;/strong&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;试试一下markdowm&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;这是一个标题&quot;&gt;&lt;a href=&quot;#这是一个标题&quot; class=&quot;headerlink&quot; title=&quot;这是一个标题&quot;&gt;&lt;/a&gt;这是一个标题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;这是第一行列表项&lt;/li&gt;
&lt;li&gt;这
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
