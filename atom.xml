<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mingshan&#39;s Blog</title>
  <subtitle>一念开明，反身而诚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-05T03:58:23.907Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mingshan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Docker搭建Nexus3私服</title>
    <link href="http://yoursite.com/2018/08/05/%E5%88%A9%E7%94%A8Docker%E6%90%AD%E5%BB%BANexus3%E7%A7%81%E6%9C%8D/"/>
    <id>http://yoursite.com/2018/08/05/利用Docker搭建Nexus3私服/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T03:58:23.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建私服对于一个团队来说十分有必要，利用Nexus3搭建私服十分方便，结合Docker，那是相当快速。</p>
<a id="more"></a>
<h2 id="安装Nexus3"><a href="#安装Nexus3" class="headerlink" title="安装Nexus3"></a>安装Nexus3</h2><p>拉取Nexus3的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull sonatype/nexus3</div></pre></td></tr></table></figure>
<p>创建文件夹，挂载目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /var/nexus-data &amp;&amp; chown -R 200 /var/nexus-data</div></pre></td></tr></table></figure></p>
<p>启动容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 8081:8081 --name nexus -v /var/nexus-data:/nexus-data --restart=always sonatype/nexus3</div></pre></td></tr></table></figure>
<p>开启端口</p>
<p>如果让外网访问的话，需要开放8081端口，在CentOS7中，可以利用firewall-cmd来开放端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#开放11001端口  permanent为永久开放</div><div class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent</div><div class="line">#重新读取配置</div><div class="line">firewall-cmd --reload</div><div class="line">#查看全部开放端口</div><div class="line">firewall-cmd --list-all</div></pre></td></tr></table></figure>
<p>接下来在浏览器中输入以下网址，就可以看到Nexus3界面了如下图所示，用户名和密码默认为admin，admin123</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://ip:port</div></pre></td></tr></table></figure>
<p><img src="/images/nexus3-dashboard.png" alt="image"></p>
<h2 id="配置阿里云仓库"><a href="#配置阿里云仓库" class="headerlink" title="配置阿里云仓库"></a>配置阿里云仓库</h2><p>启动Nexus后，需要将中央仓库配置为阿里云仓库，提高国内的访问速度。Nexus的仓库如下：</p>
<p><img src="/images/nexus3-repository.png" alt="image"></p>
<p>由上图看出，Nexus的仓库分为这么几类：</p>
<ul>
<li>hosted 宿主仓库：主要用于部署无法从公共仓库获取的包以及自己或第三方的包；</li>
<li>proxy 代理仓库：代理公共的远程仓库；</li>
<li>group 仓库组：Nexus 通过仓库组的概念统一管理多个仓库，这样我们在项目中直接请求仓库组即可请求到仓库组管理的多个仓库。</li>
</ul>
<p>示意图如下：</p>
<p><img src="/images/nexus3-repository-desc.png" alt="image"></p>
<p>现在点击“Create Repository”按钮，来添加阿里云仓库，Recipe选择<code>maven2(proxy)</code>，在具体配置页面取名aliyun-repository，这里建议用a开头(估计按字母排序将它排第一位)，URL输入：<code>http://maven.aliyun.com/nexus/content/groups/public/</code>，其他默认值即可。</p>
<h2 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h2><p>接下来我们需要配置maven，打开setting.xml文件，在mirrors节点下加入以下配置（根据自己的配置更改）：</p>
<p>将<code>&lt;mirror&gt;&lt;url&gt;</code>标签内的地址修改成nexus服务的地址。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.mingzhiwen.cn:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在services节点下加入以下配置，<code>&lt;servers&gt;</code>标签内填写nexus服务的账号密码，发布maven项目到nexus时，需要用到。<code>&lt;server&gt;&lt;id&gt;</code>下id需要跟<code>&lt;mirror&gt;&lt;id&gt;</code>一致。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后在项目中的<code>pom.xml</code>文件加入以下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://&#123;your-nexus-ip&#125;:port/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://&#123;your-nexus-ip&#125;:port/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行maven命令，将编译好的Jar包上传到Nexus私服中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean deploy</div></pre></td></tr></table></figure>
<p>上传效果如下图所示：</p>
<p><img src="/images/nexus3-upload.png" alt="image"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/dbeae430f29d" target="_blank" rel="external">https://www.jianshu.com/p/dbeae430f29d</a></li>
<li><a href="https://github.com/sonatype/docker-nexus3" target="_blank" rel="external">https://github.com/sonatype/docker-nexus3</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建私服对于一个团队来说十分有必要，利用Nexus3搭建私服十分方便，结合Docker，那是相当快速。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Nexus3" scheme="http://yoursite.com/tags/Nexus3/"/>
    
  </entry>
  
  <entry>
    <title>像是昨天</title>
    <link href="http://yoursite.com/2018/08/01/%E5%83%8F%E6%98%AF%E6%98%A8%E5%A4%A9/"/>
    <id>http://yoursite.com/2018/08/01/像是昨天/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2018-08-02T16:12:12.212Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>半夜醒来，想起前尘往事，遂成比文。我一写东西大多是唠叨，夹杂着些许不成熟的想法，姑且记录下来吧。</p>
<a id="more"></a>
<p>2016年7月，我的好朋友给我打了个电话让我去武汉玩，从此我真切感受到世界的另一面。本来不想把这些东西写成文章记录下来，但一直在心中憋着，就像一团结在心中缠绕，勒得心中直疼。再加上最近另一个好朋友也遇到此事，自己却没帮上什么忙。虽说自己也不懂什么大道理，说不出让人顿悟警醒的话，但基本的做人做事原则我还是能说上两句。时隔两年，心中除了惆怅和遗憾，还多了些许的无助感。</p>
<p>那么，2016年7月我遇到了什么事情呢？我遇到了所谓被称为传销的东西。传销这个词现在被人说烂了，我们没接触过的人听到这个词不会大惊小怪，新闻经常报道，即使是里面的人，直接会拿这个词给你说道说道，用他们的一套说辞来给你解释这个东西，直到你信以为真。千万不要小看这个让你信以为真的过程，这个过程被称为洗脑，这个词也是很常见，他们用所谓的大道理，所谓的说了一百遍都狗屁不是的话让你确认他们说的是真理，是赚钱迈向成功的一条猛路子，以便达到他们不可告人、见不得光的目地。很多事情在暗地里表面上看起来还是那么一回事，但真正剖析这件事的前因后果，可能发现原来多美好的一件事情，背后指不定有什么道道。虽然结果令人沮丧，但还是要认真面对，因为这是对你人生成长极大的考验，不得不头脑清醒些。</p>
<p>才去的时候挺开心的，毕竟暑假没事在家待着无聊，出去转转散散心也挺好。当我好朋友带我去听人生中第一堂洗脑课时，整个人瞬间一愣，这是在讲什么，这么短时间就能赚这么多钱，不会是传销吧，这时我意识到我朋友可能被人拉进了传销。不过整个过程我十分镇定，依然笑容满面，谈笑风生，一点也没让人看出我内心的慌乱和翻腾。其实我内心早已翻江倒海了，我知道我是清醒的，我在听些什么，但我不确定我朋友内心此时是怎么想的，或者说我已经知道朋友内心是怎么想的，不过这是我最不愿看到的。但事实就是那么残酷，越不想相信的事情，现实就会逼着你去相信。但我看到我朋友坚定的眼神，决心似乎很大，这让我不由得担心起来了。我想劝劝我朋友，早日脱离苦海，但我们终是凡人，谁又能成了佛。</p>
<p>我接触了很多年纪轻轻的从业者，我始终相信他们是善良的，他们是被那些心中怀着鬼胎的垃圾利用了，被那些人操纵着思想，给他们一个光明的目标，他们就以为看到了太阳的曙光。不过他们又有什么错呢？他们只是想赚钱，或许是凭借着自己的“努力”吧，可惜努力用错了地方，光明也不是纯粹的光明。以前我最痛恨的是利用他人的无知来谋取利益，现在呢？把你思想先改变了，再利用你来赚钱，这是最无耻的，也是悄无声息的，所以很多人不知不觉走上了这样的道路，真是可惜可叹。</p>
<p>我不想发那么多的牢骚，因为没什么意思，但我还是愿意不厌其烦地告诫那么不愿意脚踏实地的同学，天下没那么多好事，不要以为自己走了好运而沾沾自喜，那很有可能是别人挖好了坑等着你跳。我们还太年轻，虽说吃点亏不算什么，但不能因为这个坑而改变了自己的所有。人时有穷尽，力所不能及，还是多想想吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半夜醒来，想起前尘往事，遂成比文。我一写东西大多是唠叨，夹杂着些许不成熟的想法，姑且记录下来吧。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>构建一个Tomcat的Docker镜像</title>
    <link href="http://yoursite.com/2018/07/28/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AATomcat%E7%9A%84Docker%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2018/07/28/构建一个Tomcat的Docker镜像/</id>
    <published>2018-07-27T16:00:00.000Z</published>
    <updated>2018-07-28T15:25:40.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在看Docker，对一个事物由陌生到熟悉需要一个过程，而这个过程需要从动手实践开始，下面记录一下我从零开始构建centos7+jdk8+tomcat8.5的docker镜像。</p>
<a id="more"></a>
<p><img src="/images/docker.png" alt="image"></p>
<h2 id="CentOS7-Docker-安装"><a href="#CentOS7-Docker-安装" class="headerlink" title="CentOS7 Docker 安装"></a>CentOS7 Docker 安装</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker。<br>通过 uname -r 命令查看你当前的内核版本 </p>
<p>利用yum安装docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install docker-io</div></pre></td></tr></table></figure>
<p>安装完成后，启动docker服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker start</div></pre></td></tr></table></figure>
<p>测试一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run hello-world</div></pre></td></tr></table></figure>
<h2 id="准备文件和构建环境"><a href="#准备文件和构建环境" class="headerlink" title="准备文件和构建环境"></a>准备文件和构建环境</h2><p>本次需要构建Tomcat的Docker镜像，所以需要Tomcat和JDK安装包，版本分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apache-tomcat-8.5.32.tar.gz</div><div class="line"></div><div class="line">jdk-8u172-linux-x64.tar.gz</div></pre></td></tr></table></figure>
<p>创建<code>/usr/docker-tomcat</code>文件夹，将以上两个文件解压到该文件夹中，分别重命名为tomcat和jdk文件夹。</p>
<p>创建<code>Dockerfile</code>和<code>run.sh</code>两个文件，最终<code>/usr/docker-tomcat</code>文件夹内容如下图所示：</p>
<p><img src="/images/docker-tomcat-folder.png" alt="image"></p>
<p>编辑<code>Dockerfile</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim Dockerfile</div></pre></td></tr></table></figure>
<p>向该文件添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># 设置继承的镜像</div><div class="line">FROM registry.cn-hangzhou.aliyuncs.com/repos_zyl/centos:0.0.1</div><div class="line"></div><div class="line"># 创建者信息</div><div class="line">MAINTAINER mingshan &quot;walkerhan@126.com&quot;</div><div class="line"></div><div class="line"># 设置环境变量，所有操作都是非交互式的</div><div class="line">ENV DEBIAN_FRONTEND noninteractive</div><div class="line"></div><div class="line"># 设置tomcat的环境变量</div><div class="line">ENV CATALINA_HOME /tomcat</div><div class="line">ENV JAVA_HOME /jdk</div><div class="line"></div><div class="line"># 复制tomcat和jdk文件到镜像中</div><div class="line">ADD apache-tomcat /tomcat</div><div class="line">ADD jdk /jdk</div><div class="line"></div><div class="line"># 复制启动脚本至镜像，并赋予脚本可执行权限</div><div class="line">ADD run.sh /run.sh</div><div class="line">RUN chmod +x /*.sh</div><div class="line">RUN chmod +x /tomcat/bin/*.sh</div><div class="line"></div><div class="line"># 暴露接口8080，这是我的tomcat接口，默认为8080</div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line"># 设置自启动命令</div><div class="line">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure>
<p>保存后，然后编辑<code>run.sh</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim run.sh</div></pre></td></tr></table></figure>
<p>添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># 启动tomcat</div><div class="line">exec $&#123;CATALINA_HOME&#125;/bin/catalina.sh run</div></pre></td></tr></table></figure>
<p>保存后接下来就开始构建docker镜像文件</p>
<h2 id="构建docker镜像文件"><a href="#构建docker镜像文件" class="headerlink" title="构建docker镜像文件"></a>构建docker镜像文件</h2><p>我们可以利用<code>docker build</code>来构建Docker镜像，<br>-t 设置tag名称, 命名规则registry/image:tag<br>. 表示使用当前目录下的Dockerfile文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t tomcat:test .</div></pre></td></tr></table></figure>
<p>执行该命令后，Docker就会按照Dockerfile文件顺序执行，会有很多步骤，下面是输出日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">Sending build context to Docker daemon 403.1 MB</div><div class="line">Step 1/12 : FROM registry.cn-hangzhou.aliyuncs.com/repos_zyl/centos:0.0.1</div><div class="line"> ---&gt; e1e65df66640</div><div class="line">Step 2/12 : MAINTAINER mingshan &quot;walkerhan@126.com&quot;</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; f030a7c09868</div><div class="line">Step 3/12 : ENV DEBIAN_FRONTEND noninteractive</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; ef3f61db3034</div><div class="line">Step 4/12 : ENV CATALINA_HOME /tomcat</div><div class="line"> ---&gt; Running in 5145fe0de0d1</div><div class="line"> ---&gt; 9a4af98c3434</div><div class="line">Removing intermediate container 5145fe0de0d1</div><div class="line">Step 5/12 : ENV JAVA_HOME /jdk</div><div class="line"> ---&gt; Running in 8bac05b87945</div><div class="line"> ---&gt; f5b7eb8d180e</div><div class="line">Removing intermediate container 8bac05b87945</div><div class="line">Step 6/12 : ADD tomcat /tomcat</div><div class="line"> ---&gt; d68a1754c19e</div><div class="line">Removing intermediate container 29f7625a6b95</div><div class="line">Step 7/12 : ADD jdk /jdk</div><div class="line"> ---&gt; df1669bd68de</div><div class="line">Removing intermediate container dc7de6c936fa</div><div class="line">Step 8/12 : ADD run.sh /run.sh</div><div class="line"> ---&gt; 90a13284ec01</div><div class="line">Removing intermediate container 5bf2c6666a03</div><div class="line">Step 9/12 : RUN chmod +x /*.sh</div><div class="line"> ---&gt; Running in 7f22e7927ffb</div><div class="line"></div><div class="line"> ---&gt; 10fff91bfa16</div><div class="line">Removing intermediate container 7f22e7927ffb</div><div class="line">Step 10/12 : RUN chmod +x /tomcat/bin/*.sh</div><div class="line"> ---&gt; Running in 163f103fcc0a</div><div class="line"></div><div class="line"> ---&gt; da593ceeaa49</div><div class="line">Removing intermediate container 163f103fcc0a</div><div class="line">Step 11/12 : EXPOSE 8080</div><div class="line"> ---&gt; Running in d66d686928fe</div><div class="line"> ---&gt; e2d7f915335a</div><div class="line">Removing intermediate container d66d686928fe</div><div class="line">Step 12/12 : CMD /run.sh</div><div class="line"> ---&gt; Running in a7f9d1e9c9a0</div><div class="line"> ---&gt; a21030de3aac</div><div class="line">Removing intermediate container a7f9d1e9c9a0</div><div class="line">Successfully built a21030de3aac</div></pre></td></tr></table></figure>
<p>构建完成后，就可以启动容器啦</p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>我们利用<code>docker run</code>来新建并启动容器，这个命令有很多参数，-d: 后台运行容器，并返回容器ID；-p: 端口映射，格式为：主机(宿主)端口:容器端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 11001:8080 tomcat:test</div></pre></td></tr></table></figure>
<p>然后使用 <code>docker ps</code> 命令查看正在运行的容器，如下图所示：</p>
<p><img src="/images/docker-tomcat-ps.png" alt="image"></p>
<h3 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h3><p>如果让外网访问的话，需要开放11001端口，在CentOS7中，可以利用firewall-cmd来开放端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#开放11001端口  permanent为永久开放</div><div class="line">firewall-cmd --zone=public --add-port=11001/tcp --permanent</div><div class="line">#重新读取配置</div><div class="line">firewall-cmd --reload</div><div class="line">#查看全部开放端口</div><div class="line">firewall-cmd --list-all</div></pre></td></tr></table></figure>
<p>接下来就可在浏览器中看到Tomcat界面了，大功告成！</p>
<p><img src="/images/docke-tomcat-showpage.png" alt="image"></p>
<h3 id="镜像保存为本地离线文件"><a href="#镜像保存为本地离线文件" class="headerlink" title="镜像保存为本地离线文件"></a>镜像保存为本地离线文件</h3><p>将docker image保存为离线的本地文件，执行<code>docker save image_name &gt; ./save.tar</code>或者 <code>docker save -o filepath image_name</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@VM_0_6_centos docker-tocmat]# docker images</div><div class="line">REPOSITORY                                           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">tomcat                                               test                a21030de3aac        2 hours ago         593 MB</div><div class="line">registry.cn-hangzhou.aliyuncs.com/repos_zyl/centos   0.0.1               e1e65df66640        19 months ago       192 MB</div><div class="line">[root@VM_0_6_centos docker-tocmat]# docker save a21030de3aac &gt; ./up_tomcat.tar</div><div class="line">[root@VM_0_6_centos docker-tocmat]# ls</div><div class="line">Dockerfile  jdk  run.sh  tomcat  up_tomcat.tar</div></pre></td></tr></table></figure>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ol>
<li>停止容器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop tomcat:test</div></pre></td></tr></table></figure>
<ol>
<li>启动容器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start tomcat:test</div></pre></td></tr></table></figure>
<ol>
<li>删除容器</li>
</ol>
<p>删除一个容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm 278636f577a6</div></pre></td></tr></table></figure></p>
<p>停用全部运行中的容器:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps -q)</div></pre></td></tr></table></figure>
<p>删除全部容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm $(docker ps -aq)</div></pre></td></tr></table></figure>
<p>一条命令实现停用并删除容器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</div></pre></td></tr></table></figure>
<ol>
<li>删除镜像</li>
</ol>
<p>删除镜像需要先删除使用该镜像的容器，然后再删除镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi 3ae3626adcfa</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.jianshu.com/p/369e75f6303b" target="_blank" rel="external">https://www.jianshu.com/p/369e75f6303b</a></li>
<li><a href="https://www.cnblogs.com/zhouyalei/p/6390963.html" target="_blank" rel="external">https://www.cnblogs.com/zhouyalei/p/6390963.html</a></li>
<li><a href="http://www.dockerinfo.net/docker%e5%ae%b9%e5%99%a8-2" target="_blank" rel="external">http://www.dockerinfo.net/docker%e5%ae%b9%e5%99%a8-2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看Docker，对一个事物由陌生到熟悉需要一个过程，而这个过程需要从动手实践开始，下面记录一下我从零开始构建centos7+jdk8+tomcat8.5的docker镜像。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hashtable结构分析</title>
    <link href="http://yoursite.com/2018/07/16/Hashtable%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/07/16/Hashtable结构分析/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2018-07-16T14:50:35.730Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈希表（Hash Table，也叫散列表），是存储键值对（key-value）的数据结构，主要利用hash算法将key映射到表中，以便加快查找速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。对于数组而言，查找数据容易，但添加删除数据比较慢；对于链表来说，添加删除数据容易，但查找数据比较慢，所以哈希表结合数据和链表来实现数据快速的存取。</p>
<p>哈希表的实现主要需要解决两个问题，哈希函数和冲突解决。</p>
<a id="more"></a>
<h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>在哈希表内部，使用桶（bucket）来保存键值对，数组索引即为桶号，哈希函数决定了给定的键存于散列表的哪个桶中，例如下面的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index = f(key, array_size)</div></pre></td></tr></table></figure>
<p>其中需要先通过key计算hash值，然后再利用算法计算出index，在维基百科中，有如下介绍：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hash = hashfunc(key)</div><div class="line">index = hash % array_size</div></pre></td></tr></table></figure>
<p>哈希函数和计算index的算法可以有很多种实现，但最终目的是能够均匀并独立地将所有的键散布在数组范围内。</p>
<h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><p>即使采用的哈希算法能够使键值均匀分布，但避免不了“碰撞”的出现，当两个不同的键值产生了相同值，这时就需要解决冲突。</p>
<p>解决冲突有很多种方法，比如拉链法和开地址法，这里主要分析拉链法的具体实现。</p>
<p>采用拉链法的哈希表，每个桶里都存放了一个链表。初始时所有链表均为空，当一个键被散列到一个桶时，这个键就成为相应桶中链表的首结点，之后若再有一个键被散列到这个桶（即发生碰撞），第二个键就会成为链表的第二个结点，以此类推。采用拉链法解决冲突的哈希表如下图所示：</p>
<p><img src="https://github.com/ZZULI-TECH/interview/blob/master/images/hashtable.png?raw=true" alt="image"></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>对于哈希表而言，主要有增，删，获取操作，我们先来定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>;</div><div class="line">      <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>;</div><div class="line">      <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K k)</span></span>;</div><div class="line"></div><div class="line">      <span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</div><div class="line">          <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>;</div><div class="line">          <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Map接口中，定义了三个方法<code>put</code>，<code>get</code>，<code>remove</code>三个方法，同时定义了一个内部接口Entry，用来表示key-value结构。</p>
<p>接下来我们就采用拉链法来实现上面的接口。首先定义一下常量，成员变量以及在类的构造函数初始化一些数据代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认大小</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"><span class="comment">// 默认负载因子</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"><span class="comment">// 定义数组大小</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> length;</div><div class="line"><span class="comment">// 扩容标准 所使用的数组数量/数组长度 &gt; 0.75</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> loadFactor;</div><div class="line"><span class="comment">// 使用数组位置的总量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> useSize;</div><div class="line"><span class="comment">// 定义Map 骨架 只要数组</span></div><div class="line"><span class="keyword">private</span> Entry&lt;K, V&gt;[] table = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMapDemo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMapDemo</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数不能为负数"</span> + length);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"扩容标准必须为大于0的数字"</span> + length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.length = length;</div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    <span class="keyword">this</span>.table = (Entry&lt;K, V&gt;[])<span class="keyword">new</span> Entry[length];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来下类的内存实现静态内存类Entry，由于采用了拉链法，所以需要用链表来存储具有相同的index的节点。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">static class Entry&lt;K, V&gt; implements Map.Entry&lt;K, V&gt; &#123;</div><div class="line">    K k;</div><div class="line">    V v;</div><div class="line">    Entry&lt;K, V&gt; next;</div><div class="line"></div><div class="line">    public Entry(K k,V v,Entry&lt;K, V&gt; next)&#123;</div><div class="line">        this.k = k;</div><div class="line">        this.v = v;</div><div class="line">        this.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public K getKey() &#123;</div><div class="line">        return k;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public V getValue() &#123;</div><div class="line">        return v;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h3><p>那么如何实现hash算法呢？这个问题有点复杂，还是先看看jdk8中HashMap是如何实现的，下面是部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来通过自身数组的长度和key来确定存储位置</div><div class="line"> * <span class="doctag">@param</span> k</div><div class="line"> * <span class="doctag">@param</span> length</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(K k, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="comment">// hashCode 与运算</span></div><div class="line">    <span class="keyword">int</span> m = length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> index = hash(k.hashCode()) &amp; m;</div><div class="line"></div><div class="line">    <span class="comment">// 三元运算符处理</span></div><div class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> ? index : -index;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * jdk1.8中hashmap的hash算法</div><div class="line"> * <span class="doctag">@param</span> hashCode</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以看出，要获取索引位置需要以下步骤：</p>
<p>取 key 的 hashCode 值、高位运算、取模运算。</p>
<p>其中，key.hashCode()是Key自带的hashCode()方法，返回一个int类型的散列值。我们知道，32位带符号的int表值范围从-2147483648到2147483648。这样只要hash函数松散的话，一般是很难发生碰撞的，因为HashMap的初始容量只有16。但是这样的散列值我们是不能直接拿来用的。用之前需要对数组的长度取模运算。得到余数才是索引值。具体参看<a href="http://ibat.xyz/2017/02/16/%E6%B5%85%E8%81%8AHashMap%E4%B8%AD%E7%9A%84hash%E7%AE%97%E6%B3%95/" target="_blank" rel="external">浅谈HashMap中的hash算法</a></p>
<h3 id="快存"><a href="#快存" class="headerlink" title="快存"></a>快存</h3><p>将key-value数据存入到哈希表表中，首先需要判断是否需要扩容，这里需要利用负载因子(loadFactor)来判断，默认扩容两倍。然后利用哈希算法来获取索引位置index，判断当前位置是否有结点，如果没有结点，就将当前结点作为这个桶中链表的头结点；如果有节点，那么就将其放在链表的末尾。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 快存</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (useSize &gt; <span class="keyword">this</span>.length * <span class="keyword">this</span>.loadFactor) &#123;</div><div class="line">        <span class="comment">// 需要扩容</span></div><div class="line">        up2Size();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 通过key来存储位置</span></div><div class="line">    <span class="keyword">int</span> index = getIndex(k, table.length);</div><div class="line">    Entry&lt;K,V&gt; entry = table[index];</div><div class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">        table[index] = <span class="keyword">new</span> Entry&lt;K, V&gt;(k, v, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</div><div class="line">        table[index] = <span class="keyword">new</span> Entry&lt;K, V&gt;(k, v, entry);</div><div class="line">    &#125;</div><div class="line">    useSize++;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> table[index].getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩容代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 增大容量，这里扩容两倍</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">up2Size</span><span class="params">()</span> </span>&#123;</div><div class="line">    Entry&lt;K, V&gt;[] newTable = (Entry&lt;K,V&gt;[])<span class="keyword">new</span> Entry[<span class="number">2</span> * <span class="keyword">this</span>.length];</div><div class="line">    <span class="comment">// 原来数组有非常多的Entry对象，由于Entry对象散列，需要再次散列</span></div><div class="line">    againHash(newTable);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 存储的对象存储到新数组中（再次散列）</div><div class="line"> * <span class="doctag">@param</span> newTable</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">againHash</span><span class="params">(Entry&lt;K, V&gt;[] newTable)</span> </span>&#123;</div><div class="line">    <span class="comment">// 将数组里面的对象封装到List</span></div><div class="line">    List&lt;Entry&lt;K, V&gt;&gt; entryList = <span class="keyword">new</span> ArrayList&lt;Entry&lt;K, V&gt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (table[i] == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        foundEntryByNext(table[i], entryList);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (entryList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        useSize = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.length = <span class="number">2</span> * <span class="keyword">this</span>.length;</div><div class="line">        table = newTable;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entryList) &#123;</div><div class="line">            <span class="keyword">if</span> (entry.next != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//形成链表关系取消掉</span></div><div class="line">                entry.next = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            put(entry.getKey(), entry.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 寻找entry对象</div><div class="line"> * <span class="doctag">@param</span> entry</div><div class="line"> * <span class="doctag">@param</span> entryList</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foundEntryByNext</span><span class="params">(Entry&lt;K, V&gt; entry, List&lt;Entry&lt;K, V&gt;&gt; entryList)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span> &amp;&amp; entry.next != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 说明entry对象已经形成链表结构</span></div><div class="line">        entryList.add(entry);</div><div class="line">        <span class="comment">// 需要递归</span></div><div class="line">        foundEntryByNext(entry.next, entryList);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        entryList.add(entry);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="快取"><a href="#快取" class="headerlink" title="快取"></a>快取</h3><p>从哈希表中根据key来取出元素比较简单，利用哈希算法计算出索引位置index，然后遍历链表即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 快取</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public V get(K k) &#123;</div><div class="line">    int index = getIndex(k, table.length);</div><div class="line">    if (table[index] == null) &#123;</div><div class="line">        throw new NullPointerException();</div><div class="line">    &#125;</div><div class="line">    return findValueByEntryKey(k, table[index]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private V findValueByEntryKey(K k, Entry&lt;K, V&gt; entry) &#123;</div><div class="line">    Entry&lt;K, V&gt; e = entry;</div><div class="line">    while (e != null) &#123;</div><div class="line">        if (k == e.getKey() || k.equals(e.getKey()))</div><div class="line">            return e.getValue();</div><div class="line">        e = e.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p>根据key将元素从哈希表中移除需要考虑以下几种情况：</p>
<ol>
<li>该节点为链表头结点</li>
<li>该节点为链表中间节点</li>
<li>该节点为链表尾节点</li>
</ol>
<p>然后按照上面的情况分别处理即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除</div><div class="line"> * <span class="doctag">@param</span> k</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = getIndex(k, table.length);</div><div class="line">    Entry&lt;K, V&gt; e = table[index];</div><div class="line">    Entry&lt;K, V&gt; prev = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span> &amp;&amp; (!(k == e.getKey() ||</div><div class="line">            (k != <span class="keyword">null</span> &amp;&amp; k.equals(e.getKey()))))) &#123;</div><div class="line">        prev = e;</div><div class="line">        e = e.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Entry&lt;K, V&gt; next = e.next;</div><div class="line">    <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; next != <span class="keyword">null</span>) &#123;</div><div class="line">        prev.next = next;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; next == <span class="keyword">null</span>) &#123;</div><div class="line">        prev.next = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev == <span class="keyword">null</span> &amp;&amp; next != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Node is the head</span></div><div class="line">        table[index] = next;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// prev==null &amp;&amp; next==null</span></div><div class="line">        table[index] = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    useSize--;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> e.v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Hash_table" target="_blank" rel="external">Hash table维基百科</a><br><br><a href="https://www.cnblogs.com/absfree/p/5508570.html" target="_blank" rel="external">散列表的基本原理与实现</a><br><br><a href="http://ibat.xyz/2017/02/16/%E6%B5%85%E8%81%8AHashMap%E4%B8%AD%E7%9A%84hash%E7%AE%97%E6%B3%95/" target="_blank" rel="external">浅谈HashMap中的hash算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈希表（Hash Table，也叫散列表），是存储键值对（key-value）的数据结构，主要利用hash算法将key映射到表中，以便加快查找速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。对于数组而言，查找数据容易，但添加删除数据比较慢；对于链表来说，添加删除数据容易，但查找数据比较慢，所以哈希表结合数据和链表来实现数据快速的存取。&lt;/p&gt;
&lt;p&gt;哈希表的实现主要需要解决两个问题，哈希函数和冲突解决。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理实现原理</title>
    <link href="http://yoursite.com/2018/07/10/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/10/JDK动态代理实现原理/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2018-07-10T13:24:16.606Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平时接触动态代理比较多，例如Spring等框架如何使用了动态代理经常听到，本文主要介绍JDK动态代理的基本实现原理(JDK8版本)，当了解了这些实现细节后，再次使用动态代理就会十分容易和清楚，知其然也知其所以然。</p>
<a id="more"></a>
<h3 id="动态代理Demo"><a href="#动态代理Demo" class="headerlink" title="动态代理Demo"></a>动态代理Demo</h3><p>先来看一下利用JDK动态代理写的Demo，下面会根据这个Demo进行分析</p>
<p>首先定义一个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是上面接口的实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        System.out.println(a+b);</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a-b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a*b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a/b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在有个需求，就是在每个方法执行前后都实现一段逻辑，这个时候就要用到JDK的动态代理了。</p>
<p>我们首先定义一个类实现<code>InvocationHandler</code>接口，将要代理的对象通过构造方法传入，并实现<code>invoke</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//要代理的对象</span></div><div class="line">    <span class="keyword">private</span> Calculator target;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyProxyHandler</span><span class="params">(Calculator h)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = h;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//获取参数</span></div><div class="line">        System.out.println(<span class="string">"beginWith---方法的参数是--"</span> + Arrays.asList(args));</div><div class="line"></div><div class="line">        before();</div><div class="line">        Object result = method.invoke(target,args);</div><div class="line">        after();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 前置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before---"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 后置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"after---"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们利用JDK提供的Proxy类来实现我们想要的功能</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * jdk动态代理测试</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       Calculator target = <span class="keyword">new</span> CalculatorImpl();</div><div class="line">       Calculator proxy = (Calculator) Proxy.newProxyInstance(Calculator.class.getClassLoader(),</div><div class="line">               <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Calculator.class&#125;,</div><div class="line">               <span class="keyword">new</span> MyProxyHandler(target));</div><div class="line"></div><div class="line">       proxy.add(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="具体实现流程"><a href="#具体实现流程" class="headerlink" title="具体实现流程"></a>具体实现流程</h3><p>动态代理之所以被称为动态代理，那是因为代理类是在运行过程中被Java动态生成的，我们可以看到这个被生成的代理类，需要在运行运行配置加上<code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code>这个虚拟机参数，那么就会在当前项目<code>com.sun.proxy</code>包路径下生成<code>$Proxy0.class</code>这个class文件，其中文件名的数字是可变的。</p>
<p><img src="https://github.com/ZZULI-TECH/interview/blob/master/images/dynamic-proxy-vm-options.png?raw=true" alt="image"></p>
<p>代理类生成的过程主要包括两部分：</p>
<ul>
<li>代理类字节码生成</li>
<li>把字节码通过传入的类加载器加载到虚拟机中</li>
</ul>
<p>我们首先从Proxy类的newProxyInstance方法入手，开始分析实现流程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></div><div class="line">                                      Class&lt;?&gt;[] interfaces,</div><div class="line">                                      InvocationHandler h)</div><div class="line">    <span class="keyword">throws</span> IllegalArgumentException</div><div class="line">&#123;</div><div class="line">   <span class="comment">// 检查空指针异常</span></div><div class="line">    Objects.requireNonNull(h);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</div><div class="line">    <span class="comment">// 安全检查</span></div><div class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</div><div class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 生成代理类</span></div><div class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Invoke its constructor with the designated invocation handler.</div><div class="line">     */</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</div><div class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</div><div class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</div><div class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    cons.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        Throwable t = e.getCause();</div><div class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</div><div class="line">            <span class="keyword">throw</span> (RuntimeException) t;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>newProxyInstance</code>方法需要三个参数，分别是类加载器，接口类型的数组和自定义的InvocationHandler。首选会检测空指针异常和安全检查，然后调用<code>getProxyClass0</code>方法，<code>getProxyClass0</code>源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</div><div class="line">                                       Class&lt;?&gt;... interfaces) &#123;</div><div class="line">    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If the proxy class defined by the given loader implementing</span></div><div class="line">    <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></div><div class="line">    <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></div><div class="line">    <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码里面的注释很清楚，如果实现当前接口的代理类存在，直接从缓存中返回，如果不存在，则通过ProxyClassFactory来创建。这里可以明显看到有对interface接口数量的限制，不能超过65535。其中proxyClassCache具体初始化信息如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</div></pre></td></tr></table></figure>
<p>其中创建代理类的具体逻辑是通过ProxyClassFactory的apply方法来创建的，ProxyClassFactory类中还包含代理类名称生成相关的两个静态常量，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// prefix for all proxy class names</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</div><div class="line"></div><div class="line"><span class="comment">// next number to use for generation of unique proxy class names</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</div><div class="line"></div><div class="line">    Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Verify that the class loader resolves the name of this</div><div class="line">         * interface to the same Class object.</div><div class="line">         */</div><div class="line">        Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (interfaceClass != intf) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                intf + <span class="string">" is not visible from class loader"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Verify that the Class object actually represents an</div><div class="line">         * interface.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                interfaceClass.getName() + <span class="string">" is not an interface"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Verify that this interface is not a duplicate.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                <span class="string">"repeated interface: "</span> + interfaceClass.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></div><div class="line">    <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Record the package of a non-public proxy interface so that the</div><div class="line">     * proxy class will be defined in the same package.  Verify that</div><div class="line">     * all non-public proxy interfaces are in the same package.</div><div class="line">     */</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</div><div class="line">        <span class="keyword">int</span> flags = intf.getModifiers();</div><div class="line">        <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</div><div class="line">            accessFlags = Modifier.FINAL;</div><div class="line">            String name = intf.getName();</div><div class="line">            <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</div><div class="line">            String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</div><div class="line">            <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</div><div class="line">                proxyPkg = pkg;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                    <span class="string">"non-public interfaces from different packages"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></div><div class="line">        proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Choose a name for the proxy class to generate.</div><div class="line">     */</div><div class="line">    <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</div><div class="line">    String proxyName = proxyPkg + proxyClassNamePrefix + num;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Generate the specified proxy class.</div><div class="line">     */</div><div class="line">    <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</div><div class="line">        proxyName, interfaces, accessFlags);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> defineClass0(loader, proxyName,</div><div class="line">                            proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * A ClassFormatError here means that (barring bugs in the</div><div class="line">         * proxy class generation code) there was some other</div><div class="line">         * invalid aspect of the arguments supplied to the proxy</div><div class="line">         * class creation (such as virtual machine limitations</div><div class="line">         * exceeded).</div><div class="line">         */</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>apply方法需要两个参数，类加载器和接口类型的数组。该方法包含验证类加载器和接口相关逻辑，包名的创建逻辑，调用<code>ProxyGenerator. generateProxyClass</code>生成代理类，把代理类字节码加载到JVM。</p>
<ol>
<li>包名默认是<code>com.sun.proxy</code>，如果被代理类是 non-public proxy interface ，则用和被代理类接口一样的包名，类名默认是$Proxy 加上一个自增的整数值，如$Proxy0，$Proxy1。</li>
<li>包名类名准备好后，就是通过<code>ProxyGenerator. generateProxyClass</code>根据具体传入的接口创建代理字节码，<code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code> 这个VM参数就是在该方法起到作用，如果为true则保存字节码到磁盘。代理类中，所有的代理方法逻辑都一样都是调用invocationHander的invoke方法，这个我们可以看后面具体代理反编译结果。</li>
<li>把字节码通过传入的类加载器加载到JVM中: defineClass0(loader, proxyName,proxyClassFile, 0, proxyClassFile.length);。</li>
</ol>
<p>我们继续来看看<code>generateProxyClass</code>方法是如何实现的，下面是该类的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class&lt;?&gt;[] var1, <span class="keyword">int</span> var2) &#123;</div><div class="line">    ProxyGenerator var3 = <span class="keyword">new</span> ProxyGenerator(var0, var1, var2);</div><div class="line">    <span class="comment">// 生成代理类字节码文件的真正方法</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] var4 = var3.generateClassFile();</div><div class="line">    <span class="comment">// 保存文件操作</span></div><div class="line">    <span class="keyword">if</span> (saveGeneratedFiles) &#123;</div><div class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</div><div class="line">                    Path var2;</div><div class="line">                    <span class="keyword">if</span> (var1 &gt; <span class="number">0</span>) &#123;</div><div class="line">                        Path var3 = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">'.'</span>, File.separatorChar));</div><div class="line">                        Files.createDirectories(var3);</div><div class="line">                        var2 = var3.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">".class"</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        var2 = Paths.get(var0 + <span class="string">".class"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    Files.write(var2, var4, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException var4x) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"I/O exception saving generated file: "</span> + var4x);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> var4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>generateProxyClass</code>方法中，通过调用<code>ProxyGenerator</code>类的<code>generateClassFile</code>方法，来生成代理类字节码文件，然后保存文件。</p>
<p>接下来我们看看<code>generateClassFile</code>方法干了些什么，下面是该方法的源码（方法有点长~）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] generateClassFile() &#123;</div><div class="line">    <span class="comment">// addProxyMethod系列方法就是将接口的方法和Object的hashCode,equals,toString方法添加到代理方法Map(proxyMethods),</span></div><div class="line">    <span class="comment">// 其中方法签名作为key,proxyMethod作为value</span></div><div class="line">    <span class="comment">// 后面经过反编译生成的代理类看出，hashCode，equals，toString这三个方法相当于从Object拿过来，</span></div><div class="line">    <span class="comment">// m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);</span></div><div class="line">    <span class="keyword">this</span>.addProxyMethod(hashCodeMethod, Object.class);</div><div class="line">    <span class="keyword">this</span>.addProxyMethod(equalsMethod, Object.class);</div><div class="line">    <span class="keyword">this</span>.addProxyMethod(toStringMethod, Object.class);</div><div class="line">    Class[] var1 = <span class="keyword">this</span>.interfaces;</div><div class="line">    <span class="keyword">int</span> var2 = var1.length;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> var3;</div><div class="line">    Class var4;</div><div class="line">    <span class="comment">// 获得所有接口中的所有方法，并将方法添加到代理方法中</span></div><div class="line">    <span class="keyword">for</span>(var3 = <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</div><div class="line">        var4 = var1[var3];</div><div class="line">        Method[] var5 = var4.getMethods();</div><div class="line">        <span class="keyword">int</span> var6 = var5.length;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var7 = <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</div><div class="line">            Method var8 = var5[var7];</div><div class="line">            <span class="keyword">this</span>.addProxyMethod(var8, var4);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 迭代存储在map中的ProxyMethod</span></div><div class="line">    Iterator var11 = <span class="keyword">this</span>.proxyMethods.values().iterator();</div><div class="line"></div><div class="line">    List var12;</div><div class="line">    <span class="keyword">while</span>(var11.hasNext()) &#123;</div><div class="line">        var12 = (List)var11.next();</div><div class="line">        checkReturnTypes(var12);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Iterator var15;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 生成代理类的构造函数</span></div><div class="line">        <span class="keyword">this</span>.methods.add(<span class="keyword">this</span>.generateConstructor());</div><div class="line">        var11 = <span class="keyword">this</span>.proxyMethods.values().iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(var11.hasNext()) &#123;</div><div class="line">            var12 = (List)var11.next();</div><div class="line">            var15 = var12.iterator();</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(var15.hasNext()) &#123;</div><div class="line">                ProxyGenerator.ProxyMethod var16 = (ProxyGenerator.ProxyMethod)var15.next();</div><div class="line">                <span class="comment">// 向代理类添加字段</span></div><div class="line">                <span class="comment">// 将代理字段声明为Method，10为ACC_PRIVATE和ACC_STATAIC的与运算，表示该字段的修饰符为private static</span></div><div class="line">                <span class="comment">// 所以代理类的字段都是private static Method XXX</span></div><div class="line">                <span class="keyword">this</span>.fields.add(<span class="keyword">new</span> ProxyGenerator.FieldInfo(var16.methodFieldName, <span class="string">"Ljava/lang/reflect/Method;"</span>, <span class="number">10</span>));</div><div class="line">                <span class="comment">// 向代理类添加方法</span></div><div class="line">                <span class="keyword">this</span>.methods.add(var16.generateMethod());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 为代理类生成静态代码块，对一些字段进行初始化</span></div><div class="line">        <span class="keyword">this</span>.methods.add(<span class="keyword">this</span>.generateStaticInitializer());</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException var10) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"unexpected I/O Exception"</span>, var10);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 限制方法和字段数量</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.methods.size() &gt; <span class="number">65535</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method limit exceeded"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fields.size() &gt; <span class="number">65535</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"field limit exceeded"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.cp.getClass(dotToSlash(<span class="keyword">this</span>.className));</div><div class="line">        <span class="keyword">this</span>.cp.getClass(<span class="string">"java/lang/reflect/Proxy"</span>);</div><div class="line">        var1 = <span class="keyword">this</span>.interfaces;</div><div class="line">        var2 = var1.length;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(var3 = <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</div><div class="line">            var4 = var1[var3];</div><div class="line">            <span class="keyword">this</span>.cp.getClass(dotToSlash(var4.getName()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.cp.setReadOnly();</div><div class="line">        ByteArrayOutputStream var13 = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        DataOutputStream var14 = <span class="keyword">new</span> DataOutputStream(var13);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            var14.writeInt(-<span class="number">889275714</span>);</div><div class="line">            var14.writeShort(<span class="number">0</span>);</div><div class="line">            var14.writeShort(<span class="number">49</span>);</div><div class="line">            <span class="keyword">this</span>.cp.write(var14);</div><div class="line">            var14.writeShort(<span class="keyword">this</span>.accessFlags);</div><div class="line">            var14.writeShort(<span class="keyword">this</span>.cp.getClass(dotToSlash(<span class="keyword">this</span>.className)));</div><div class="line">            var14.writeShort(<span class="keyword">this</span>.cp.getClass(<span class="string">"java/lang/reflect/Proxy"</span>));</div><div class="line">            var14.writeShort(<span class="keyword">this</span>.interfaces.length);</div><div class="line">            Class[] var17 = <span class="keyword">this</span>.interfaces;</div><div class="line">            <span class="keyword">int</span> var18 = var17.length;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var19 = <span class="number">0</span>; var19 &lt; var18; ++var19) &#123;</div><div class="line">                Class var22 = var17[var19];</div><div class="line">                var14.writeShort(<span class="keyword">this</span>.cp.getClass(dotToSlash(var22.getName())));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var14.writeShort(<span class="keyword">this</span>.fields.size());</div><div class="line">            var15 = <span class="keyword">this</span>.fields.iterator();</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(var15.hasNext()) &#123;</div><div class="line">                ProxyGenerator.FieldInfo var20 = (ProxyGenerator.FieldInfo)var15.next();</div><div class="line">                var20.write(var14);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var14.writeShort(<span class="keyword">this</span>.methods.size());</div><div class="line">            var15 = <span class="keyword">this</span>.methods.iterator();</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(var15.hasNext()) &#123;</div><div class="line">                ProxyGenerator.MethodInfo var21 = (ProxyGenerator.MethodInfo)var15.next();</div><div class="line">                var21.write(var14);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var14.writeShort(<span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> var13.toByteArray();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException var9) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"unexpected I/O Exception"</span>, var9);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么自定义的InvocationHandler是如何在代理中使用的呢？ 在上面的方法中向代理类添加方法调用了<code>generateMethod()</code>方法，所以这个添加方法的步骤就是在<code>generateMethod()</code>方法中实现的。<br>由于这个方法太长，这里就不贴全部代码了，方法里面有一段代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var9.writeShort(ProxyGenerator.<span class="keyword">this</span>.cp.getFieldRef(<span class="string">"java/lang/reflect/Proxy"</span>, <span class="string">"h"</span>, <span class="string">"Ljava/lang/reflect/InvocationHandler;"</span>));</div></pre></td></tr></table></figure>
<p>原来在代理方法中通过Proxy类引用了自定义InvocationHandler，由于通过Proxy的newProxyInstance方法将InvocationHandler传入，生成的代理类通过继承Proxy类，拿到InvocationHandler，<br>最后调用invoke方法来实现。</p>
<p>明白了JDK动态代理的大致流程，让我们来反编译下生成的代理类，反编译后的<code>$Proxy0.java</code>的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">package com.sun.proxy;</div><div class="line"></div><div class="line">import java.lang.reflect.InvocationHandler;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">import java.lang.reflect.Proxy;</div><div class="line">import java.lang.reflect.UndeclaredThrowableException;</div><div class="line">import me.mingshan.dy.Calculator;</div><div class="line"></div><div class="line">public final class $Proxy0 extends Proxy implements Calculator &#123;</div><div class="line"></div><div class="line">   private static Method m1;</div><div class="line">   private static Method m2;</div><div class="line">   private static Method m5;</div><div class="line">   private static Method m3;</div><div class="line">   private static Method m4;</div><div class="line">   private static Method m6;</div><div class="line">   private static Method m0;</div><div class="line"></div><div class="line"></div><div class="line">   public $Proxy0(InvocationHandler var1) throws  &#123;</div><div class="line">      super(var1);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final boolean equals(Object var1) throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return ((Boolean)super.h.invoke(this, m1, new Object[]&#123;var1&#125;)).booleanValue();</div><div class="line">      &#125; catch (RuntimeException | Error var3) &#123;</div><div class="line">         throw var3;</div><div class="line">      &#125; catch (Throwable var4) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var4);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final String toString() throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return (String)super.h.invoke(this, m2, (Object[])null);</div><div class="line">      &#125; catch (RuntimeException | Error var2) &#123;</div><div class="line">         throw var2;</div><div class="line">      &#125; catch (Throwable var3) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var3);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final int mul(int var1, int var2) throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return ((Integer)super.h.invoke(this, m5, new Object[]&#123;Integer.valueOf(var1), Integer.valueOf(var2)&#125;)).intValue();</div><div class="line">      &#125; catch (RuntimeException | Error var4) &#123;</div><div class="line">         throw var4;</div><div class="line">      &#125; catch (Throwable var5) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var5);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final int add(int var1, int var2) throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return ((Integer)super.h.invoke(this, m3, new Object[]&#123;Integer.valueOf(var1), Integer.valueOf(var2)&#125;)).intValue();</div><div class="line">      &#125; catch (RuntimeException | Error var4) &#123;</div><div class="line">         throw var4;</div><div class="line">      &#125; catch (Throwable var5) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var5);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final int sub(int var1, int var2) throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return ((Integer)super.h.invoke(this, m4, new Object[]&#123;Integer.valueOf(var1), Integer.valueOf(var2)&#125;)).intValue();</div><div class="line">      &#125; catch (RuntimeException | Error var4) &#123;</div><div class="line">         throw var4;</div><div class="line">      &#125; catch (Throwable var5) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var5);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final int div(int var1, int var2) throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return ((Integer)super.h.invoke(this, m6, new Object[]&#123;Integer.valueOf(var1), Integer.valueOf(var2)&#125;)).intValue();</div><div class="line">      &#125; catch (RuntimeException | Error var4) &#123;</div><div class="line">         throw var4;</div><div class="line">      &#125; catch (Throwable var5) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var5);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public final int hashCode() throws  &#123;</div><div class="line">      try &#123;</div><div class="line">         return ((Integer)super.h.invoke(this, m0, (Object[])null)).intValue();</div><div class="line">      &#125; catch (RuntimeException | Error var2) &#123;</div><div class="line">         throw var2;</div><div class="line">      &#125; catch (Throwable var3) &#123;</div><div class="line">         throw new UndeclaredThrowableException(var3);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   static &#123;</div><div class="line">      try &#123;</div><div class="line">         m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, new Class[]&#123;Class.forName(&quot;java.lang.Object&quot;)&#125;);</div><div class="line">         m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, new Class[0]);</div><div class="line">         m5 = Class.forName(&quot;me.mingshan.dy.Calculator&quot;).getMethod(&quot;mul&quot;, new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;);</div><div class="line">         m3 = Class.forName(&quot;me.mingshan.dy.Calculator&quot;).getMethod(&quot;add&quot;, new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;);</div><div class="line">         m4 = Class.forName(&quot;me.mingshan.dy.Calculator&quot;).getMethod(&quot;sub&quot;, new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;);</div><div class="line">         m6 = Class.forName(&quot;me.mingshan.dy.Calculator&quot;).getMethod(&quot;div&quot;, new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;);</div><div class="line">         m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, new Class[0]);</div><div class="line">      &#125; catch (NoSuchMethodException var2) &#123;</div><div class="line">         throw new NoSuchMethodError(var2.getMessage());</div><div class="line">      &#125; catch (ClassNotFoundException var3) &#123;</div><div class="line">         throw new NoClassDefFoundError(var3.getMessage());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代理类的结构大致如下:</p>
<ul>
<li>静态字段：被代理的接口所有方法都有一个对应的静态方法变量；</li>
<li>静态块：主要是通过反射初始化静态方法变量；</li>
<li>具体每个代理方法：逻辑都差不多就是<code>h.invoke</code>，主要是调用我们自定义的InvocatinoHandler逻辑，触发目标对象target上对应的方法;</li>
<li>构造函数：从这里传入我们InvocationHandler逻辑</li>
</ul>
<p>参考：<br><br><a href="http://www.importnew.com/23168.html" target="_blank" rel="external">JDK动态代理详解</a><br><br><a href="https://www.cnblogs.com/MOBIN/p/5597215.html" target="_blank" rel="external">深度剖析JDK动态代理机制</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时接触动态代理比较多，例如Spring等框架如何使用了动态代理经常听到，本文主要介绍JDK动态代理的基本实现原理(JDK8版本)，当了解了这些实现细节后，再次使用动态代理就会十分容易和清楚，知其然也知其所以然。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="动态代理" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>IllegalMonitorStateException异常分析</title>
    <link href="http://yoursite.com/2018/07/03/IllegalMonitorStateException%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/07/03/IllegalMonitorStateException异常分析/</id>
    <published>2018-07-02T16:00:00.000Z</published>
    <updated>2018-07-03T16:13:20.868Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当调用wait()， notify()等相关方法时，可能会产生这个异常，那么这个异常是什么意思呢？</p>
<a id="more"></a>
<p>抛出该异常原因:在Java中，每一个对象（Object/Class）都有一个监视器，当在同步代码块中，当前线程不是此监视器的所有者，也就是要在当前线程锁定对象，才能用锁定的对象此行这些方法，需要用到synchronized ，锁定什么对象就用什么对象来执行notify(), notifyAll(),wait(), wait(long), wait(long, int)操作，否则就会报IllegalMonitorStateException异常，原因异常。</p>
<p>下面这段代码就会抛出IllegalMonitorStateException异常，原因就是调用wait需要当前对象的监视器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ThreadTest.class.wait();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadTest()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以对于synchronized的使用来说，通常这样使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(x) &#123;</div><div class="line">    x.notify();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体对于不同的监视对象而言，可以有以下几种考虑：</p>
<ol>
<li>锁定方法所对应的对象实例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.notify();</div><div class="line">       <span class="comment">// 或者直接写notify();</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ol>
<li>类锁</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span>(xx.class) &#123;</div><div class="line">       xx.notify();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>锁定其他对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Class Test&#123;</div><div class="line">    <span class="keyword">public</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> method（）&#123;</div><div class="line">      <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">         lock.notify();</div><div class="line">      &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当调用wait()， notify()等相关方法时，可能会产生这个异常，那么这个异常是什么意思呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="IllegalMonitorStateException" scheme="http://yoursite.com/tags/IllegalMonitorStateException/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>理解ThreadLocal</title>
    <link href="http://yoursite.com/2018/07/01/%E7%90%86%E8%A7%A3ThreadLocal/"/>
    <id>http://yoursite.com/2018/07/01/理解ThreadLocal/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2018-07-01T01:45:32.898Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记得去年学习Spring MVC的时候自己学着写了一个小小的框架，用了一个AppContext来表示应用上下文，每个请求都应该有各自独立的AppContext，里面可以存储一些数据，比如数据库连接Connection等，此时考虑数据库的事务问题，即在一个线程内，一个事务的多个操作拿到的是一个Connection，该如何实现呢？此时就需要使用ThreadLocal来解决。</p>
<a id="more"></a>
<h3 id="ThreadLocal介绍"><a href="#ThreadLocal介绍" class="headerlink" title="ThreadLocal介绍"></a>ThreadLocal介绍</h3><p><strong>ThreadLocal能干啥？</strong></p>
<p>ThreadLocal是基于线程的一个本地变量的支持类，用户可以将对象与线程绑定，每一个线程都拥有一个自己的对象，例如对于上面的需求来说，可以将AppContext存入到ThreadLocal，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class AppContext &#123;</div><div class="line">    private static ThreadLocal&lt;AppContext&gt; appContextMap = new ThreadLocal&lt;AppContext&gt;();</div><div class="line">    private Map&lt;String, Object&gt; objects = new HashMap&lt;String, Object&gt;();</div><div class="line"></div><div class="line">    private AppContext() &#123;&#125;;</div><div class="line"></div><div class="line">    // 部分代码省略</div><div class="line">    </div><div class="line">    public void clear() &#123;</div><div class="line">        AppContext context = appContextMap.get();</div><div class="line">        if (context != null) &#123;</div><div class="line">            context.objects.clear();</div><div class="line">        &#125;</div><div class="line">        context = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static AppContext getAppContext() &#123;</div><div class="line">        AppContext appContext = appContextMap.get();</div><div class="line">        if (appContext == null) &#123;</div><div class="line">            appContext = new AppContext();</div><div class="line">            appContextMap.set(appContext);</div><div class="line">        &#125;</div><div class="line">        return appContextMap.get();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于数据库的Connection，可以有以下实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public Class ConnectionManager &#123;</div><div class="line"></div><div class="line">   // 创建一个私有静态的并且是与事务相关联的局部线程变量  </div><div class="line">   private static ThreadLocal&lt;Connection&gt; connectionHolder = new ThreadLocal&lt;Connection&gt;;</div><div class="line"></div><div class="line">   public static Connection getConnection() &#123;</div><div class="line">       // 获得线程变量connectionHolder的值conn  </div><div class="line">       Connection conn = connectionHolder.get();</div><div class="line">       if (conn == null)&#123;</div><div class="line">           // 如果连接为空，则创建连接，另一个工具类，创建连接  </div><div class="line">           conn = DbUtil.getConnection();</div><div class="line">           // 将局部变量connectionHolder的值设置为conn  </div><div class="line">           connectionHolder.set(conn);</div><div class="line">       &#125;</div><div class="line">       return conn;</div><div class="line">   &#125;  </div><div class="line">｝</div></pre></td></tr></table></figure>
<h3 id="ThreadLocal原理分析"><a href="#ThreadLocal原理分析" class="headerlink" title="ThreadLocal原理分析"></a>ThreadLocal原理分析</h3><p>ThreadLocal有如下成员变量和方法，如下图所示</p>
<p><img src="/images/threadlocal.png" alt="image"></p>
<p>其中经常用到的是以下几个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>由于ThreadLocal里面需要存值和取值，又需要与线程相关，那么数据存在哪里，用哪种数据结构呢？由于Map可以存储很多类型，这里又不需要对外提供服务，所以这里就用了静态内部类的Map来搞存储，来存储真实的变量实例。</p>
<h4 id="get-流程"><a href="#get-流程" class="headerlink" title="get()流程"></a>get()流程</h4><p>那么， ThreadLocal是如何工作的呢？我们先从get方法看起，下面是get方法的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            T result = (T)e.value;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先获得当前线程，然后通过getMap(t)方法获取到一个map，map的类型为ThreadLocalMap。接下来根据<key,value>从map中获取Entry，注意这里获取键值对传进去的是this，而不是当前线程t。如果获取成功，则返回value值。如果map为空，则调用setInitialValue方法返回value。</key,value></p>
<p>getMap()方法是如何获取到ThreadLocalMap的呢？来看看源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> t.threadLocals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现是直接获取当前线程的threadLocals成员变量，那么接下来就到Thread类里面去看一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></div><div class="line"> * by the ThreadLocal class. */</div><div class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>实际上就是ThreadLocalMap，这个类型是ThreadLocal类的一个内部类，我们来看看ThreadLocalMap内部的Entry类，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></div><div class="line">    Object value;</div><div class="line"></div><div class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">        <span class="keyword">super</span>(k);</div><div class="line">        value = v;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Entry继承自WeakReference，这里弱引用为Map的key，也就是ThreadLocal，弱引用就是只要JVM垃圾回收器发现了它，就会将之回收。</p>
<p>回到get()方法， 如果通过getMap()方法获取的map为空，就会调用setInitialValue() 方法，下面是该方法的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    T value = initialValue();</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        createMap(t, value);</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先调用initialValue() 方法进行初始化value，默认为null，接下来获取当前线程，获取map，判断map是否为空，不为空将ThreadLocal类的对象为key，设定value，为空则创建map，调用createMap(t, value)方法，createMap代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</div><div class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="set-T-value-流程"><a href="#set-T-value-流程" class="headerlink" title="set(T value)流程"></a>set(T value)流程</h4><p>接下来看看set方法如何实现的，下面是源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先获取当前线程，然后获取map，判断map是否为空，不为空将ThreadLocal类的对象为key，设定value，为空则创建map，调用createMap(t, value)方法。</p>
<p>至此，我们就可以知道大致知道ThreadLocal的工作流程：</p>
<ol>
<li><p>Thread类中有一个成员变量属于ThreadLocalMap类(一个定义在ThreadLocal类中的内部类)，它是一个Map，它的key是ThreadLocal实例对象。</p>
</li>
<li><p>当为ThreadLocal类的对象set值时，首先获得当前线程的ThreadLocalMap类属性，然后以ThreadLocal类的对象为key，设定value。get值时则类似。</p>
</li>
</ol>
<h3 id="一个线程多个ThreadLocal，如何区分？"><a href="#一个线程多个ThreadLocal，如何区分？" class="headerlink" title="一个线程多个ThreadLocal，如何区分？"></a>一个线程多个ThreadLocal，如何区分？</h3><p>既然ThreadLocal内部用map存储数据，一个线程可以对应多个ThreadLocal对象，那么这些ThreadLocal对象是如何区分的呢？上面只是大致分析了ThreadLocal的工作原理，并未涉及ThreadLocalMap的存值和取值，接下来我们继续来看源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ThreadLocals rely on per-thread linear-probe hash maps attached</div><div class="line"> * to each thread (Thread.threadLocals and</div><div class="line"> * inheritableThreadLocals).  The ThreadLocal objects act as keys,</div><div class="line"> * searched via threadLocalHashCode.  This is a custom hash code</div><div class="line"> * (useful only within ThreadLocalMaps) that eliminates collisions</div><div class="line"> * in the common case where consecutively constructed ThreadLocals</div><div class="line"> * are used by the same threads, while remaining well-behaved in</div><div class="line"> * less common cases.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The next hash code to be given out. Updated atomically. Starts at</div><div class="line"> * zero.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</div><div class="line">    <span class="keyword">new</span> AtomicInteger();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The difference between successively generated hash codes - turns</div><div class="line"> * implicit sequential thread-local IDs into near-optimally spread</div><div class="line"> * multiplicative hash values for power-of-two-sized tables.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the next hash code.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ThreadLocal类内部定义了一个final的变量threadLocalHashCode，这个变量是干什么的？看注释，在ThreadLocalMap存储数据时，ThreadLocal对象作为key，通过threadLocalHashCode进行搜索，threadLocalHashCode通过原子类AtomicInteger，提供原子操作，由于nextHashCode为类变量，保证每次生成的hashCode都不一致，每次生成hashCode都会有HASH_INCREMENT的差值。threadLocalHashCode会在ThreadLocalMap中用到，下面继续分析。</p>
<p>前面分析get()流程，对于如何从ThreadLocalMap取数据并未提及，现在看看源码如何实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</div><div class="line">    Entry e = table[i];</div><div class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调用ThreadLocalMap的getEntry方法，传入当前ThreadLocal对象，然后获取ThreadLocal的threadLocalHashCode， 然后通过位运算与(&amp;) 将 threadLocalHashCode和ThreadLocal内部存储数据的table的长度减一进行位运算得到i，利用i在table中直接进行搜索。</p>
<p>在ThreadLocalMap如何存值？下面看ThreadLocalMap.set()源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// We don't use a fast path as with get() because it is at</span></div><div class="line">    <span class="comment">// least as common to use set() to create new entries as</span></div><div class="line">    <span class="comment">// it is to replace existing ones, in which case, a fast</span></div><div class="line">    <span class="comment">// path would fail more often than not.</span></div><div class="line"></div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Entry e = tab[i];</div><div class="line">         e != <span class="keyword">null</span>;</div><div class="line">         e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">        ThreadLocal&lt;?&gt; k = e.get();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (k == key) &#123;</div><div class="line">            e.value = value;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">            replaceStaleEntry(key, value, i);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tab[i] = <span class="keyword">new</span> Entry(key, value);</div><div class="line">    <span class="keyword">int</span> sz = ++size;</div><div class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class="line">        rehash();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ThreadLocalMap.set()方法中，传入当前ThreadLocal对象和要存的值，然后通过位运算与(&amp;) 将 threadLocalHashCode和ThreadLocal内部存储数据的table的长度减一进行位运算得到i，这个i在get()方法已经见过了，完全一样（不一样就出问题啦），接下来开始遍历table，判断有没有相同的key等处理，其实最核心的就是你得去new 一个entry然后设置到table数组中，就是下面这句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tab[i] = <span class="keyword">new</span> Entry(key, value);</div></pre></td></tr></table></figure>
<h3 id="ThreadLocal会有内存泄露？"><a href="#ThreadLocal会有内存泄露？" class="headerlink" title="ThreadLocal会有内存泄露？"></a>ThreadLocal会有内存泄露？</h3><p>看了好多博客，里面提到ThreadLocal会有内存泄露问题，因为从ThreadLocalMap的设计来看，如下图，key被设计成弱引用，一旦JVM进行GC时，这个key就没了，那么与key对应的value还存在ThreadLocalMap，ThreadLocalMap与Entry存在着强引用，GC无法回收，造成内存泄露。</p>
<p><img src="/images/threadlocal_weak.png" alt="image"></p>
<p>当然，这些都是分析出来的，既然我们考虑到了，那么Josh Bloch 和 Doug Lea肯定也为我们考虑过了，所以这个问题在源码中已经解决了，下面来看看相关源码</p>
<p>在ThreadLocalMap.set()方法中，如果key为null，此时会调用 replaceStaleEntry()方法，在这个方法中进行处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span></div><div class="line">                               <span class="keyword">int</span> staleSlot) &#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    Entry e;</div><div class="line"></div><div class="line">    <span class="comment">// Back up to check for prior stale entry in current run.</span></div><div class="line">    <span class="comment">// We clean out whole runs at a time to avoid continual</span></div><div class="line">    <span class="comment">// incremental rehashing due to garbage collector freeing</span></div><div class="line">    <span class="comment">// up refs in bunches (i.e., whenever the collector runs).</span></div><div class="line">    <span class="keyword">int</span> slotToExpunge = staleSlot;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = prevIndex(staleSlot, len);</div><div class="line">         (e = tab[i]) != <span class="keyword">null</span>;</div><div class="line">         i = prevIndex(i, len))</div><div class="line">        <span class="keyword">if</span> (e.get() == <span class="keyword">null</span>)</div><div class="line">            slotToExpunge = i;</div><div class="line"></div><div class="line">    <span class="comment">// Find either the key or trailing null slot of run, whichever</span></div><div class="line">    <span class="comment">// occurs first</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nextIndex(staleSlot, len);</div><div class="line">         (e = tab[i]) != <span class="keyword">null</span>;</div><div class="line">         i = nextIndex(i, len)) &#123;</div><div class="line">        ThreadLocal&lt;?&gt; k = e.get();</div><div class="line"></div><div class="line">        <span class="comment">// If we find key, then we need to swap it</span></div><div class="line">        <span class="comment">// with the stale entry to maintain hash table order.</span></div><div class="line">        <span class="comment">// The newly stale slot, or any other stale slot</span></div><div class="line">        <span class="comment">// encountered above it, can then be sent to expungeStaleEntry</span></div><div class="line">        <span class="comment">// to remove or rehash all of the other entries in run.</span></div><div class="line">        <span class="keyword">if</span> (k == key) &#123;</div><div class="line">            e.value = value;</div><div class="line"></div><div class="line">            tab[i] = tab[staleSlot];</div><div class="line">            tab[staleSlot] = e;</div><div class="line"></div><div class="line">            <span class="comment">// Start expunge at preceding stale entry if it exists</span></div><div class="line">            <span class="keyword">if</span> (slotToExpunge == staleSlot)</div><div class="line">                slotToExpunge = i;</div><div class="line">            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// If we didn't find stale entry on backward scan, the</span></div><div class="line">        <span class="comment">// first stale entry seen while scanning for key is the</span></div><div class="line">        <span class="comment">// first still present in the run.</span></div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</div><div class="line">            slotToExpunge = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If key not found, put new entry in stale slot</span></div><div class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</div><div class="line">    tab[staleSlot] = <span class="keyword">new</span> Entry(key, value);</div><div class="line"></div><div class="line">    <span class="comment">// If there are any other stale entries in run, expunge them</span></div><div class="line">    <span class="keyword">if</span> (slotToExpunge != staleSlot)</div><div class="line">        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中我们可以看到这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If key not found, put new entry in stale slot</span></div><div class="line">tab[staleSlot].value = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>如果key找不到，那么就将value置为null，help GC。这样问题解决。</p>
<p>当然在resize()方法中也有同样的操作，总之都会进行处理的。</p>
<p>最后，我们可以调用remove()方法将相关数据移除，这个肯定就不会有内存泄露啦。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.cnblogs.com/xzwblog/p/7227509.html#_label0" target="_blank" rel="external">https://www.cnblogs.com/xzwblog/p/7227509.html#_label0</a></p>
<p><a href="https://www.jianshu.com/p/ee8c9dccc953" target="_blank" rel="external">https://www.jianshu.com/p/ee8c9dccc953</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzQ2NTY0OA==&amp;mid=2650796401&amp;idx=1&amp;sn=61f2d19bfb0e34c08206c6b31a1c2dd1&amp;chksm=88562c2ebf21a5383ace3f52f336db9b53a714bb37d5f97a9d5746b43b6a3d30be113aca082a&amp;mpshare=1&amp;scene=23&amp;srcid=1212TdJMnkHNCPTwVsPKSuao#rd" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzA5MzQ2NTY0OA==&amp;mid=2650796401&amp;idx=1&amp;sn=61f2d19bfb0e34c08206c6b31a1c2dd1&amp;chksm=88562c2ebf21a5383ace3f52f336db9b53a714bb37d5f97a9d5746b43b6a3d30be113aca082a&amp;mpshare=1&amp;scene=23&amp;srcid=1212TdJMnkHNCPTwVsPKSuao#rd</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得去年学习Spring MVC的时候自己学着写了一个小小的框架，用了一个AppContext来表示应用上下文，每个请求都应该有各自独立的AppContext，里面可以存储一些数据，比如数据库连接Connection等，此时考虑数据库的事务问题，即在一个线程内，一个事务的多个操作拿到的是一个Connection，该如何实现呢？此时就需要使用ThreadLocal来解决。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ThreadLocal" scheme="http://yoursite.com/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰模式</title>
    <link href="http://yoursite.com/2018/06/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/27/设计模式之装饰模式/</id>
    <published>2018-06-26T16:00:00.000Z</published>
    <updated>2018-06-29T04:02:53.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>装饰模式作为常用的设计模式用到很多，比如在Java中，io包下的很多类就是典型的装饰者模式的体现，如下代码：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> BufferedOutputStream(OutputStream out)</div><div class="line"><span class="keyword">new</span> BufferedInputStream(InputStream in);</div><div class="line"><span class="keyword">new</span> PrintWriter(OutputStream out)</div><div class="line"><span class="keyword">new</span> FilterReader(Reader in);</div></pre></td></tr></table></figure>
<p>那么，什么是装饰模式呢？</p>
<p>在实际应用中我们可能会有这样的需求，需要动态地为一个类增加一些功能，这些功能动态地撤销，继承虽然也可以对类进行功能扩展，但是静态的，为了扩展性和动态性，就需要引入装饰模式。</p>
<p>装饰模式的定义是： 动态地给一些对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更加灵活。</p>
<p>装饰模式的通用类图如下图所示：</p>
<p><img src="/images/decorator.png" alt="image"></p>
<p>在类图中，有四个角色需要说明：</p>
<ul>
<li><p>抽象构件（Component） </p>
<p>  给出一个抽象的接口，用以规范准备接收附加责任的对象。</p>
</li>
<li><p>具体构件（ConcreteComponent） </p>
<p>  ConcreteComponent是最核心、最原始、最基本的接口或抽象类的实现，要装饰的就是它。</p>
</li>
<li><p>装饰角色（Decorator） </p>
<p>  有一个构件（Conponent）对象的实例，并定义一个和抽象构件一致的接口。</p>
</li>
<li><p>具体装饰角色（ConcreteDecorator） </p>
<p>  具体的装饰类，要增加的功能当然要在这里写啦。</p>
</li>
</ul>
<p><strong>具体代码实现:</strong></p>
<p>抽象构件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象构建</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体构件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体构件</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"do something"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>装饰角色, 持有一个抽象构件的引用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象装饰者</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Component component;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.component = component;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.component.operate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体装饰角色</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 装饰者1</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator1</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定义被修饰者</div><div class="line">     * <span class="doctag">@param</span> component</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator1</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定义自己的修饰方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"decorator A"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重写父类的方法</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.method1();</div><div class="line">        <span class="keyword">super</span>.operate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Component component = <span class="keyword">new</span> ConcreteComponent();</div><div class="line">        <span class="comment">// 第一次装饰</span></div><div class="line">        component = <span class="keyword">new</span> ConcreteDecorator1(component);</div><div class="line">        <span class="comment">// 第二次装饰</span></div><div class="line">        component = <span class="keyword">new</span> ConcreteDecorator2(component);</div><div class="line">        component.operate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码参考：</strong></p>
<p><a href="https://github.com/mstao/java-explore/tree/master/DesignPattern/src/pers/han/decorator" target="_blank" rel="external">https://github.com/mstao/java-explore/tree/master/DesignPattern/src/pers/han/decorator</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰模式作为常用的设计模式用到很多，比如在Java中，io包下的很多类就是典型的装饰者模式的体现，如下代码：&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰模式" scheme="http://yoursite.com/tags/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://yoursite.com/2018/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/25/设计模式之适配器模式/</id>
    <published>2018-06-24T16:00:00.000Z</published>
    <updated>2018-06-27T14:49:30.267Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在我们日常生活中可以看到许多例子，例如我们的手机需要用充电器来充电，因为220v电压手机是承受不住的；笔记本电脑连接投影仪可以是HDMI，需要转接头等等例子，从这些例子中我们可以发现目标对象与源对象无法直接交互，需要一个中间层来作为一个桥梁达到让两者完美交互的效果，从这种就可以看到适配器模式的影子了。</p>
<a id="more"></a>
<p>那么什么是适配器模式呢? 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<p>适配器包含类适配器和对象适配器，类适配器是类间继承，对象适配器是类的关联关系，这是两者的区别。</p>
<p>我们先来看看适配器模式的角色</p>
<ol>
<li><p>Target目标角色</p>
<p> 该角色定义把其他类转化为何种接口，也就是我们最终期望的接口，需要Adapter实现该接口</p>
</li>
<li><p>Adaptee源角色</p>
<p> 想把谁转换为目标角色，此时就是源角色</p>
</li>
<li><p>Adapter适配器角色</p>
<p> 适配器模式的核心角色，它的职责非常简单，将源角色转化为目标角色</p>
</li>
</ol>
<h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><p>通过继承来实现适配器模式，由于Java是属于单继承，所以这个使用限制很大。</p>
<p>Adaptee源角色，里面包含原来的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 适配器源角色</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 原有的业务逻辑</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"源角色 do something。。。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Target目标角色， 包含现有的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 适配器目标角色</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  目标角色有自己的方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 目标角色实现类， 现有的业务逻辑</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTarget</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"xxxxxxxxxxxxxxxxxx"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>适配器角色，需要继承源角色，拿到其里面的方法，然后实现目标角色接口，让源角色与目标角色进行交互</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 适配器角色</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.doSomething();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 类适配器 Test</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 原有的业务逻辑</span></div><div class="line">        Target target = <span class="keyword">new</span> ConcreteTarget();</div><div class="line">        target.request();</div><div class="line">        <span class="comment">// 现在增加了适配器角色后的业务逻辑</span></div><div class="line">        Target target2 = <span class="keyword">new</span> Adapter();</div><div class="line">        target2.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><p>对象适配器是通过类的关联关系来进行的，是为了解决类适配器模式的问题而出现的，它比类适配器模式灵活，扩展性强，实际运用的比较多。</p>
<p>这里只解释一些Adapter适配器角色的实现，其他的和类适配器模式一致。</p>
<p>通过构造器将两个源角色传递进来，实现Target接口，然后就可以进行交互啦</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 适配器角色</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Adaptee1 adaptee1;</div><div class="line">    <span class="keyword">private</span> Adaptee2 adaptee2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee1 adaptee1, Adaptee2 adaptee2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.adaptee1 = adaptee1;</div><div class="line">        <span class="keyword">this</span>.adaptee2 = adaptee2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        adaptee1.doSomething();</div><div class="line">        adaptee2.doSomething();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h3><p><a href="https://github.com/mstao/java-explore/tree/master/DesignPattern/src/pers/han/adapter" target="_blank" rel="external">https://github.com/mstao/java-explore/tree/master/DesignPattern/src/pers/han/adapter</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们日常生活中可以看到许多例子，例如我们的手机需要用充电器来充电，因为220v电压手机是承受不住的；笔记本电脑连接投影仪可以是HDMI，需要转接头等等例子，从这些例子中我们可以发现目标对象与源对象无法直接交互，需要一个中间层来作为一个桥梁达到让两者完美交互的效果，从这种就可以看到适配器模式的影子了。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="http://yoursite.com/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>离人</title>
    <link href="http://yoursite.com/2018/06/22/%E7%A6%BB%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/06/22/离人/</id>
    <published>2018-06-21T16:00:00.000Z</published>
    <updated>2018-06-24T02:47:14.537Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久不写文章，只因这段时间太忙了，忙到忘记离别的日子已经逼在眼前，倒让人措手不及。当这些繁琐的流程到了末尾，离别的日子真是要到来了。</p>
<a id="more"></a>
<p>大学是我目前人生中最充实的时光，回想以前的上学时代，也真让人怀念。十年回首，可喜可悲可叹其实现在也没有多深的记忆了，也或许都释怀了吧。释怀这个词不怎么靠谱，哪里有什么释怀不释怀的，只不过心里能够接受事情的好与坏，不需要过多纠结；明白人总是聚少离多，那些离开的人，可能一辈子也不会再见了。人因为情感变得复杂，也变得有趣。</p>
<p>最近一直在看梁晓声的《中国人的日常》，印象十分深刻。他谈及自己的初恋，感觉充满一种令人羡慕的稚气与甜蜜，或许是那个时代特有的那种情感，也或许是每个人在经历初恋时都会有的这种感觉。稚气地认为，各自的心灵从此有了依靠，被自己感动，亦被对方感动。在那个年代，爱不可声张，甚至不敢承认，这对于热恋中的人来说是有多么压抑和煎熬。我们都向往纯真，向往无邪，当你向往这些的时候，说明这些早已远离于你，这些也只是虚幻想象的样子，真实早已消失。</p>
<p>他在谈及在他年幼时遇到改变其一生的启蒙恩师，这是何等幸运。在人生启蒙时代能遇到为他们人生指明道路之人，没有因为一时错念而浪费自己的人生。普通人千千万万，并不是每个人都会遇到指点迷津之人，在混沌的日子里，在无可奈何的岁月中，怎么做到顿悟自我，不浪费自己的生命呢？对于年轻人来说，最浪费时间的事情就是给其讲经验、大道理，讲一万句不如自己去摔一跤，不如自己去尝试一下，眼泪教你做人，后悔帮你成长，疼痛才是人生之师。人生该走的弯路，其实一米也少不了。</p>
<p>大学让人成长不少，遇到了这么多有趣的人，十分不寂寞。人生遇到了每一个人，其实都有缘分，缘分大也罢，小也罢，都不怎么重要。毕竟在人生漫漫长河中，他们都是那一朵朵的浪花，这是多么的有趣和富有生气，倘若平静死水般，该是多么的无聊与苍白。人生不如意之事七八九，苦事。终归还能与人言一二三，幸事。感谢能遇到一群能一起喝酒玩乐、酒后畅谈之舍友们，共同成长，希望再见如故。</p>
<p>感慨这么多，还是说句俗话，希望各位万事大吉，天天吃鸡(￣▽￣)／</p>
<p>放两张照片吧，以此纪念我的大学。</p>
<p><img src="/images/0731.JPG" alt="image"></p>
<p><img src="/images/0984.JPG" alt="image"></p>
<p><img src="/images/0932.JPG" alt="image"></p>
<p>记于2018/6/22</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不写文章，只因这段时间太忙了，忙到忘记离别的日子已经逼在眼前，倒让人措手不及。当这些繁琐的流程到了末尾，离别的日子真是要到来了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="大学" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安裝Redis遇到问题及解决</title>
    <link href="http://yoursite.com/2018/05/23/CentOS7%E5%AE%89%E8%A3%9DRedis%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2018/05/23/CentOS7安裝Redis遇到问题及解决/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2018-05-28T04:09:15.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前段时间我在我的CentOS7服务器上安装了Redis，遇到了一些问题忘记记录下来了ヽ(￣▽￣)ﾉ，而且我参考网上的教程配置一些脚本的时候发现有错误，根据我对shell的简单理解会介绍一下，毕竟这个东西很常用。</p>
<a id="more"></a>
<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>首先在<strong>/usr/local</strong>目录下创建services 文件夹和其子文件redis,然后进入该文件夹。</p>
<p>下载redis可以通过wget，我这里下载的是<strong>redis-4.0.2</strong>版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</div></pre></td></tr></table></figure>
<p>将Redis下载到该文件夹下后，将压缩文件解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/services/redis</div><div class="line"></div><div class="line">tar -xzvf redis-4.0.2.tar.gz</div></pre></td></tr></table></figure>
<p>进入到解压后的文件夹，进行编译即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/services/redis/redis-4.0.2</div><div class="line"></div><div class="line">make</div></pre></td></tr></table></figure>
<p>编译完后，我们需要将<strong>redis-cli</strong>，<strong>redis-server</strong>，<strong>redis.conf</strong>拷贝到一个单独的文件夹，这里我们在<strong>/usr/local/services/redis</strong> 文件夹下新建一个文件夹<br><strong>redisroot</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/services/redis/redisroot</div></pre></td></tr></table></figure>
<p>然后将编译后的<strong>redis-cli</strong>，<strong>redis-server</strong>，<strong>redis.conf</strong>拷贝到<strong>redisroot</strong>文件夹下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cp /usr/local/services/redis/redis-4.0.2/src/redis-server /usr/local/services/redis/redisroot</div><div class="line"></div><div class="line">cp /usr/local/services/redis/redis-4.0.2/src/redis-cli /usr/local/services/redis/redisroot</div><div class="line"></div><div class="line">cp /usr/local/services/redis/redis-4.0.2/redis.conf /usr/local/services/redis/redisroot</div></pre></td></tr></table></figure>
<p>拷贝完后的文件夹结构如下：</p>
<p><img src="/images/redisroot-folder.png" alt="image"></p>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>编辑Redis配置文件</p>
<p>进入到<strong>redisroot</strong>文件夹，输入下列命令进入编辑模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim redis.conf</div></pre></td></tr></table></figure>
<p>然后修改以下配置：</p>
<ol>
<li>在bind 127.0.0.1前加“#”将其注释掉</li>
<li>默认为保护模式，把 protected-mode yes 改为 protected-mode no</li>
<li>默认为不守护进程模式，把daemonize no 改为daemonize yes</li>
<li>将 requirepass foobared前的“#”去掉，密码改为你想要设置的密码</li>
</ol>
<p>设置完后，<strong>ESC</strong>切换模式后输入<strong>:wq!</strong>保存退出</p>
<h2 id="编辑Redis开机启动脚本"><a href="#编辑Redis开机启动脚本" class="headerlink" title="编辑Redis开机启动脚本"></a>编辑Redis开机启动脚本</h2><p>输入以下命令编辑脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/redis</div></pre></td></tr></table></figure>
<p>打开后在这个文件里添加如下脚本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/sh</div><div class="line"><span class="meta">#</span> chkconfig: 2345 80 90</div><div class="line"><span class="meta">#</span> description: Start and Stop redis</div><div class="line"><span class="meta">#</span>PATH=/usr/local/bin:/sbin:/usr/bin:/bin</div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/local/services/redis/redisroot/redis-server     </div><div class="line">REDIS_CLI=/usr/local/services/redis/redisroot/redis-cli     </div><div class="line">PIDFILE=/var/run/redis_6379.pid</div><div class="line">CONF="/usr/local/services/redis/redisroot/redis.conf"     </div><div class="line">RESDISPASSWORD=123456</div><div class="line"></div><div class="line">case "$1" in</div><div class="line">    start)</div><div class="line">        if [ -f $PIDFILE ]</div><div class="line">        then</div><div class="line">                echo "$PIDFILE exists, process is already running or crashed"</div><div class="line">        else</div><div class="line">                echo "Starting Redis server..."</div><div class="line">                $EXEC $CONF</div><div class="line">        fi</div><div class="line">        if [ "$?"="0" ]</div><div class="line">        then</div><div class="line">              echo "Redis is running..."</div><div class="line">        fi</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        if [ ! -f $PIDFILE ]</div><div class="line">        then</div><div class="line">                echo "$PIDFILE does not exist, process is not running"</div><div class="line">        else</div><div class="line">                PID=$(cat $PIDFILE)</div><div class="line">                echo "Stopping ..."</div><div class="line">                $CLIEXEC -a $RESDISPASSWORD -p$REDISPORT shutdown</div><div class="line">                while [ -x $&#123;PIDFILE&#125; ]</div><div class="line">               do</div><div class="line">                    echo "Waiting for Redis to shutdown ..."</div><div class="line">                    sleep 1</div><div class="line">                done</div><div class="line">                echo "Redis stopped"</div><div class="line">        fi</div><div class="line">        ;;</div><div class="line">   restart|force-reload)</div><div class="line">        $&#123;0&#125; stop</div><div class="line">        $&#123;0&#125; start</div><div class="line">        ;;</div><div class="line">  *)</div><div class="line">    echo "Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;" &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>脚本中声明的路径常量需要根据自己的安装路径进行配置。</p>
<p>上面这个脚本是我参考网上的，但网上的有错误，比如我设置了Redis的密码，那么在执行停止命令时是需要验证密码的，所以要这样写<strong>$CLIEXEC -a $RESDISPASSWORD -p$REDISPORT shutdown</strong>。</p>
<h2 id="后续配置"><a href="#后续配置" class="headerlink" title="后续配置"></a>后续配置</h2><p>下面的一些操作是从网上拷贝的，为后续配置Redis，基本相同</p>
<h3 id="添加开机启动服务"><a href="#添加开机启动服务" class="headerlink" title="添加开机启动服务"></a>添加开机启动服务</h3><p>编辑<strong>/etc/rc.local</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/rc.local</div></pre></td></tr></table></figure>
<p>增加启动代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service redis start</div></pre></td></tr></table></figure>
<p>编辑后的配置文件如下：</p>
<p><img src="/images/service-redis-start.png" alt="image"></p>
<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 /etc/init.d/redis</div></pre></td></tr></table></figure>
<h3 id="注册系统服务"><a href="#注册系统服务" class="headerlink" title="注册系统服务"></a>注册系统服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --add redis</div></pre></td></tr></table></figure>
<h3 id="测试redis服务"><a href="#测试redis服务" class="headerlink" title="测试redis服务"></a>测试redis服务</h3><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service redis start</div></pre></td></tr></table></figure>
<p>启动日志如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@VM_37_72_centos redisroot]# service redis start</div><div class="line">Starting Redis server...</div><div class="line">21416:C 23 May 00:24:19.666 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</div><div class="line">21416:C 23 May 00:24:19.666 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=21416, just started</div><div class="line">21416:C 23 May 00:24:19.666 # Configuration loaded</div><div class="line">Redis is running...</div></pre></td></tr></table></figure>
<p>停止服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service redis stop</div></pre></td></tr></table></figure>
<p>停止日志如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_37_72_centos redisroot]#  service redis stop</div><div class="line">Stopping ...</div><div class="line">Redis stopped</div></pre></td></tr></table></figure>
<h3 id="创建redis命令软连接"><a href="#创建redis命令软连接" class="headerlink" title="创建redis命令软连接"></a>创建redis命令软连接</h3><p>在linux下很多地方都需要软连接，软连接其实就是windows的快捷方式。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/services/redis/redisroot/redis-cli /usr/bin/redis</div></pre></td></tr></table></figure>
<h3 id="测试Redis"><a href="#测试Redis" class="headerlink" title="测试Redis"></a>测试Redis</h3><p>最后可以直接进行测试了</p>
<p><img src="/images/redis-test.png" alt="image"></p>
<p>OK, 大功告成。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这些命令教程啊网上都有，不过有些是错误的，只有自己完完全全测试过一遍后才知道哪些有问题，同时会对Redis有个基本的了解吧，平时都在用Windows，相对来说有些傻瓜式，多敲些Linux命令还是有益处的，哈哈(～￣▽￣)～ </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/lc1010078424/article/details/78295482" target="_blank" rel="external">https://blog.csdn.net/lc1010078424/article/details/78295482</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我在我的CentOS7服务器上安装了Redis，遇到了一些问题忘记记录下来了ヽ(￣▽￣)ﾉ，而且我参考网上的教程配置一些脚本的时候发现有错误，根据我对shell的简单理解会介绍一下，毕竟这个东西很常用。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 搭建 Zookeeper-3.4.10 单机服务</title>
    <link href="http://yoursite.com/2018/05/12/CentOS7%20%E6%90%AD%E5%BB%BA%20Zookeeper-3.4.10%20%E5%8D%95%E6%9C%BA%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/05/12/CentOS7 搭建 Zookeeper-3.4.10 单机服务/</id>
    <published>2018-05-11T16:00:00.000Z</published>
    <updated>2018-05-13T01:28:39.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于项目用到了Dubbo,而Dubbo的服务的注册与发现我用了Zookeeper，所以我在部署Dubbo服务的时候，就必须安装Zookeeper,本文记录下我在CentOS7 搭建 Zookeeper-3.4.10 单机服务的过程。</p>
<a id="more"></a>
<h3 id="Zookeeper的安装"><a href="#Zookeeper的安装" class="headerlink" title="Zookeeper的安装"></a>Zookeeper的安装</h3><ol>
<li>下载Zookeeper</li>
</ol>
<p>下载最新版本的ZooKeeper，这里有两个镜像可以选择</p>
<blockquote>
<p>清华镜像:<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/</a></p>
<p>阿里镜像:<a href="https://mirrors.aliyun.com/apache/zookeeper/" target="_blank" rel="external">https://mirrors.aliyun.com/apache/zookeeper/</a></p>
</blockquote>
<p>我就选择阿里镜像进行安装。</p>
<p>首先在<strong>/usr/local</strong>目录下创建<strong>services</strong> 文件夹和其子文件<strong>zookeeper</strong>,然后进入该文件夹，<br>最后用wget进行下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/services/zookeeper</div><div class="line"></div><div class="line">cd /usr/local/services/zookeeper</div><div class="line"></div><div class="line">wget --no-check-certificate  https://mirrors.aliyun.com/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>
<ol>
<li>提取tar文件</li>
</ol>
<p>接下来解压<strong>zookeeper-3.4.10.tar.gz</strong>， 首先进入到该文件夹, 然后进行解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/services/zookeeper</div><div class="line"></div><div class="line">tar -zxf  zookeeper-3.4.10.tar.gz</div><div class="line"></div><div class="line">cd zookeeper-3.4.10</div></pre></td></tr></table></figure>
<p>进入到解压后的文件夹后，创建<strong>data</strong>文件夹 用于存储数据文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir data</div></pre></td></tr></table></figure>
<p>创建<strong>logs</strong>文件夹 用于存储日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir logs</div></pre></td></tr></table></figure>
<ol>
<li>创建配置文件</li>
</ol>
<p>使用命令 vim conf/zoo.cfg 创建配置文件并打开, 其实该文件夹下有了一个zoo_sample.cfg示例配置文件，我们还是新创建一个吧。</p>
<p>编辑内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tickTime = 2000</div><div class="line">dataDir = /usr/local/services/zookeeper/zookeeper-3.4.10/data</div><div class="line">dataLogDir = /usr/local/services/zookeeper/zookeeper-3.4.10/logs</div><div class="line">tickTime = 2000</div><div class="line">clientPort = 2181</div><div class="line">initLimit = 5</div><div class="line">syncLimit = 2</div></pre></td></tr></table></figure>
<h3 id="Zookeeper服务"><a href="#Zookeeper服务" class="headerlink" title="Zookeeper服务"></a>Zookeeper服务</h3><ol>
<li>启动服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/services/zookeeper/zookeeper-3.4.10/bin/zkServer.sh start</div></pre></td></tr></table></figure>
<ol>
<li>连接服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/services/zookeeper/zookeeper-3.4.10/bin/zkCli.sh</div></pre></td></tr></table></figure>
<ol>
<li>查看服务状态</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/services/zookeeper/zookeeper-3.4.10/bin/zkServer.sh status</div></pre></td></tr></table></figure>
<ol>
<li>停止服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/services/zookeeper/zookeeper-3.4.10/bin/zkServer.sh stop</div></pre></td></tr></table></figure>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://segmentfault.com/a/1190000010791627" target="_blank" rel="external">https://segmentfault.com/a/1190000010791627</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目用到了Dubbo,而Dubbo的服务的注册与发现我用了Zookeeper，所以我在部署Dubbo服务的时候，就必须安装Zookeeper,本文记录下我在CentOS7 搭建 Zookeeper-3.4.10 单机服务的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>利用WebMagic来爬取ZZULI的通知</title>
    <link href="http://yoursite.com/2018/05/08/%E5%88%A9%E7%94%A8WebMagic%E6%9D%A5%E7%88%AC%E5%8F%96ZZULI%E7%9A%84%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2018/05/08/利用WebMagic来爬取ZZULI的通知/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-05-28T04:12:49.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="WebMagic介绍"><a href="#WebMagic介绍" class="headerlink" title="WebMagic介绍"></a>WebMagic介绍</h2><p>WebMagic是一个开源的Java垂直爬虫框架，目标是简化爬虫的开发流程，让开发者专注于逻辑功能的开发。最近项目有需求爬取某些网站的信息，考虑到WebMagic的爬虫实现十分精简和扩展性很高，所以爬虫模块就采用了WebMagic来爬取网站的一些信息。</p>
<a id="more"></a>
<p>WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的总体架构图如下：</p>
<p><img src="/images/webmagic.jpg" alt="image"></p>
<p>从上面的架构图中可以看出，我们在下载完页面后需要自己定义规则来抽取信息和发现链接，同时控制爬虫爬取深度，所以需要自定义PageProcessor来进行以上操作。而通过定制Pipeline，我们还可以实现保存结果到文件、数据库等一系列功能，所以我们可以根据自己的需求来自定义Pipeline。</p>
<h2 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h2><h3 id="示例介绍"><a href="#示例介绍" class="headerlink" title="示例介绍"></a>示例介绍</h3><p>通过上面的分析，我们就可以来爬取特定页面的信息了。本次爬取的网站是<strong><a href="http://www.zzuli.edu.cn/s/12/t/1006/p/22/i/13/list.htm" target="_blank" rel="external">http://www.zzuli.edu.cn/s/12/t/1006/p/22/i/13/list.htm</a></strong>，我们需要爬取的页面主要是列表+详情的基本页面组合，有一个列表页，这个列表页以分页的形式展现，我们可以遍历这些分页找到所有目标页面。我们要从通知的详细界面，来抓取通知的标题、内容、日期等信息，也要从列表页抓取的链接等信息，从而获取这个通知的所有文章。</p>
<h4 id="列表页"><a href="#列表页" class="headerlink" title="列表页"></a>列表页</h4><p> 列表页的格式如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.zzuli.edu.cn/s/12/t/1006/p/22/i/13/list.htm</div></pre></td></tr></table></figure></p>
<p>其中i后面的13是可变的，根据上一页和下一页的切换来改变这一个数字，页面如下：</p>
<p><img src="/images/spide-list-page.png" alt="image"></p>
<h4 id="详细页"><a href="#详细页" class="headerlink" title="详细页"></a>详细页</h4><p>详细页的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://www.zzuli.edu.cn/s/12/t/1006/e8/ff/info190719.htm</div><div class="line">http://www.zzuli.edu.cn/s/12/t/1006/e5/65/info189797.htm</div></pre></td></tr></table></figure>
<p>通过观察这两个url，可以发现1006后面的都是可以变的，所以可以根据这个来写正则抽取链接。</p>
<p>详细页页面如下：<br><img src="/images/spide-detail-page.png" alt="image"></p>
<h3 id="发现通知URL"><a href="#发现通知URL" class="headerlink" title="发现通知URL"></a>发现通知URL</h3><p>在这个爬虫需求中，我们需要知道这些详细通知的URL，所以如何抽取这些URL显得很重要，事实也是如此，也是我们要实现爬虫的第一步。我们可以先考虑用以下正则表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www\\.zzuli\\.edu\\.cn/s/12/t/1006/\\w+/\\w+/info\\d+\\.htm</div></pre></td></tr></table></figure></p>
<p>来过滤通知的详细界面，但这样未免太过宽泛，爬取效率也比较低，此时考虑到列表页中含有通知的详细界面的URL，所以我们必须从列表页中指定的区域获取URL。</p>
<p>在这里，我们使用xpath //table[@id=\”newslist\”]选中所有区域，再使用links()获取所有链接，最后再使用正则表达式<a href="http://www\\.zzuli\\.edu\\.cn/s/12/t/1006/\\w+/\\w+/info\\d+\\.htm，" target="_blank" rel="external">http://www\\.zzuli\\.edu\\.cn/s/12/t/1006/\\w+/\\w+/info\\d+\\.htm，</a> 对URL进行过滤，去掉一些其他无用的链接。于是，我们可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">page.addTargetRequests(page.getHtml().xpath(&quot;//table[@id=\&quot;newslist\&quot;]&quot;).links().regex(URL_POST).all());</div></pre></td></tr></table></figure>
<p>同时，我们需要把所有找到的列表页也加到待下载的URL中去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">page.addTargetRequests(page.getHtml().links().regex(URL_LIST).all());</div></pre></td></tr></table></figure>
<h3 id="抽取内容"><a href="#抽取内容" class="headerlink" title="抽取内容"></a>抽取内容</h3><p>抽取页面所需要的信息对于爬虫应用来说是关键的一步，同时也是比较简单的，因为我们可以用xpath来解析html，定义好抽取表达式就可以了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">page.putField(<span class="string">"title"</span>, page.getHtml().xpath(<span class="string">"//h1[@class='arti-title']/text()"</span>));</div><div class="line">page.putField(<span class="string">"content"</span>, page.getHtml().xpath(<span class="string">"//div[@class='read']"</span>));</div><div class="line">page.putField(<span class="string">"date"</span>,</div><div class="line">        page.getHtml().xpath(<span class="string">"//div[@class='arti-metas']/table/tbody/tr/td[3]/span/text()"</span>).replace(<span class="string">"日期："</span>, <span class="string">""</span>));</div></pre></td></tr></table></figure>
<h3 id="列表页和详细页"><a href="#列表页和详细页" class="headerlink" title="列表页和详细页"></a>列表页和详细页</h3><p>我们可以定义几个常量来定义列表页和详细页的URL：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOMAIN = <span class="string">"http://www\\.zzuli\\.edu\\.cn"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_LIST = DOMAIN + <span class="string">"/s/12/t/1006/p/22/i/\\d+/list\\.htm"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_POST = DOMAIN + <span class="string">"/s/12/t/1006/\\w+/\\w+/info\\d+\\.htm"</span>;</div></pre></td></tr></table></figure>
<p>我们可以根据URL_LIST和URL_POST来区别列表页和详细页的抽取。</p>
<h3 id="保存信息"><a href="#保存信息" class="headerlink" title="保存信息"></a>保存信息</h3><p>我们可以自定义Pipeline来将抽取的结果保存在想要的地方，这里我直接将标题、内容、日期等信息封装为实体，然后放到List中，便于后续处理，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义Pipeline，用来处理爬到的数据</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticePipeline</span> <span class="keyword">implements</span> <span class="title">Pipeline</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span> </span>&#123;</div><div class="line">        Notice notice = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            notice = <span class="keyword">new</span> Notice(resultItems.getAll());</div><div class="line">            notice.setLink(resultItems.getRequest().getUrl());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        NoticeList.addNotice(notice);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上的爬虫的实现，我们主要根据列表页来抽取所需要的通知详细页的URL，然后通过xpath来解析页面，获取特定的信息。如此简洁的逻辑和代码得益于WebMagic框架良好的封装，同时扩展性很强，推荐大家使用。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>主要参考WebMagic的官方文档和samples。</p>
<p><a href="http://webmagic.io/docs/zh/" target="_blank" rel="external">http://webmagic.io/docs/zh/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WebMagic介绍&quot;&gt;&lt;a href=&quot;#WebMagic介绍&quot; class=&quot;headerlink&quot; title=&quot;WebMagic介绍&quot;&gt;&lt;/a&gt;WebMagic介绍&lt;/h2&gt;&lt;p&gt;WebMagic是一个开源的Java垂直爬虫框架，目标是简化爬虫的开发流程，让开发者专注于逻辑功能的开发。最近项目有需求爬取某些网站的信息，考虑到WebMagic的爬虫实现十分精简和扩展性很高，所以爬虫模块就采用了WebMagic来爬取网站的一些信息。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="WebMagic" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/WebMagic/"/>
    
    
      <category term="WebMagic" scheme="http://yoursite.com/tags/WebMagic/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>在Linux(CentOS)下重置MySQL根(Root)密码</title>
    <link href="http://yoursite.com/2018/05/05/%E5%9C%A8Linux(CentOS)%E4%B8%8B%E9%87%8D%E7%BD%AEMySQL%E6%A0%B9(Root)%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2018/05/05/在Linux(CentOS)下重置MySQL根(Root)密码/</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-05-09T01:24:23.899Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我的CentOS服务器的mysql密码忘了，记录一下如何重置mysql的root密码</p>
<p>下面是操作步骤：</p>
<a id="more"></a>
<ol>
<li><p>首先输入“service mysqld status”查看当前mysql服务状态。</p>
</li>
<li><p>输入“killall -TERM mysqld”命令停止所有的mysqld进程。</p>
</li>
<li><p>输入“service mysqld stop”命令停止mysqld服务。</p>
</li>
<li><p>输入“mysqld_safe  –skip-grant-tables &amp;”命令以无密码方式进入MySQL安全模式。</p>
</li>
<li><p>输入“mysql -u root”并按回车键即可。</p>
</li>
<li><p>输入“use mysql;”挂载数据库。(注意：请勿忘记在最后输入分号（;）)</p>
</li>
<li><p>输入”update user set password=password(“admin”) where user=’root’;”将Root密码修改为admin。</p>
</li>
<li><p>输入”flush privileges;”更新权限。</p>
</li>
<li><p>输入“quit”并按回车键退出。(注意：此处不需输入分号。)</p>
</li>
<li><p>输入”service mysqld restart”重启mysqld服务。</p>
</li>
<li><p>输入“mysql -u root -p”并按回车键提示输入密码。</p>
</li>
<li><p>输入新密码admin并按回车键，提示已经成功登录。</p>
</li>
</ol>
<p>下面是所有步骤运行截图：</p>
<p><img src="/images/update_mysql_password.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的CentOS服务器的mysql密码忘了，记录一下如何重置mysql的root密码&lt;/p&gt;
&lt;p&gt;下面是操作步骤：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/Linux/MySQL/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>理解GC日志</title>
    <link href="http://yoursite.com/2018/04/17/%E7%90%86%E8%A7%A3GC%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2018/04/17/理解GC日志/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2018-04-17T09:33:25.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="输出GC日志"><a href="#输出GC日志" class="headerlink" title="输出GC日志"></a>输出GC日志</h3><p>通过阅读GC日志，我们可以了解Java虚拟机内存分配与回收策略。<br>先来看一个简单的示例。</p>
<p>下面是GC日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0.115: [GC (System.gc()) [PSYoungGen: 3020K-&gt;600K(38400K)] 3020K-&gt;608K(125952K), 0.0012295 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">0.117: [Full GC (System.gc()) [PSYoungGen: 600K-&gt;0K(38400K)] [ParOldGen: 8K-&gt;554K(87552K)] 608K-&gt;554K(125952K), [Metaspace: 2773K-&gt;2773K(1056768K)], 0.0060759 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </div><div class="line">Heap</div><div class="line"> PSYoungGen      total 38400K, used 333K [0x00000000d5f00000, 0x00000000d8980000, 0x0000000100000000)</div><div class="line">  eden space 33280K, 1% used [0x00000000d5f00000,0x00000000d5f534a8,0x00000000d7f80000)</div><div class="line">  from space 5120K, 0% used [0x00000000d7f80000,0x00000000d7f80000,0x00000000d8480000)</div><div class="line">  to   space 5120K, 0% used [0x00000000d8480000,0x00000000d8480000,0x00000000d8980000)</div><div class="line"> ParOldGen       total 87552K, used 554K [0x0000000081c00000, 0x0000000087180000, 0x00000000d5f00000)</div><div class="line">  object space 87552K, 0% used [0x0000000081c00000,0x0000000081c8aab8,0x0000000087180000)</div><div class="line"> Metaspace       used 2779K, capacity 4486K, committed 4864K, reserved 1056768K</div><div class="line">  class space    used 300K, capacity 386K, committed 512K, reserved 1048576K</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面的GC日志是由下面的Java代码产生的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * GC 日志</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GCLogDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> _1m = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[_1m];</div><div class="line">        <span class="comment">// 将data置为null即让它成为垃圾</span></div><div class="line">        data = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 通知垃圾回收器回收垃圾（help gc）</span></div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Eclipse中以运行配置方式运行上面的代码，并设置VM参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-XX:+PrintGCTimeStamps</div><div class="line">-XX:+PrintGCDetails</div></pre></td></tr></table></figure>
<h3 id="GC日志说明："><a href="#GC日志说明：" class="headerlink" title="GC日志说明："></a>GC日志说明：</h3><p>先看这两行GC日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0.115: [GC (System.gc()) [PSYoungGen: 3020K-&gt;600K(38400K)] 3020K-&gt;608K(125952K), 0.0012295 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">0.117: [Full GC (System.gc()) [PSYoungGen: 600K-&gt;0K(38400K)] [ParOldGen: 8K-&gt;554K(87552K)] 608K-&gt;554K(125952K), [Metaspace: 2773K-&gt;2773K(1056768K)], 0.0060759 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</div></pre></td></tr></table></figure>
<p>通过观察这两行日志发现，它们的格式相同，下面是对其格式的描述：</p>
<p>GC发生时间: [垃圾收集停顿类型: [GC发生区域: GC前该内存区域已使用容量 -&gt; GC后该内存区域已使用容量(该内存区域总容量)] 该内存区域GC所占用的时间] GC前Java堆已使用容量 -&gt; GC后Java堆已使用容量(Java堆总容量)] [user表示用户态消耗的CPU时间，sys表示内核态消耗的CPU时间，real表示操作从开始到结束所经过的墙钟时间]。</p>
<h3 id="GC日志解读"><a href="#GC日志解读" class="headerlink" title="GC日志解读"></a>GC日志解读</h3><p>最前面的数字“0.115:”和“0.117:”代表GC发生的时间，是从Java虚拟机启动以来经过的秒数。</p>
<p>GC日志开头的”[GC” 和”[Full GC”说明这个GC的停顿类型，而不是用来判断是新生代GC还是老年代GC，其中“[Full GC”说明发生了Stop-The-World。这里出现了“(System.gc())”，说明是调用了System.gc()方法所触发的搜集。</p>
<p>接下来的“[PSYoungGen:”代表GC发生的区域，而且这里显示的区域名称与使用的GC收集器名称密切相关。PSYoungGen，表示新生代使用的是多线程垃圾收集器Parallel Scavenge。</p>
<p>方括号内部的“3020K-&gt;600K(38400K)”代表“GC前该内存区域已使用容量 -&gt; GC后该内存区域已使用容量(该内存区域总容量)”。而在方括号外面的“3020K-&gt;608K(125952K)”表示”该内存区域GC所占用的时间] GC前Java堆已使用容量 -&gt; GC后Java堆已使用容量(Java堆总容量)”。</p>
<p>再往后的“0.0012295 secs”代表该内存区域GC所占用的时间，单位为秒。后面的“[Times: user=0.00 sys=0.00, real=0.00 secs] ”为具体的时间信息。其中user表示用户态消耗的CPU时间，sys表示内核态消耗的CPU时间，real表示操作从开始到结束所经过的墙钟时间（Wall Clock Time）。钟时间包括各种非运算的等待耗时，如IO等待、线程阻塞。CPU时间不包括等待时间，当系统有多核或者多个CPU时，多线程操作会叠加这些CPU时间，所以user或sys时间会超过real时间。</p>
<h3 id="堆详细信息解读："><a href="#堆详细信息解读：" class="headerlink" title="堆详细信息解读："></a>堆详细信息解读：</h3><p>下面是堆详细信息的日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Heap</div><div class="line"> PSYoungGen      total 38400K, used 333K [0x00000000d5f00000, 0x00000000d8980000, 0x0000000100000000)</div><div class="line">  eden space 33280K, 1% used [0x00000000d5f00000,0x00000000d5f534a8,0x00000000d7f80000)</div><div class="line">  from space 5120K, 0% used [0x00000000d7f80000,0x00000000d7f80000,0x00000000d8480000)</div><div class="line">  to   space 5120K, 0% used [0x00000000d8480000,0x00000000d8480000,0x00000000d8980000)</div><div class="line"> ParOldGen       total 87552K, used 554K [0x0000000081c00000, 0x0000000087180000, 0x00000000d5f00000)</div><div class="line">  object space 87552K, 0% used [0x0000000081c00000,0x0000000081c8aab8,0x0000000087180000)</div><div class="line"> Metaspace       used 2779K, capacity 4486K, committed 4864K, reserved 1056768K</div><div class="line">  class space    used 300K, capacity 386K, committed 512K, reserved 1048576K</div></pre></td></tr></table></figure>
<p>先了解下Java memory划分：</p>
<p>Java memory主要分heap memory 和 non-heap memory，如下图：</p>
<p><img src="/images/java-memory.jpg" alt="image"></p>
<p>第一行为新生代的大小，大小为38400K。而新生代又分为三个区域分别叫Eden，和俩个Survivor spaces。Eden用来存放新的对象，Survivor spaces用于 新对象 升级到 Tenured area时的 拷贝。默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。 </p>
<p> ParOldGen 为老年代，大小为87552K，大约为PSYoungGen内存大小的2倍。 从JDK8开始，永久代(PermGen)的概念被废弃掉了，取而代之的是一个称为Metaspace的存储空间。Metaspace与PermGen之间最大的区别在于：Metaspace并不在虚拟机中，而是使用本地内存。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li>深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）</li>
<li><a href="https://segmentfault.com/a/1190000012577387" target="_blank" rel="external">https://segmentfault.com/a/1190000012577387</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;输出GC日志&quot;&gt;&lt;a href=&quot;#输出GC日志&quot; class=&quot;headerlink&quot; title=&quot;输出GC日志&quot;&gt;&lt;/a&gt;输出GC日志&lt;/h3&gt;&lt;p&gt;通过阅读GC日志，我们可以了解Java虚拟机内存分配与回收策略。&lt;br&gt;先来看一个简单的示例。&lt;/p&gt;
&lt;p&gt;下面是GC日志：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;0.115: [GC (System.gc()) [PSYoungGen: 3020K-&amp;gt;600K(38400K)] 3020K-&amp;gt;608K(125952K), 0.0012295 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;0.117: [Full GC (System.gc()) [PSYoungGen: 600K-&amp;gt;0K(38400K)] [ParOldGen: 8K-&amp;gt;554K(87552K)] 608K-&amp;gt;554K(125952K), [Metaspace: 2773K-&amp;gt;2773K(1056768K)], 0.0060759 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Heap&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; PSYoungGen      total 38400K, used 333K [0x00000000d5f00000, 0x00000000d8980000, 0x0000000100000000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  eden space 33280K, 1% used [0x00000000d5f00000,0x00000000d5f534a8,0x00000000d7f80000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  from space 5120K, 0% used [0x00000000d7f80000,0x00000000d7f80000,0x00000000d8480000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  to   space 5120K, 0% used [0x00000000d8480000,0x00000000d8480000,0x00000000d8980000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ParOldGen       total 87552K, used 554K [0x0000000081c00000, 0x0000000087180000, 0x00000000d5f00000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  object space 87552K, 0% used [0x0000000081c00000,0x0000000081c8aab8,0x0000000087180000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Metaspace       used 2779K, capacity 4486K, committed 4864K, reserved 1056768K&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  class space    used 300K, capacity 386K, committed 512K, reserved 1048576K&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
      <category term="GC" scheme="http://yoursite.com/categories/JVM/GC/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="GC" scheme="http://yoursite.com/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>Git合并多个commit</title>
    <link href="http://yoursite.com/2018/03/26/Git%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/"/>
    <id>http://yoursite.com/2018/03/26/Git合并多个commit/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-03-26T14:49:10.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在我们做新功能的时候，我们可能需要自己新建一个分支，然后在这个分支上开发，由于功能复杂或者功能点很多，或者每改动一个重要的地方都要进行提交一次，这样自己在测试开发时方便回滚等操作，会产生多个临时的commit，这些临时commit其实才是一个功能点，在向团队开发分支合并代码的时候，我们为了避免太多的 commit 而造成版本控制的混乱，通常我们推荐将这些 commit 合并成一个。</p>
<a id="more"></a>
<p><strong>1. git log查看提交记录</strong></p>
<p>首先我们利用<strong>git log</strong>查看当前分支提交的历史，最近提交在最上面，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">commit 2d6454c942f3961ad351caf145bedf29c4d3743c</div><div class="line"></div><div class="line">commit d059f47fd7ab863353cd98fb29c98ceb1fe97845</div><div class="line"></div><div class="line">commit 951522a48081b8ab4a529fee706d94c8fe3b16c8</div><div class="line"></div><div class="line">commit 1d85c5a75128b6127de90b9db367dc9d67bdd17a</div></pre></td></tr></table></figure>
<p><strong>2. git rebase</strong></p>
<p>这里用到了<strong>git rebase</strong>命令，这个命令主要用于更新代码和合并commit。假设你本地和服务器目前是同步的，然后你本地做了几次commit，其他人向服务器推送了commit。如果你希望同步服务器的commit，但是本地的commit又不想push到服务器的时候(比如你开发完某个功能，可能需要5个commit)。先fetch，然后rebase服务器的代码。</p>
<p>这里想要合并 1~2的commit，有两种方式</p>
<ol>
<li>从HEAD开始往后合并两次提交</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i HEAD~2</div></pre></td></tr></table></figure>
<ol>
<li>指定要合并的commit之前的版本号</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i 951522a</div></pre></td></tr></table></figure>
<p>此时951522a这个commit不参与合并</p>
<p><strong>3. 选取要合并的提交</strong></p>
<p>当输入完以上两个命令会弹出一个文本文件，内容前几行如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pick d059f47 add test.txt</div><div class="line">pick 2d6454c Update test.txt</div></pre></td></tr></table></figure>
<p>此时将第二个pick改为squash或者s,之后保存并关闭文本编辑窗口即可。改完之后文本内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p d059f47 add test.txt</div><div class="line">s 2d6454c Update test.txt</div></pre></td></tr></table></figure>
<p>保存后会弹出一个新文件，前面是你刚才要合并的两条 commit message，然后将这两条commit message删除，然后重新设置新的message，保存退出，如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># This is a combination of 2 commits.</div><div class="line"></div><div class="line"># This is the commit message #2:</div><div class="line"></div><div class="line">Add and update test.txt</div></pre></td></tr></table></figure>
<p>最后就可以发现两条commit message 已经合并为一条了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">commit 9fff5fa09e09836ff2c535486ced2a66f8e4c19a</div><div class="line">Author: Juntao Han &lt;499445428@qq.com&gt;</div><div class="line">Date:   Mon Mar 26 21:24:47 2018 +0800</div><div class="line"></div><div class="line">    Add and update test.txt</div><div class="line"></div><div class="line">commit 951522a48081b8ab4a529fee706d94c8fe3b16c8</div><div class="line">Author: Juntao Han &lt;499445428@qq.com&gt;</div><div class="line">Date:   Mon Mar 26 21:03:29 2018 +0800</div><div class="line"></div><div class="line">    update  .gitignore</div><div class="line"></div><div class="line">commit 1d85c5a75128b6127de90b9db367dc9d67bdd17a</div><div class="line">Author: Juntao Han &lt;499445428@qq.com&gt;</div><div class="line">Date:   Mon Mar 26 20:59:13 2018 +0800</div><div class="line"></div><div class="line">    :octocat: Added .gitattributes &amp; .gitignore files</div></pre></td></tr></table></figure>
<p>接下来推送到git服务器就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们做新功能的时候，我们可能需要自己新建一个分支，然后在这个分支上开发，由于功能复杂或者功能点很多，或者每改动一个重要的地方都要进行提交一次，这样自己在测试开发时方便回滚等操作，会产生多个临时的commit，这些临时commit其实才是一个功能点，在向团队开发分支合并代码的时候，我们为了避免太多的 commit 而造成版本控制的混乱，通常我们推荐将这些 commit 合并成一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="rebase" scheme="http://yoursite.com/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>关于git reabse的使用</title>
    <link href="http://yoursite.com/2018/03/15/%E5%85%B3%E4%BA%8Egit%20reabse%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/15/关于git reabse的使用/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2018-03-26T14:48:07.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于在工作中用到了git rebase命令，所以记录一下。</p>
<p>比如当前在location-scan 分支做一个新功能，当新功能做完了，然后发pull request请求合并到develop分支，但在你提交pull request 之前，有人改动了develop分支的代码，导致你的代码与develop分支的代码发生了冲突， 由于有冲突，需要从develop分支将代码拉到location-scan 分支，进行代码的合并，然后再进行提交，此时的提交没有合并过的痕迹，所以此时我们就需要用到了git rebase命令了，具体的使用的流程：</p>
<a id="more"></a>
<ol>
<li>拉取远程develop分支代码，并与当前分支的代码合并</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase origin/develop</div></pre></td></tr></table></figure>
<ol>
<li>添加代码到暂存区</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
<ol>
<li>如果让git继续应用(apply)余下的补丁，那么就用–continue参数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase --continue</div></pre></td></tr></table></figure>
<ol>
<li>如果想让git放弃此次合并，那么就用–abort参数来终止rebase的动作</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase --abort</div></pre></td></tr></table></figure>
<ol>
<li>如果你想多次的提交都有第一次的提交合并，那么就用–amend参数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend (合并commit)</div></pre></td></tr></table></figure>
<ol>
<li>如果需要 将文件从暂存区取消，那么执行以下命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD &lt;file&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于在工作中用到了git rebase命令，所以记录一下。&lt;/p&gt;
&lt;p&gt;比如当前在location-scan 分支做一个新功能，当新功能做完了，然后发pull request请求合并到develop分支，但在你提交pull request 之前，有人改动了develop分支的代码，导致你的代码与develop分支的代码发生了冲突， 由于有冲突，需要从develop分支将代码拉到location-scan 分支，进行代码的合并，然后再进行提交，此时的提交没有合并过的痕迹，所以此时我们就需要用到了git rebase命令了，具体的使用的流程：&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="rebase" scheme="http://yoursite.com/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之Builder模式</title>
    <link href="http://yoursite.com/2018/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BBuilder%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/09/设计模式之Builder模式/</id>
    <published>2018-03-08T16:00:00.000Z</published>
    <updated>2018-03-26T14:48:07.182Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们在创建对象的时候，如果对象需要很多的参数，并且有些参数是可选的，有些是必选的，有的可能默认值，这个时候如果我们用构造器传参或者通过set方法进行属性值设置，那么这样就有很大的问题，比如别人在创建这个对象的时候，并不知道需要传哪些参数，哪些参数是必须传值的，而且调用也不方便，所有我们就可以用到Builder模式，这里就是所谓的链式调用。在Effective Java书中， 第2条就是遇到到多个构造器时要考虑用构造器，里面讲的比较详细。</p>
<p>比如我们想这样创建一个对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> User.Builder(<span class="string">"Walker"</span>, <span class="string">"Han"</span>)</div><div class="line">        .age(<span class="number">20</span>)</div><div class="line">        .phone(<span class="string">"123456789"</span>)</div><div class="line">        .address(<span class="string">"166号"</span>)</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>此时我们需要在User类中创建一个内部类Builder，该类用来创建User对象，通过上面的代码我们发现，可以连续调用属性的方法进行传参，这就要求每次调用后都要返回当前对象，这样才能连续调用，下面是代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 链式调用</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName; <span class="comment">// 必传参数 </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName; <span class="comment">// 必传参数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 可选参数</span></div><div class="line">    <span class="keyword">private</span> String phone; <span class="comment">// 可选参数 </span></div><div class="line">    <span class="keyword">private</span> String address; <span class="comment">// 可选参数</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.firstName = builder.firstName;</div><div class="line">        <span class="keyword">this</span>.lastName = builder.lastName;</div><div class="line">        <span class="keyword">this</span>.age = builder.age;</div><div class="line">        <span class="keyword">this</span>.phone = builder.phone;</div><div class="line">        <span class="keyword">this</span>.address = builder.address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User [firstName="</span> + firstName + <span class="string">", lastName="</span> + lastName + <span class="string">", age="</span> + age + <span class="string">", phone="</span> + phone</div><div class="line">                + <span class="string">", address="</span> + address + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">        <span class="keyword">private</span> String phone;</div><div class="line">        <span class="keyword">private</span> String address;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.firstName = firstName;</div><div class="line">            <span class="keyword">this</span>.lastName = lastName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">phone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.phone = phone;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">address</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.address = address;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就可以像上面的方式进行调用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们在创建对象的时候，如果对象需要很多的参数，并且有些参数是可选的，有些是必选的，有的可能默认值，这个时候如果我们用构造器传参或者通过set方法进行属性值设置，那么这样就有很大的问题，比如别人在创建这个对象的时候，并不知道需要传哪些参数，哪些参数是必须传值的，而且调用也不方便，所有我们就可以用到Builder模式，这里就是所谓的链式调用。在Effective Java书中， 第2条就是遇到到多个构造器时要考虑用构造器，里面讲的比较详细。&lt;/p&gt;
&lt;p&gt;比如我们想这样创建一个对象&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User.Builder(&lt;span class=&quot;string&quot;&gt;&quot;Walker&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Han&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .age(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .phone(&lt;span class=&quot;string&quot;&gt;&quot;123456789&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .address(&lt;span class=&quot;string&quot;&gt;&quot;166号&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .build();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Builder模式" scheme="http://yoursite.com/tags/Builder%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux搭建Java Web环境(JDK8, Tomcat8.5, Nginx)</title>
    <link href="http://yoursite.com/2018/01/01/Linux%E6%90%AD%E5%BB%BAJava%20Web%E7%8E%AF%E5%A2%83(JDK8,%20Tomcat8.5,%20Nginx)/"/>
    <id>http://yoursite.com/2018/01/01/Linux搭建Java Web环境(JDK8, Tomcat8.5, Nginx)/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-06-29T15:09:15.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>首先下载jdk-8u172-linux-x64.tar.gz，然后上传到服务器<strong>/usr/local/java</strong>目录</p>
<p>解压jdk-8u172-linux-x64.tar.gz</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf jdk-8u172-linux-x64.tar.gz</div></pre></td></tr></table></figure>
<p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div></pre></td></tr></table></figure>
<p>在最前面添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_172 </div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </div><div class="line">export  PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure>
<p>输入:wq!保存退出</p>
<p>执行profile文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p>这样可以使配置不用重启即可立即生效。</p>
<p>检查新安装的jdk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
<p>显示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.8.0_172&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_172-b11)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.172-b11, mixed mode)</div></pre></td></tr></table></figure>
<h3 id="安装Tomcat8-5"><a href="#安装Tomcat8-5" class="headerlink" title="安装Tomcat8.5"></a>安装Tomcat8.5</h3><p>下载tomcat到/usr/local/tomcat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://redrockdigimark.com/apachemirror/tomcat/tomcat-8/v8.5.23/bin/apache-tomcat-8.5.23.tar.gz</div></pre></td></tr></table></figure>
<p>解压：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf apache-tomcat-8.5.23.tar.gz</div></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh startup.sh</div></pre></td></tr></table></figure>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>开始前，请确认gcc g++开发类库是否装好，默认已经安装。</p>
<p>centos平台编译环境使用如下指令</p>
<p>安装make：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc automake autoconf libtool make</div></pre></td></tr></table></figure>
<p>安装g++:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++</div></pre></td></tr></table></figure>
<p>下面正式开始安装</p>
<p>选择安装目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nignx</div></pre></td></tr></table></figure>
<p><strong>安装PCRE库</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nignx</div><div class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz </div><div class="line">tar -zxvf pcre-8.39.tar.gz</div><div class="line">cd pcre-8.39</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p><strong>安装zlib库</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nignx</div><div class="line"> </div><div class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</div><div class="line">tar -zxvf zlib-1.2.11.tar.gz</div><div class="line">cd zlib-1.2.11</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p><strong>安装openssl</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nignx</div><div class="line">wget https://www.openssl.org/source/openssl-1.0.1t.tar.gz</div><div class="line">tar -zxvf openssl-1.0.1t.tar.gz</div></pre></td></tr></table></figure>
<p><strong>启动nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<p><strong>查看进程</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef|grep nginx</div></pre></td></tr></table></figure>
<p><strong>其他命令</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nginx -s reload ：修改配置后重新加载生效</div><div class="line">nginx -s reopen ：重新打开日志文件</div><div class="line">nginx -t -c /usr/local/nginx/conf/nginx.conf  测试nginx配置文件是否正确</div></pre></td></tr></table></figure>
<p><strong>firewalld的基本使用</strong></p>
<p>启动： systemctl start firewalld</p>
<p>查看状态： systemctl status firewalld </p>
<p>停止： systemctl disable firewalld</p>
<p>禁用： systemctl stop firewalld</p>
<p><strong>查看firewall是否运行</strong></p>
<p>systemctl status firewalld.service</p>
<p><strong>添加开放端口</strong></p>
<p>firewall-cmd –zone=public –add-port=80/tcp –permanent    （–permanent永久生效，没有此参数重启后失效）</p>
<p><strong>查看所有打开的端口：</strong></p>
<p>firewall-cmd –zone=public –list-ports</p>
<p><strong>更新防火墙规则：</strong></p>
<p>firewall-cmd –reload</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装JDK&quot;&gt;&lt;a href=&quot;#安装JDK&quot; class=&quot;headerlink&quot; title=&quot;安装JDK&quot;&gt;&lt;/a&gt;安装JDK&lt;/h3&gt;&lt;p&gt;首先下载jdk-8u172-linux-x64.tar.gz，然后上传到服务器&lt;strong&gt;/usr/local/java&lt;/strong&gt;目录&lt;/p&gt;
&lt;p&gt;解压jdk-8u172-linux-x64.tar.gz&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树结构分析</title>
    <link href="http://yoursite.com/2017/12/24/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/12/24/二叉搜索树结构分析/</id>
    <published>2017-12-23T16:00:00.000Z</published>
    <updated>2018-03-26T14:48:07.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树），它具有以下特点：</p>
<ol>
<li>若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>任意节点的左、右子树也分别为二叉查找树；</li>
<li>没有键值相等的节点。</li>
</ol>
<p>下面是一个二叉查找树的示例：</p>
<p><img src="/images/BinarySearchTree.png" alt="image"></p>
<a id="more"></a>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>既然二叉查找树也属于二叉树，那么二叉树的基本操作二叉查找树也需要实现，下面是基本操作</p>
<ul>
<li>查找结点</li>
<li>插入结点</li>
<li>删除结点</li>
</ul>
<p>我们先写个接口来定义要实现这些操作，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 树的接口</div><div class="line"> * <span class="doctag">@author</span> mingshan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入操作</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span> 插入成功 ，返回 &#123;<span class="doctag">@true</span>&#125;，否则返回&#123;<span class="doctag">@false</span>&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 移除</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span> 移除的元素</div><div class="line">     */</div><div class="line">    <span class="function">E <span class="title">remove</span><span class="params">(E value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清空二叉树</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断二叉树中是否有此元素</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span> 如果包含，返回&#123;<span class="doctag">@true</span>&#125;，否则返回&#123;<span class="doctag">@false</span>&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取二叉树中结点的数量</div><div class="line">     * <span class="doctag">@return</span> 二叉树中结点的数量</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来依次实现。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>先在类中定义二叉查找树的根结点和结点数量的成员变量。然后定义一个静态内部类Node来表示结点，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根结点</span></div><div class="line"><span class="keyword">private</span> Node&lt;E&gt; root;</div><div class="line"><span class="comment">// 二叉树结点数量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</div><div class="line">    E item;</div><div class="line">    Node&lt;E&gt; parent;</div><div class="line">    Node&lt;E&gt; left;</div><div class="line">    Node&lt;E&gt; right;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(Node&lt;E&gt; parent, E item)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">        <span class="keyword">this</span>.item = item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"item="</span> + item + <span class="string">" parent="</span> + ((parent != <span class="keyword">null</span>) ? parent.item : <span class="string">"NULL"</span>) + <span class="string">" left="</span></div><div class="line">                + ((left != <span class="keyword">null</span>) ? left.item : <span class="string">"NULL"</span>) + <span class="string">" right="</span> + ((right != <span class="keyword">null</span>) ? right.item : <span class="string">"NULL"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查找结点"><a href="#查找结点" class="headerlink" title="查找结点"></a>查找结点</h3><p>这里采用先序遍历二叉查找树，先访问根结点，然后遍历左子树，最后遍历右子树。这里的泛型参数需要继承Comparable，然后我们就可以利用其compareTo方法来比较结点的值然后进行搜索即可。<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 先序遍历二叉树</span></div><div class="line">    Node&lt;E&gt; node = root;</div><div class="line">    <span class="keyword">if</span> (root.item.compareTo(value) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果当前值比父节点的值小</span></div><div class="line">        <span class="keyword">if</span> (node.item.compareTo(value) &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 此时应该从父节点的左子树进行搜索</span></div><div class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; (node.left.item.compareTo(value) == <span class="number">0</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            node = node.left;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果当前结点的值比父结点的值大，说明应该从父节点的右子树搜索</span></div><div class="line">            <span class="comment">// 并且新结点作为叶子结点，其父节点的右子结点应为null</span></div><div class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span> </div><div class="line">                    &amp;&amp; (node.right.item.compareTo(value) == <span class="number">0</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            node = node.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h3><p>根据二叉搜索树的特征，若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值。而且新插入的结点必为叶子结点，所以只需遍历到当前符合上面要求的结点，然后将其为空的左子结点或者右子结点指向当前的新节点，最后将新结点的父结点指向当前结点。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E value)</span> </span>&#123;</div><div class="line">    Node&lt;E&gt; node = addNode(value);</div><div class="line">    <span class="keyword">return</span> (node != <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">addNode</span><span class="params">(E value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 生成新结点</span></div><div class="line">    Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>, value);</div><div class="line">    <span class="comment">// 如果根结点不存在</span></div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">        root = newNode;</div><div class="line">        size++;</div><div class="line">        <span class="keyword">return</span> newNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node&lt;E&gt; node = root;</div><div class="line">    <span class="comment">// 按照先序进行遍历二叉树</span></div><div class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如过新结点的值比父节点的值小</span></div><div class="line">        <span class="keyword">if</span> (node.item.compareTo(newNode.item) &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 此时应该从父节点的左子树进行搜索</span></div><div class="line">            <span class="comment">// 并且新结点作为叶子结点，其父节点的左子结点应为null</span></div><div class="line">            <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</div><div class="line">                node.left = newNode;</div><div class="line">                newNode.parent = node;</div><div class="line">                size++;</div><div class="line">                <span class="keyword">return</span> newNode;</div><div class="line">            &#125;</div><div class="line">            node = node.left;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果当前结点的值比父结点的值大，说明应该从父节点的右子树搜索</span></div><div class="line">            <span class="comment">// 并且新结点作为叶子结点，其父节点的右子结点应为null</span></div><div class="line">            <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</div><div class="line">                node.right = newNode;</div><div class="line">                newNode.parent = node;</div><div class="line">                size++;</div><div class="line">                <span class="keyword">return</span> newNode;</div><div class="line">            &#125;</div><div class="line">            node = node.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h3><p>删除结点是操作中最为复杂的，分下面几种情况考虑：</p>
<ol>
<li>要删除的结点为叶子结点，没有左右子节点</li>
<li>要删除的结点只有左子结点(树)或者右子结点(树)</li>
<li>要删除的结点左右结点(树)都有</li>
</ol>
<p>下面这幅图代表这几种操作示例：</p>
<p><img src="/images/BinarySearchTree_remove.png" alt="image"></p>
<p>其中第一幅图代表要删除的结点只有右子结点(树)，只需将该结点的父结点指向该结点的右子结点，但要判断当前结点是其父结点的子左结点还是右子结点，然后对应指向当前结点的子结点即可；图二代表要删除的结点只有左子结点(树)，原理是一样的；图三是代表要删除的结点左右结点(树)都有，此时需要找出其右子树中的最小值代替该节点上的值，然后删除其右子树上的最小值。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(E value)</span> </span>&#123;</div><div class="line">    Node&lt;E&gt; node = <span class="keyword">this</span>.removeValue(value);</div><div class="line">    <span class="keyword">return</span> (node != <span class="keyword">null</span> ? node.item : <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">removeValue</span><span class="params">(E value)</span> </span>&#123;</div><div class="line">    Node&lt;E&gt; curr = <span class="keyword">this</span>.getNode(value);</div><div class="line">    <span class="keyword">if</span> (curr != <span class="keyword">null</span>) &#123;</div><div class="line">        curr = removeNode(curr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> curr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除结点，分下面几种情况考虑</div><div class="line"> * &lt;ul&gt;</div><div class="line"> *   &lt;li&gt;要删除的结点为叶子结点，没有左右子节点&lt;/li&gt;</div><div class="line"> *   &lt;li&gt;要删除的结点只有左子结点(树)或者右子结点(树)&lt;/li&gt;</div><div class="line"> *   &lt;li&gt;要删除的结点左右结点(树)都有&lt;/li&gt;</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> * <span class="doctag">@param</span> nodeToRemoved</div><div class="line"> * <span class="doctag">@return</span> 删除的结点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">removeNode</span><span class="params">(Node&lt;E&gt; nodeToRemoved)</span> </span>&#123;</div><div class="line">    <span class="comment">// 判断当前节点是否为叶子结点（叶子结点的特点是没有子结点）</span></div><div class="line">    <span class="comment">// 直接删除叶子结点</span></div><div class="line">    <span class="keyword">if</span> (nodeToRemoved.left == <span class="keyword">null</span> &amp;&amp; nodeToRemoved.right == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 判断该二叉树是否只有根结点一个结点</span></div><div class="line">        <span class="keyword">if</span> (nodeToRemoved == root) &#123;</div><div class="line">            root = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果二叉树不是只有根结点一个结点，那么当前要删除的结点一定有父结点</span></div><div class="line">        Node&lt;E&gt; targetParent = nodeToRemoved.parent;</div><div class="line">        <span class="comment">// 判断当前结点是其父结点的左子结点还是右子结点</span></div><div class="line">        <span class="keyword">if</span> (targetParent.left.item.compareTo(nodeToRemoved.item) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 如果当前结点是其父结点的左子结点</span></div><div class="line">            targetParent.left = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetParent.right.item.compareTo(nodeToRemoved.item) == <span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">// 如果当前结点是其父结点的右子结点</span></div><div class="line">            targetParent.right = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 此时二叉树有问题</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeToRemoved.left != <span class="keyword">null</span> &amp;&amp; nodeToRemoved.right != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 要删除的结点左右结点(树)都有</span></div><div class="line">        <span class="comment">// 此时结点的左右子结点(树)都有，用其右子树中的最小值代替该节点上的值,删除其右子树上的最小值</span></div><div class="line">        <span class="comment">// 所以此时需要先找出其右子树的最小值</span></div><div class="line">        Node&lt;E&gt; minNode = findMinNode(nodeToRemoved);</div><div class="line">        <span class="comment">// 将当前要删除结点的值替换为其子树的最小节点</span></div><div class="line">        nodeToRemoved.item = minNode.item;</div><div class="line">        <span class="comment">// 删除找到的最小节点</span></div><div class="line">        removeNode(minNode);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 要删除的结点只有左子结点(树)或者右子结点(树)</span></div><div class="line">        <span class="comment">// 此时需要将该结点的子结点(树)指向该结点(树)的父结点</span></div><div class="line">        Node&lt;E&gt; targetLeft = nodeToRemoved.left;</div><div class="line">        Node&lt;E&gt; targetRight = nodeToRemoved.right;</div><div class="line">        Node&lt;E&gt; targetParent = nodeToRemoved.parent;</div><div class="line">        <span class="comment">// 判断当前要删除的结点是其父结点的左结点还是右结点</span></div><div class="line">        <span class="keyword">if</span> (targetParent.left.item.compareTo(nodeToRemoved.item) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 左</span></div><div class="line">            <span class="keyword">if</span> (targetLeft != <span class="keyword">null</span>) &#123;</div><div class="line">                targetParent.left = targetLeft;</div><div class="line">                targetLeft.parent = targetParent;</div><div class="line">                targetLeft = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (targetRight != <span class="keyword">null</span>) &#123;</div><div class="line">                targetParent.left = targetRight;</div><div class="line">                targetRight.parent = targetParent;</div><div class="line">                targetRight = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetParent.right.item.compareTo(nodeToRemoved.item) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 右</span></div><div class="line">            <span class="keyword">if</span> (targetLeft != <span class="keyword">null</span>) &#123;</div><div class="line">                targetParent.right = targetLeft;</div><div class="line">                targetLeft.parent = targetParent;</div><div class="line">                targetLeft = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (targetRight != <span class="keyword">null</span>) &#123;</div><div class="line">                targetParent.right = targetRight;</div><div class="line">                targetRight.parent = targetParent;</div><div class="line">                targetRight = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    size--;</div><div class="line">    <span class="keyword">return</span> nodeToRemoved;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要通过传入的值来获取二叉树的结点，此时调用函数<strong>getNode</strong>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过传入的值来搜索结点</div><div class="line"> * <span class="doctag">@param</span> value 传入的值</div><div class="line"> * <span class="doctag">@return</span> 结点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">getNode</span><span class="params">(E value)</span> </span>&#123;</div><div class="line">    Node&lt;E&gt; node = root;</div><div class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span> &amp;&amp; node.item != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (node.item.compareTo(value) &gt; <span class="number">0</span>) &#123;</div><div class="line">            node = node.left;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.item.compareTo(value) &lt; <span class="number">0</span>) &#123;</div><div class="line">            node = node.right;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在要删除的结点左右结点(树)都有的情况下，我们需要查找其右子树中的最小值，此时我们考虑到如果为最小结点，那么该结点必然没有左子树(结点)，所以可以选择递归进行遍历，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 找到给定结点的子树的最小结点(值)</div><div class="line"> * 此时应该考虑到如果为最小结点，那么该结点必然没有左子树(结点)，所以可以选择递归进行遍历</div><div class="line"> * <span class="doctag">@param</span> nodeToRemoved</div><div class="line"> * <span class="doctag">@return</span> 给定结点的子树的最小结点(值)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">findMinNode</span><span class="params">(Node&lt;E&gt; nodeToRemoved)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nodeToRemoved == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (nodeToRemoved.left == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> nodeToRemoved;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> findMinNode(nodeToRemoved.left);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>我们需要将二叉树打印到控制台上，便于查看二叉树的结构，效果如下：</p>
<p><img src="/images/BinarySearchTree_print.png" alt="image"></p>
<p>打印代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> TreePrinter.getString(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreePrinter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">String <span class="title">getString</span><span class="params">(BinarySearchTree&lt;T&gt; tree)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tree.root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"Tree has no nodes."</span>;</div><div class="line">        <span class="keyword">return</span> getString(tree.root, <span class="string">""</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">String <span class="title">getString</span><span class="params">(Node&lt;E&gt; node, String prefix, <span class="keyword">boolean</span> isTail)</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (node.parent != <span class="keyword">null</span>) &#123;</div><div class="line">            String siteme = <span class="string">"left"</span>;</div><div class="line">            <span class="keyword">if</span> (node.equals(node.parent.right))</div><div class="line">                siteme = <span class="string">"right"</span>;</div><div class="line">            builder.append(prefix + (isTail ? <span class="string">"└── "</span> : <span class="string">"├── "</span>) + <span class="string">"("</span> + siteme + <span class="string">") "</span> + node.item + <span class="string">"\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            builder.append(prefix + (isTail ? <span class="string">"└── "</span> : <span class="string">"├── "</span>) + node.item + <span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        List&lt;Node&lt;E&gt;&gt; children = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span> || node.right != <span class="keyword">null</span>) &#123;</div><div class="line">            children = <span class="keyword">new</span> ArrayList&lt;Node&lt;E&gt;&gt;(<span class="number">2</span>);</div><div class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</div><div class="line">                children.add(node.left);</div><div class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</div><div class="line">                children.add(node.right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size() - <span class="number">1</span>; i++) &#123;</div><div class="line">                builder.append(getString(children.get(i), prefix + (isTail ? <span class="string">"    "</span> : <span class="string">"│   "</span>), <span class="keyword">false</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (children.size() &gt;= <span class="number">1</span>) &#123;</div><div class="line">                builder.append(getString(children.get(children.size() - <span class="number">1</span>), prefix + (isTail ? <span class="string">"    "</span> : <span class="string">"│   "</span>), <span class="keyword">true</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p>本篇博客的代码地址：</p>
<p><a href="https://github.com/mstao/data-structures/blob/master/Tree/src/pers/mingshan/tree/BinarySearchTree.java" target="_blank" rel="external">https://github.com/mstao/data-structures/blob/master/Tree/src/pers/mingshan/tree/BinarySearchTree.java</a></p>
<p>测试代码地址如下：</p>
<p><a href="https://github.com/mstao/data-structures/blob/master/Tree/src/pers/mingshan/tree/TreeTest.java" target="_blank" rel="external">https://github.com/mstao/data-structures/blob/master/Tree/src/pers/mingshan/tree/TreeTest.java</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树），它具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；&lt;/li&gt;
&lt;li&gt;若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；&lt;/li&gt;
&lt;li&gt;任意节点的左、右子树也分别为二叉查找树；&lt;/li&gt;
&lt;li&gt;没有键值相等的节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个二叉查找树的示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/BinarySearchTree.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉搜索树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
</feed>
